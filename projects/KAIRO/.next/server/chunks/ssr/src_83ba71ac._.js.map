{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(amount: number): string {\n  if (typeof amount !== 'number' || isNaN(amount)) return '$0.00'\n  try {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount)\n  } catch (error) {\n    return '$0.00'\n  }\n}\n\nexport function formatPercent(value: number): string {\n  if (typeof value !== 'number' || isNaN(value)) return '0.00%'\n  try {\n    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`\n  } catch (error) {\n    return '0.00%'\n  }\n}\n\nexport function formatNumber(value: number): string {\n  if (typeof value !== 'number' || isNaN(value)) return '0'\n  try {\n    return new Intl.NumberFormat('en-US').format(value)\n  } catch (error) {\n    return '0'\n  }\n}"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,sKAAO,EAAC,IAAA,6IAAI,EAAC;AACtB;AAEO,SAAS,eAAe,MAAc;IAC3C,IAAI,OAAO,WAAW,YAAY,MAAM,SAAS,OAAO;IACxD,IAAI;QACF,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;YACpC,OAAO;YACP,UAAU;QACZ,GAAG,MAAM,CAAC;IACZ,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,SAAS,cAAc,KAAa;IACzC,IAAI,OAAO,UAAU,YAAY,MAAM,QAAQ,OAAO;IACtD,IAAI;QACF,OAAO,GAAG,SAAS,IAAI,MAAM,KAAK,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;IACvD,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,SAAS,aAAa,KAAa;IACxC,IAAI,OAAO,UAAU,YAAY,MAAM,QAAQ,OAAO;IACtD,IAAI;QACF,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS,MAAM,CAAC;IAC/C,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;;;;AAEA,MAAM,qBAAO,mNAAgB,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,yHAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;;;;;;AAEA,MAAM,iBAAiB,IAAA,uKAAG,EACxB,0RACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,mNAAgB,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,wKAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,IAAA,yHAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }"],"names":[],"mappings":";;;;;;;AACA;AACA;;;;AAEA,MAAM,gBAAgB,IAAA,uKAAG,EACvB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,IAAA,yHAAE,EAAC,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/tabs.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface TabsContextValue {\n  value: string\n  onValueChange: (value: string) => void\n}\n\nconst TabsContext = React.createContext<TabsContextValue | undefined>(undefined)\n\ninterface TabsProps {\n  value: string\n  onValueChange: (value: string) => void\n  children: React.ReactNode\n  className?: string\n}\n\nconst Tabs = ({ value, onValueChange, children, className }: TabsProps) => {\n  return (\n    <TabsContext.Provider value={{ value, onValueChange }}>\n      <div className={cn(\"w-full\", className)}>\n        {children}\n      </div>\n    </TabsContext.Provider>\n  )\n}\n\nconst TabsList = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = \"TabsList\"\n\ninterface TabsTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  value: string\n}\n\nconst TabsTrigger = React.forwardRef<HTMLButtonElement, TabsTriggerProps>(\n  ({ className, value: triggerValue, ...props }, ref) => {\n    const context = React.useContext(TabsContext)\n    if (!context) {\n      throw new Error('TabsTrigger must be used within a Tabs component')\n    }\n    \n    const { value, onValueChange } = context\n    const isActive = value === triggerValue\n    \n    return (\n      <button\n        ref={ref}\n        className={cn(\n          \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n          isActive\n            ? \"bg-background text-foreground shadow-sm\"\n            : \"hover:bg-background/50\",\n          className\n        )}\n        onClick={() => onValueChange(triggerValue)}\n        {...props}\n      />\n    )\n  }\n)\nTabsTrigger.displayName = \"TabsTrigger\"\n\ninterface TabsContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: string\n}\n\nconst TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>(\n  ({ className, value: contentValue, ...props }, ref) => {\n    const context = React.useContext(TabsContext)\n    if (!context) {\n      throw new Error('TabsContent must be used within a Tabs component')\n    }\n    \n    const { value } = context\n    \n    if (value !== contentValue) {\n      return null\n    }\n    \n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n          className\n        )}\n        {...props}\n      />\n    )\n  }\n)\nTabsContent.displayName = \"TabsContent\"\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }"],"names":[],"mappings":";;;;;;;;;;;AAAA;AACA;;;;AAOA,MAAM,4BAAc,sNAAmB,CAA+B;AAStE,MAAM,OAAO,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAa;IACpE,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAO;QAAc;kBAClD,cAAA,8OAAC;YAAI,WAAW,IAAA,yHAAE,EAAC,UAAU;sBAC1B;;;;;;;;;;;AAIT;AAEA,MAAM,yBAAW,mNAAgB,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,8FACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAMvB,MAAM,4BAAc,mNAAgB,CAClC,CAAC,EAAE,SAAS,EAAE,OAAO,YAAY,EAAE,GAAG,OAAO,EAAE;IAC7C,MAAM,UAAU,mNAAgB,CAAC;IACjC,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG;IACjC,MAAM,WAAW,UAAU;IAE3B,qBACE,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,mSACA,WACI,4CACA,0BACJ;QAEF,SAAS,IAAM,cAAc;QAC5B,GAAG,KAAK;;;;;;AAGf;AAEF,YAAY,WAAW,GAAG;AAM1B,MAAM,4BAAc,mNAAgB,CAClC,CAAC,EAAE,SAAS,EAAE,OAAO,YAAY,EAAE,GAAG,OAAO,EAAE;IAC7C,MAAM,UAAU,mNAAgB,CAAC;IACjC,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,EAAE,KAAK,EAAE,GAAG;IAElB,IAAI,UAAU,cAAc;QAC1B,OAAO;IACT;IAEA,qBACE,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,mIACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEF,YAAY,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/progress.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface ProgressProps extends React.HTMLAttributes<HTMLDivElement> {\n  value?: number\n}\n\nconst Progress = React.forwardRef<HTMLDivElement, ProgressProps>(\n  ({ className, value = 0, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative h-4 w-full overflow-hidden rounded-full bg-gray-200 dark:bg-gray-700\",\n        className\n      )}\n      {...props}\n    >\n      <div\n        className=\"h-full bg-blue-600 transition-all duration-300 ease-in-out\"\n        style={{ width: `${Math.min(100, Math.max(0, value))}%` }}\n      />\n    </div>\n  )\n)\nProgress.displayName = \"Progress\"\n\nexport { Progress }"],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAMA,MAAM,yBAAW,mNAAgB,CAC/B,CAAC,EAAE,SAAS,EAAE,QAAQ,CAAC,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,iFACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC;YACC,WAAU;YACV,OAAO;gBAAE,OAAO,GAAG,KAAK,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC;YAAC;;;;;;;;;;;AAKhE,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/BalanceTrackingService.ts"],"sourcesContent":["'use client'\n\ninterface BalanceData {\n  totalBalance: number\n  availableBalance: number\n  investedAmount: number\n  pendingDeposits: number\n  pendingWithdrawals: number\n  lastUpdated: Date\n}\n\ninterface BalanceUpdateListener {\n  (balance: BalanceData): void\n}\n\nclass BalanceTrackingService {\n  private balance: BalanceData = {\n    totalBalance: 125000,\n    availableBalance: 45000,\n    investedAmount: 80000,\n    pendingDeposits: 0,\n    pendingWithdrawals: 0,\n    lastUpdated: new Date()\n  }\n\n  private listeners: Set<BalanceUpdateListener> = new Set()\n  private updateInterval: NodeJS.Timeout | null = null\n\n  constructor() {\n    // Start real-time updates\n    this.startRealTimeUpdates()\n  }\n\n  /**\n   * Subscribe to balance updates\n   */\n  subscribe(listener: BalanceUpdateListener): () => void {\n    this.listeners.add(listener)\n    \n    // Immediately send current balance\n    listener(this.balance)\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(listener)\n    }\n  }\n\n  /**\n   * Get current balance\n   */\n  getCurrentBalance(): BalanceData {\n    return { ...this.balance }\n  }\n\n  /**\n   * Update balance after deposit\n   */\n  async processDeposit(amount: number): Promise<void> {\n    // Add to pending deposits first\n    this.balance.pendingDeposits += amount\n    this.notifyListeners()\n\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 2000))\n\n    // Move from pending to available balance\n    this.balance.pendingDeposits -= amount\n    this.balance.availableBalance += amount\n    this.balance.totalBalance += amount\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Update balance after withdrawal\n   */\n  async processWithdrawal(amount: number): Promise<void> {\n    // Check if sufficient funds\n    if (this.balance.availableBalance < amount) {\n      throw new Error('Insufficient funds for withdrawal')\n    }\n\n    // Add to pending withdrawals\n    this.balance.pendingWithdrawals += amount\n    this.balance.availableBalance -= amount\n    this.notifyListeners()\n\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 2000))\n\n    // Complete withdrawal\n    this.balance.pendingWithdrawals -= amount\n    this.balance.totalBalance -= amount\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Update invested amount\n   */\n  updateInvestedAmount(amount: number): void {\n    const difference = amount - this.balance.investedAmount\n    \n    // Adjust available balance\n    this.balance.availableBalance -= difference\n    this.balance.investedAmount = amount\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Add profit from trading\n   */\n  addTradingProfit(profit: number): void {\n    this.balance.availableBalance += profit\n    this.balance.totalBalance += profit\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Start real-time balance updates (simulate market changes)\n   */\n  private startRealTimeUpdates(): void {\n    this.updateInterval = setInterval(() => {\n      // Simulate small market fluctuations in invested amount\n      const fluctuation = (Math.random() - 0.5) * 100 // ±$50\n      const newInvestedValue = Math.max(0, this.balance.investedAmount + fluctuation)\n      const difference = newInvestedValue - this.balance.investedAmount\n      \n      this.balance.investedAmount = newInvestedValue\n      this.balance.totalBalance += difference\n      this.balance.lastUpdated = new Date()\n      \n      this.notifyListeners()\n    }, 5000) // Update every 5 seconds\n  }\n\n  /**\n   * Stop real-time updates\n   */\n  stopRealTimeUpdates(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval)\n      this.updateInterval = null\n    }\n  }\n\n  /**\n   * Notify all listeners of balance changes\n   */\n  private notifyListeners(): void {\n    const balanceCopy = { ...this.balance }\n    this.listeners.forEach(listener => {\n      try {\n        listener(balanceCopy)\n      } catch (error) {\n        console.error('Error in balance listener:', error)\n      }\n    })\n  }\n\n  /**\n   * Format currency for display\n   */\n  formatCurrency(amount: number): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(amount)\n  }\n\n  /**\n   * Get balance summary for display\n   */\n  getBalanceSummary(): {\n    total: string\n    available: string\n    invested: string\n    pending: string\n  } {\n    return {\n      total: this.formatCurrency(this.balance.totalBalance),\n      available: this.formatCurrency(this.balance.availableBalance),\n      invested: this.formatCurrency(this.balance.investedAmount),\n      pending: this.formatCurrency(this.balance.pendingDeposits + this.balance.pendingWithdrawals)\n    }\n  }\n}\n\n// Create singleton instance\nconst balanceTrackingService = new BalanceTrackingService()\n\nexport default balanceTrackingService\nexport type { BalanceData, BalanceUpdateListener }"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/AutomatedWorkflowService.ts"],"sourcesContent":["'use client';\n\nimport { toast } from 'react-hot-toast';\nimport balanceTrackingService from './BalanceTrackingService';\n\n// Types for the automated workflow\nexport interface WorkflowConfig {\n  autoDeposit: {\n    enabled: boolean;\n    amount: number;\n    frequency: 'daily' | 'weekly' | 'monthly';\n    source: 'bank' | 'card' | 'crypto';\n  };\n  autoInvest: {\n    enabled: boolean;\n    strategy: 'conservative' | 'moderate' | 'aggressive' | 'custom';\n    allocation: {\n      stocks: number;\n      crypto: number;\n      forex: number;\n      commodities: number;\n    };\n    minBalance: number;\n  };\n  autoWithdraw: {\n    enabled: boolean;\n    profitThreshold: number;\n    withdrawPercentage: number;\n    destination: 'bank' | 'card' | 'crypto';\n  };\n}\n\nexport interface WorkflowStatus {\n  isRunning: boolean;\n  lastExecution: Date | null;\n  nextExecution: Date | null;\n  totalDeposited: number;\n  totalInvested: number;\n  totalWithdrawn: number;\n  currentBalance: number;\n  totalProfit: number;\n}\n\nexport interface Transaction {\n  id: string;\n  type: 'deposit' | 'invest' | 'withdraw';\n  amount: number;\n  status: 'pending' | 'completed' | 'failed';\n  timestamp: Date;\n  description: string;\n}\n\nclass AutomatedWorkflowService {\n  private config: WorkflowConfig;\n  private status: WorkflowStatus;\n  private transactions: Transaction[];\n  private intervalId: NodeJS.Timeout | null = null;\n\n  constructor() {\n    // Load configuration from localStorage or use defaults\n    this.config = this.loadConfig();\n    this.status = this.loadStatus();\n    this.transactions = this.loadTransactions();\n    \n    // Start the workflow if enabled\n    if (this.isAnyWorkflowEnabled()) {\n      this.startWorkflow();\n    }\n  }\n\n  private loadConfig(): WorkflowConfig {\n    if (typeof window === 'undefined') {\n      return this.getDefaultConfig();\n    }\n    \n    const saved = localStorage.getItem('automatedWorkflowConfig');\n    return saved ? JSON.parse(saved) : this.getDefaultConfig();\n  }\n\n  private loadStatus(): WorkflowStatus {\n    if (typeof window === 'undefined') {\n      return this.getDefaultStatus();\n    }\n    \n    const saved = localStorage.getItem('automatedWorkflowStatus');\n    return saved ? JSON.parse(saved) : this.getDefaultStatus();\n  }\n\n  private loadTransactions(): Transaction[] {\n    if (typeof window === 'undefined') {\n      return [];\n    }\n    \n    const saved = localStorage.getItem('automatedWorkflowTransactions');\n    return saved ? JSON.parse(saved) : [];\n  }\n\n  private getDefaultConfig(): WorkflowConfig {\n    return {\n      autoDeposit: {\n        enabled: false,\n        amount: 100,\n        frequency: 'weekly',\n        source: 'bank'\n      },\n      autoInvest: {\n        enabled: false,\n        strategy: 'moderate',\n        allocation: {\n          stocks: 40,\n          crypto: 30,\n          forex: 20,\n          commodities: 10\n        },\n        minBalance: 50\n      },\n      autoWithdraw: {\n        enabled: false,\n        profitThreshold: 500,\n        withdrawPercentage: 50,\n        destination: 'bank'\n      }\n    };\n  }\n\n  private getDefaultStatus(): WorkflowStatus {\n    return {\n      isRunning: false,\n      lastExecution: null,\n      nextExecution: null,\n      totalDeposited: 0,\n      totalInvested: 0,\n      totalWithdrawn: 0,\n      currentBalance: 1250.75, // Mock current balance\n      totalProfit: 250.75 // Mock profit\n    };\n  }\n\n  private saveConfig(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('automatedWorkflowConfig', JSON.stringify(this.config));\n    }\n  }\n\n  private saveStatus(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('automatedWorkflowStatus', JSON.stringify(this.status));\n    }\n  }\n\n  private saveTransactions(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('automatedWorkflowTransactions', JSON.stringify(this.transactions));\n    }\n  }\n\n  private isAnyWorkflowEnabled(): boolean {\n    return this.config.autoDeposit.enabled || \n           this.config.autoInvest.enabled || \n           this.config.autoWithdraw.enabled;\n  }\n\n  public updateConfig(newConfig: Partial<WorkflowConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.saveConfig();\n    \n    // Restart workflow with new config\n    this.stopWorkflow();\n    if (this.isAnyWorkflowEnabled()) {\n      this.startWorkflow();\n    }\n    \n    toast.success('Automated workflow configuration updated');\n  }\n\n  public getConfig(): WorkflowConfig {\n    return { ...this.config };\n  }\n\n  public getStatus(): WorkflowStatus {\n    return { ...this.status };\n  }\n\n  public getTransactions(): Transaction[] {\n    return [...this.transactions];\n  }\n\n  public startWorkflow(): void {\n    if (this.intervalId) {\n      this.stopWorkflow();\n    }\n\n    this.status.isRunning = true;\n    this.status.nextExecution = this.calculateNextExecution();\n    this.saveStatus();\n\n    // Run workflow every minute (in production, this would be less frequent)\n    this.intervalId = setInterval(() => {\n      this.executeWorkflow();\n    }, 60000); // 1 minute\n\n    toast.success('Automated workflow started');\n  }\n\n  public stopWorkflow(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n\n    this.status.isRunning = false;\n    this.status.nextExecution = null;\n    this.saveStatus();\n\n    toast.success('Automated workflow stopped');\n  }\n\n  private calculateNextExecution(): Date {\n    const now = new Date();\n    const next = new Date(now);\n    \n    // For demo purposes, set next execution to 1 minute from now\n    next.setMinutes(next.getMinutes() + 1);\n    \n    return next;\n  }\n\n  private async executeWorkflow(): Promise<void> {\n    try {\n      this.status.lastExecution = new Date();\n      \n      // Execute auto deposit\n      if (this.config.autoDeposit.enabled) {\n        await this.executeAutoDeposit();\n      }\n\n      // Execute auto invest\n      if (this.config.autoInvest.enabled && this.status.currentBalance >= this.config.autoInvest.minBalance) {\n        await this.executeAutoInvest();\n      }\n\n      // Execute auto withdraw\n      if (this.config.autoWithdraw.enabled && this.status.totalProfit >= this.config.autoWithdraw.profitThreshold) {\n        await this.executeAutoWithdraw();\n      }\n\n      this.status.nextExecution = this.calculateNextExecution();\n      this.saveStatus();\n      \n    } catch (error) {\n      console.error('Workflow execution failed:', error);\n      toast.error('Automated workflow execution failed');\n    }\n  }\n\n  private async executeAutoDeposit(): Promise<void> {\n    const transaction: Transaction = {\n      id: `dep_${Date.now()}`,\n      type: 'deposit',\n      amount: this.config.autoDeposit.amount,\n      status: 'pending',\n      timestamp: new Date(),\n      description: `Auto deposit from ${this.config.autoDeposit.source}`\n    };\n\n    this.transactions.unshift(transaction);\n    this.saveTransactions();\n\n    // Simulate deposit processing\n    setTimeout(() => {\n      transaction.status = 'completed';\n      this.status.totalDeposited += transaction.amount;\n      this.status.currentBalance += transaction.amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Auto deposit of $${transaction.amount} completed`);\n    }, 2000);\n  }\n\n  private async executeAutoInvest(): Promise<void> {\n    const investAmount = Math.min(\n      this.status.currentBalance - this.config.autoInvest.minBalance,\n      this.status.currentBalance * 0.8 // Invest max 80% of available balance\n    );\n\n    if (investAmount <= 0) return;\n\n    const transaction: Transaction = {\n      id: `inv_${Date.now()}`,\n      type: 'invest',\n      amount: investAmount,\n      status: 'pending',\n      timestamp: new Date(),\n      description: `Auto investment using ${this.config.autoInvest.strategy} strategy`\n    };\n\n    this.transactions.unshift(transaction);\n    this.saveTransactions();\n\n    // Simulate investment processing\n    setTimeout(() => {\n      transaction.status = 'completed';\n      this.status.totalInvested += transaction.amount;\n      this.status.currentBalance -= transaction.amount;\n      \n      // Simulate profit generation (random between 1-5%)\n      const profitRate = (Math.random() * 4 + 1) / 100;\n      const profit = transaction.amount * profitRate;\n      this.status.totalProfit += profit;\n      this.status.currentBalance += profit;\n      \n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Auto investment of $${transaction.amount.toFixed(2)} completed`);\n    }, 3000);\n  }\n\n  private async executeAutoWithdraw(): Promise<void> {\n    const withdrawAmount = (this.status.totalProfit * this.config.autoWithdraw.withdrawPercentage) / 100;\n\n    if (withdrawAmount <= 0) return;\n\n    const transaction: Transaction = {\n      id: `wit_${Date.now()}`,\n      type: 'withdraw',\n      amount: withdrawAmount,\n      status: 'pending',\n      timestamp: new Date(),\n      description: `Auto withdrawal to ${this.config.autoWithdraw.destination}`\n    };\n\n    this.transactions.unshift(transaction);\n    this.saveTransactions();\n\n    // Simulate withdrawal processing\n    setTimeout(() => {\n      transaction.status = 'completed';\n      this.status.totalWithdrawn += transaction.amount;\n      this.status.currentBalance -= transaction.amount;\n      this.status.totalProfit -= transaction.amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Auto withdrawal of $${transaction.amount.toFixed(2)} completed`);\n    }, 4000);\n  }\n\n  public async manualDeposit(amount: number, source: string): Promise<void> {\n    try {\n      const transaction: Transaction = {\n        id: `man_dep_${Date.now()}`,\n        type: 'deposit',\n        amount,\n        status: 'pending',\n        timestamp: new Date(),\n        description: `Manual deposit from ${source}`\n      };\n\n      this.transactions.unshift(transaction);\n      this.saveTransactions();\n\n      // Process deposit with balance tracking\n      await balanceTrackingService.processDeposit(amount);\n      \n      transaction.status = 'completed';\n      this.status.totalDeposited += amount;\n      this.status.currentBalance += amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Deposit of $${amount} completed`);\n    } catch (error) {\n      toast.error('Deposit failed. Please try again.');\n      throw error;\n    }\n  }\n\n  public async manualWithdraw(amount: number, destination: string): Promise<void> {\n    try {\n      if (amount > this.status.currentBalance) {\n        toast.error('Insufficient balance for withdrawal');\n        throw new Error('Insufficient balance');\n      }\n\n      const transaction: Transaction = {\n        id: `man_wit_${Date.now()}`,\n        type: 'withdraw',\n        amount,\n        status: 'pending',\n        timestamp: new Date(),\n        description: `Manual withdrawal to ${destination}`\n      };\n\n      this.transactions.unshift(transaction);\n      this.saveTransactions();\n\n      // Process withdrawal with balance tracking\n      await balanceTrackingService.processWithdrawal(amount);\n      \n      transaction.status = 'completed';\n      this.status.totalWithdrawn += amount;\n      this.status.currentBalance -= amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Withdrawal of $${amount} completed`);\n    } catch (error) {\n      toast.error('Withdrawal failed. Please try again.');\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const automatedWorkflowService = new AutomatedWorkflowService();\nexport default automatedWorkflowService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 839, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/hooks/useBalance.ts"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport balanceTrackingService, { BalanceData } from '@/services/BalanceTrackingService'\n\n/**\n * Custom hook for real-time balance tracking\n */\nexport function useBalance() {\n  const [balance, setBalance] = useState<BalanceData>(balanceTrackingService.getCurrentBalance())\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    // Subscribe to balance updates\n    const unsubscribe = balanceTrackingService.subscribe((newBalance) => {\n      setBalance(newBalance)\n      setIsLoading(false)\n    })\n\n    // Cleanup subscription on unmount\n    return unsubscribe\n  }, [])\n\n  /**\n   * Manually refresh balance\n   */\n  const refreshBalance = () => {\n    setIsLoading(true)\n    setBalance(balanceTrackingService.getCurrentBalance())\n    setIsLoading(false)\n  }\n\n  /**\n   * Get formatted balance values\n   */\n  const formattedBalance = balanceTrackingService.getBalanceSummary()\n\n  return {\n    balance,\n    formattedBalance,\n    isLoading,\n    refreshBalance,\n    formatCurrency: balanceTrackingService.formatCurrency.bind(balanceTrackingService)\n  }\n}\n\n/**\n * Hook for balance change notifications\n */\nexport function useBalanceNotifications() {\n  const [lastChange, setLastChange] = useState<{\n    type: 'deposit' | 'withdrawal' | 'profit' | 'loss'\n    amount: number\n    timestamp: Date\n  } | null>(null)\n\n  useEffect(() => {\n    let previousBalance = balanceTrackingService.getCurrentBalance().totalBalance\n\n    const unsubscribe = balanceTrackingService.subscribe((newBalance) => {\n      const difference = newBalance.totalBalance - previousBalance\n      \n      if (Math.abs(difference) > 0.01) { // Ignore very small changes\n        setLastChange({\n          type: difference > 0 ? 'deposit' : 'withdrawal',\n          amount: Math.abs(difference),\n          timestamp: newBalance.lastUpdated\n        })\n      }\n      \n      previousBalance = newBalance.totalBalance\n    })\n\n    return unsubscribe\n  }, [])\n\n  return { lastChange }\n}\n\nexport default useBalance"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AAHA;;;AAQO,SAAS;IACd,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAc,oJAAsB,CAAC,iBAAiB;IAC5F,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAC;IAE3C,IAAA,kNAAS,EAAC;QACR,+BAA+B;QAC/B,MAAM,cAAc,oJAAsB,CAAC,SAAS,CAAC,CAAC;YACpD,WAAW;YACX,aAAa;QACf;QAEA,kCAAkC;QAClC,OAAO;IACT,GAAG,EAAE;IAEL;;GAEC,GACD,MAAM,iBAAiB;QACrB,aAAa;QACb,WAAW,oJAAsB,CAAC,iBAAiB;QACnD,aAAa;IACf;IAEA;;GAEC,GACD,MAAM,mBAAmB,oJAAsB,CAAC,iBAAiB;IAEjE,OAAO;QACL;QACA;QACA;QACA;QACA,gBAAgB,oJAAsB,CAAC,cAAc,CAAC,IAAI,CAAC,oJAAsB;IACnF;AACF;AAKO,SAAS;IACd,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,iNAAQ,EAIlC;IAEV,IAAA,kNAAS,EAAC;QACR,IAAI,kBAAkB,oJAAsB,CAAC,iBAAiB,GAAG,YAAY;QAE7E,MAAM,cAAc,oJAAsB,CAAC,SAAS,CAAC,CAAC;YACpD,MAAM,aAAa,WAAW,YAAY,GAAG;YAE7C,IAAI,KAAK,GAAG,CAAC,cAAc,MAAM;gBAC/B,cAAc;oBACZ,MAAM,aAAa,IAAI,YAAY;oBACnC,QAAQ,KAAK,GAAG,CAAC;oBACjB,WAAW,WAAW,WAAW;gBACnC;YACF;YAEA,kBAAkB,WAAW,YAAY;QAC3C;QAEA,OAAO;IACT,GAAG,EAAE;IAEL,OAAO;QAAE;IAAW;AACtB;uCAEe","debugId":null}},
    {"offset": {"line": 908, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }"],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAKA,MAAM,sBAAQ,mNAAgB,CAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,IAAA,yHAAE,EACX,gWACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 936, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/label.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Label = React.forwardRef<\n  HTMLLabelElement,\n  React.LabelHTMLAttributes<HTMLLabelElement>\n>(({ className, ...props }, ref) => (\n  <label\n    ref={ref}\n    className={cn(\n      \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n      className\n    )}\n    {...props}\n  />\n))\nLabel.displayName = \"Label\"\n\nexport { Label }"],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAEA,MAAM,sBAAQ,mNAAgB,CAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,8FACA;QAED,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 961, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,0KAAoB;AAEnC,MAAM,cAAc,2KAAqB;AAEzC,MAAM,cAAc,2KAAqB;AAEzC,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,6KAAuB;QACtB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,mTACA;QAED,GAAG,KAAK;;YAER;0BACD,8OAAC,0KAAoB;gBAAC,OAAO;0BAC3B,cAAA,8OAAC,mOAAW;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI7B,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,qCAAuB,mNAAgB,CAG3C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,oLAA8B;QAC7B,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,6NAAS;YAAC,WAAU;;;;;;;;;;;AAGzB,qBAAqB,WAAW,GAAG,oLAA8B,CAAC,WAAW;AAE7E,MAAM,uCAAyB,mNAAgB,CAG7C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sLAAgC;QAC/B,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,mOAAW;YAAC,WAAU;;;;;;;;;;;AAG3B,uBAAuB,WAAW,GAChC,sLAAgC,CAAC,WAAW;AAE9C,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACzD,8OAAC,4KAAsB;kBACrB,cAAA,8OAAC,6KAAuB;YACtB,KAAK;YACL,WAAW,IAAA,yHAAE,EACX,ucACA,aAAa,YACX,mIACF;YAEF,UAAU;YACT,GAAG,KAAK;;8BAET,8OAAC;;;;;8BACD,8OAAC,8KAAwB;oBACvB,WAAW,IAAA,yHAAE,EACX,OACA,aAAa,YACX;8BAGH;;;;;;8BAEH,8OAAC;;;;;;;;;;;;;;;;AAIP,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,0CAA0C;QACvD,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW;AAE3D,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAoB;QACnB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,6NACA;QAED,GAAG,KAAK;;0BAET,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC,mLAA6B;8BAC5B,cAAA,8OAAC,6MAAK;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAIrB,8OAAC,8KAAwB;0BAAE;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAoB,CAAC,WAAW;AAEzD,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,+KAAyB;QACxB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,4BAA4B;QACzC,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG,+KAAyB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1161, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;;;;;AAEA,MAAM,gBAAgB,IAAA,uKAAG,EACvB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,mNAAgB,CAG5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,IAAA,yHAAE,EAAC,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,mNAAgB,CAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1226, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,0KAAoB;AAEnC,MAAM,gBAAgB,6KAAuB;AAE7C,MAAM,eAAe,4KAAsB;AAE3C,MAAM,cAAc,2KAAqB;AAEzC,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,6KAAuB;QACtB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,gLACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,6KAAuB;gBACtB,KAAK;gBACL,WAAW,IAAA,yHAAE,EACX,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,2KAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,iMAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,mNAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,iLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1366, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/BankAccountIntegrationService.ts"],"sourcesContent":["import { logger } from '../lib/logger';\n\nexport interface BankAccount {\n  id: string;\n  institutionId: string;\n  institutionName: string;\n  accountId: string;\n  accountName: string;\n  accountType: 'checking' | 'savings' | 'credit';\n  accountSubtype: string;\n  mask: string;\n  isActive: boolean;\n  isVerified: boolean;\n  balance?: {\n    available: number;\n    current: number;\n    limit?: number;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface PlaidLinkResult {\n  publicToken: string;\n  metadata: {\n    institution: {\n      name: string;\n      institution_id: string;\n    };\n    accounts: Array<{\n      id: string;\n      name: string;\n      type: string;\n      subtype: string;\n      mask: string;\n    }>;\n  };\n}\n\nexport interface TransactionRequest {\n  accountId: string;\n  amount: number;\n  type: 'deposit' | 'withdrawal';\n  description?: string;\n  scheduledDate?: Date;\n  isRecurring?: boolean;\n  recurringFrequency?: 'daily' | 'weekly' | 'monthly';\n}\n\nexport interface TransactionResult {\n  id: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  amount: number;\n  fee?: number;\n  estimatedCompletionDate?: Date;\n  errorMessage?: string;\n}\n\nclass BankAccountIntegrationService {\n  private plaidClientId: string;\n  private plaidSecret: string;\n  private plaidEnvironment: 'sandbox' | 'development' | 'production';\n  private baseUrl: string;\n\n  constructor() {\n    this.plaidClientId = process.env.NEXT_PUBLIC_PLAID_CLIENT_ID || '';\n    this.plaidSecret = process.env.PLAID_SECRET || '';\n    this.plaidEnvironment = (process.env.PLAID_ENV as any) || 'sandbox';\n    this.baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002';\n  }\n\n  /**\n   * Initialize Plaid Link for bank account connection\n   */\n  async initializePlaidLink(): Promise<{ linkToken: string }> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/plaid/create-link-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          userId: this.getCurrentUserId(),\n          clientName: 'KAIRO Trading Platform'\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create Plaid link token');\n      }\n\n      const data = await response.json();\n      return { linkToken: data.link_token };\n    } catch (error) {\n      logger.error('Error initializing Plaid Link:', error);\n      throw new Error('Failed to initialize bank account connection');\n    }\n  }\n\n  /**\n   * Exchange public token for access token and save bank account\n   */\n  async connectBankAccount(publicToken: string, metadata: PlaidLinkResult['metadata']): Promise<BankAccount[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/plaid/exchange-public-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          publicToken,\n          metadata,\n          userId: this.getCurrentUserId()\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to connect bank account');\n      }\n\n      const data = await response.json();\n      return data.accounts;\n    } catch (error) {\n      logger.error('Error connecting bank account:', error);\n      throw new Error('Failed to connect bank account');\n    }\n  }\n\n  /**\n   * Get all connected bank accounts for the user\n   */\n  async getBankAccounts(): Promise<BankAccount[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/bank-accounts`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch bank accounts');\n      }\n\n      return await response.json();\n    } catch (error) {\n      logger.error('Error fetching bank accounts:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get account balance for a specific bank account\n   */\n  async getAccountBalance(accountId: string): Promise<BankAccount['balance']> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/bank-accounts/${accountId}/balance`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch account balance');\n      }\n\n      return await response.json();\n    } catch (error) {\n      logger.error('Error fetching account balance:', error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Initiate a deposit from bank account to trading account\n   */\n  async initiateDeposit(request: TransactionRequest): Promise<TransactionResult> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/transactions/deposit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          ...request,\n          userId: this.getCurrentUserId()\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to initiate deposit');\n      }\n\n      return await response.json();\n    } catch (error) {\n      logger.error('Error initiating deposit:', error);\n      throw new Error('Failed to initiate deposit');\n    }\n  }\n\n  /**\n   * Initiate a withdrawal from trading account to bank account\n   */\n  async initiateWithdrawal(request: TransactionRequest): Promise<TransactionResult> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/transactions/withdrawal`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        },\n        body: JSON.stringify({\n          ...request,\n          userId: this.getCurrentUserId()\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to initiate withdrawal');\n      }\n\n      return await response.json();\n    } catch (error) {\n      logger.error('Error initiating withdrawal:', error);\n      throw new Error('Failed to initiate withdrawal');\n    }\n  }\n\n  /**\n   * Get transaction history\n   */\n  async getTransactionHistory(limit: number = 50): Promise<TransactionResult[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/transactions?limit=${limit}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch transaction history');\n      }\n\n      return await response.json();\n    } catch (error) {\n      logger.error('Error fetching transaction history:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Remove a connected bank account\n   */\n  async removeBankAccount(accountId: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/bank-accounts/${accountId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        }\n      });\n\n      return response.ok;\n    } catch (error) {\n      logger.error('Error removing bank account:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Verify bank account using micro-deposits\n   */\n  async verifyBankAccount(accountId: string, amounts: number[]): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/bank-accounts/${accountId}/verify`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getAuthToken()}`\n        },\n        body: JSON.stringify({ amounts })\n      });\n\n      return response.ok;\n    } catch (error) {\n      logger.error('Error verifying bank account:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current user's authentication token\n   */\n  private getAuthToken(): string {\n    // This would typically come from your auth context or local storage\n    return localStorage.getItem('authToken') || '';\n  }\n\n  /**\n   * Get current user ID\n   */\n  private getCurrentUserId(): string {\n    // This would typically come from your auth context\n    return localStorage.getItem('userId') || '';\n  }\n}\n\nexport const bankAccountIntegrationService = new BankAccountIntegrationService();\nexport default BankAccountIntegrationService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1598, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/AutomatedDepositWithdrawService.ts"],"sourcesContent":["import { logger } from '../lib/logger';\nimport { bankAccountIntegrationService, BankAccount, TransactionRequest, TransactionResult } from './BankAccountIntegrationService';\nimport balanceTrackingService from './BalanceTrackingService';\n\nexport interface AutomatedWorkflowConfig {\n  id: string;\n  userId: string;\n  type: 'deposit' | 'withdrawal';\n  isEnabled: boolean;\n  bankAccountId: string;\n  amount: number;\n  frequency: 'manual' | 'daily' | 'weekly' | 'monthly';\n  conditions?: {\n    minBalance?: number;\n    maxBalance?: number;\n    profitThreshold?: number;\n    lossThreshold?: number;\n  };\n  nextExecutionDate?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface WorkflowExecution {\n  id: string;\n  workflowId: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  amount: number;\n  transactionId?: string;\n  executedAt: Date;\n  completedAt?: Date;\n  errorMessage?: string;\n}\n\nexport interface QuickActionRequest {\n  type: 'deposit' | 'withdrawal';\n  amount?: number;\n  bankAccountId?: string;\n  saveAsWorkflow?: boolean;\n  workflowConfig?: Partial<AutomatedWorkflowConfig>;\n}\n\nclass AutomatedDepositWithdrawService {\n  private baseUrl: string;\n  private workflows: Map<string, AutomatedWorkflowConfig> = new Map();\n  private executionHistory: WorkflowExecution[] = [];\n\n  constructor() {\n    this.baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002';\n    this.loadWorkflows();\n  }\n\n  /**\n   * Handle Quick Deposit button click\n   */\n  async handleQuickDeposit(request: QuickActionRequest): Promise<TransactionResult> {\n    try {\n      logger.info('Handling quick deposit request');\n\n      // Check if user has connected bank accounts\n      const bankAccounts = await bankAccountIntegrationService.getBankAccounts();\n      if (bankAccounts.length === 0) {\n        throw new Error('NO_BANK_ACCOUNTS');\n      }\n\n      // Use specified account or default to first verified account\n      const selectedAccount = request.bankAccountId \n        ? bankAccounts.find(acc => acc.id === request.bankAccountId)\n        : bankAccounts.find(acc => acc.isVerified) || bankAccounts[0];\n\n      if (!selectedAccount) {\n        throw new Error('NO_VALID_BANK_ACCOUNT');\n      }\n\n      // Determine deposit amount\n      const depositAmount = request.amount || await this.getRecommendedDepositAmount(selectedAccount);\n\n      // Create transaction request\n      const transactionRequest: TransactionRequest = {\n        accountId: selectedAccount.id,\n        amount: depositAmount,\n        type: 'deposit',\n        description: 'Quick Deposit via KAIRO Platform'\n      };\n\n      // Initiate the deposit\n      const result = await bankAccountIntegrationService.initiateDeposit(transactionRequest);\n\n      // Save as automated workflow if requested\n      if (request.saveAsWorkflow && request.workflowConfig) {\n        await this.createAutomatedWorkflow({\n          ...request.workflowConfig,\n          type: 'deposit',\n          bankAccountId: selectedAccount.id,\n          amount: depositAmount,\n          userId: this.getCurrentUserId()\n        } as AutomatedWorkflowConfig);\n      }\n\n      // Log execution\n      this.logWorkflowExecution({\n        id: this.generateId(),\n        workflowId: 'quick-deposit',\n        status: result.status === 'completed' ? 'completed' : 'processing',\n        amount: depositAmount,\n        transactionId: result.id,\n        executedAt: new Date()\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('Error handling quick deposit:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle Quick Withdraw button click\n   */\n  async handleQuickWithdraw(request: QuickActionRequest): Promise<TransactionResult> {\n    try {\n      logger.info('Handling quick withdraw request');\n\n      // Check if user has connected bank accounts\n      const bankAccounts = await bankAccountIntegrationService.getBankAccounts();\n      if (bankAccounts.length === 0) {\n        throw new Error('NO_BANK_ACCOUNTS');\n      }\n\n      // Use specified account or default to first verified account\n      const selectedAccount = request.bankAccountId \n        ? bankAccounts.find(acc => acc.id === request.bankAccountId)\n        : bankAccounts.find(acc => acc.isVerified) || bankAccounts[0];\n\n      if (!selectedAccount) {\n        throw new Error('NO_VALID_BANK_ACCOUNT');\n      }\n\n      // Get current balance\n      const currentBalance = await balanceTrackingService.getCurrentBalance();\n      \n      // Determine withdrawal amount\n      const withdrawalAmount = request.amount || await this.getRecommendedWithdrawalAmount(currentBalance.availableBalance);\n\n      // Validate withdrawal amount\n      if (withdrawalAmount > currentBalance.availableBalance) {\n        throw new Error('INSUFFICIENT_BALANCE');\n      }\n\n      // Create transaction request\n      const transactionRequest: TransactionRequest = {\n        accountId: selectedAccount.id,\n        amount: withdrawalAmount,\n        type: 'withdrawal',\n        description: 'Quick Withdrawal via KAIRO Platform'\n      };\n\n      // Initiate the withdrawal\n      const result = await bankAccountIntegrationService.initiateWithdrawal(transactionRequest);\n\n      // Save as automated workflow if requested\n      if (request.saveAsWorkflow && request.workflowConfig) {\n        await this.createAutomatedWorkflow({\n          ...request.workflowConfig,\n          type: 'withdrawal',\n          bankAccountId: selectedAccount.id,\n          amount: withdrawalAmount,\n          userId: this.getCurrentUserId()\n        } as AutomatedWorkflowConfig);\n      }\n\n      // Log execution\n      this.logWorkflowExecution({\n        id: this.generateId(),\n        workflowId: 'quick-withdraw',\n        status: result.status === 'completed' ? 'completed' : 'processing',\n        amount: withdrawalAmount,\n        transactionId: result.id,\n        executedAt: new Date()\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('Error handling quick withdraw:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create an automated workflow\n   */\n  async createAutomatedWorkflow(config: Partial<AutomatedWorkflowConfig>): Promise<AutomatedWorkflowConfig> {\n    try {\n      const workflow: AutomatedWorkflowConfig = {\n        id: this.generateId(),\n        userId: this.getCurrentUserId(),\n        type: config.type || 'deposit',\n        isEnabled: config.isEnabled ?? true,\n        bankAccountId: config.bankAccountId || '',\n        amount: config.amount || 0,\n        frequency: config.frequency || 'manual',\n        conditions: config.conditions,\n        nextExecutionDate: this.calculateNextExecutionDate(config.frequency || 'manual'),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      // Save workflow\n      this.workflows.set(workflow.id, workflow);\n      await this.saveWorkflows();\n\n      logger.info('Created automated workflow:', workflow.id);\n      return workflow;\n    } catch (error) {\n      logger.error('Error creating automated workflow:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all automated workflows for the current user\n   */\n  async getAutomatedWorkflows(): Promise<AutomatedWorkflowConfig[]> {\n    const userId = this.getCurrentUserId();\n    return Array.from(this.workflows.values()).filter(w => w.userId === userId);\n  }\n\n  /**\n   * Update an automated workflow\n   */\n  async updateAutomatedWorkflow(workflowId: string, updates: Partial<AutomatedWorkflowConfig>): Promise<AutomatedWorkflowConfig> {\n    const workflow = this.workflows.get(workflowId);\n    if (!workflow) {\n      throw new Error('Workflow not found');\n    }\n\n    const updatedWorkflow = {\n      ...workflow,\n      ...updates,\n      updatedAt: new Date()\n    };\n\n    this.workflows.set(workflowId, updatedWorkflow);\n    await this.saveWorkflows();\n\n    return updatedWorkflow;\n  }\n\n  /**\n   * Delete an automated workflow\n   */\n  async deleteAutomatedWorkflow(workflowId: string): Promise<boolean> {\n    const deleted = this.workflows.delete(workflowId);\n    if (deleted) {\n      await this.saveWorkflows();\n    }\n    return deleted;\n  }\n\n  /**\n   * Execute scheduled workflows\n   */\n  async executeScheduledWorkflows(): Promise<void> {\n    const now = new Date();\n    const userId = this.getCurrentUserId();\n    \n    const dueWorkflows = Array.from(this.workflows.values()).filter(w => \n      w.userId === userId &&\n      w.isEnabled &&\n      w.frequency !== 'manual' &&\n      w.nextExecutionDate &&\n      w.nextExecutionDate <= now\n    );\n\n    for (const workflow of dueWorkflows) {\n      try {\n        await this.executeWorkflow(workflow);\n      } catch (error) {\n        logger.error(`Error executing workflow ${workflow.id}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Execute a specific workflow\n   */\n  private async executeWorkflow(workflow: AutomatedWorkflowConfig): Promise<void> {\n    try {\n      // Check conditions if any\n      if (workflow.conditions && !await this.checkWorkflowConditions(workflow.conditions)) {\n        logger.info(`Workflow ${workflow.id} conditions not met, skipping execution`);\n        return;\n      }\n\n      const request: QuickActionRequest = {\n        type: workflow.type,\n        amount: workflow.amount,\n        bankAccountId: workflow.bankAccountId\n      };\n\n      let result: TransactionResult;\n      if (workflow.type === 'deposit') {\n        result = await this.handleQuickDeposit(request);\n      } else {\n        result = await this.handleQuickWithdraw(request);\n      }\n\n      // Update next execution date\n      workflow.nextExecutionDate = this.calculateNextExecutionDate(workflow.frequency);\n      this.workflows.set(workflow.id, workflow);\n      await this.saveWorkflows();\n\n      logger.info(`Workflow ${workflow.id} executed successfully`);\n    } catch (error) {\n      logger.error(`Error executing workflow ${workflow.id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if workflow conditions are met\n   */\n  private async checkWorkflowConditions(conditions: AutomatedWorkflowConfig['conditions']): Promise<boolean> {\n    if (!conditions) return true;\n\n    const currentBalance = await balanceTrackingService.getCurrentBalance();\n\n    if (conditions.minBalance && currentBalance.availableBalance < conditions.minBalance) {\n      return false;\n    }\n\n    if (conditions.maxBalance && currentBalance.availableBalance > conditions.maxBalance) {\n      return false;\n    }\n\n    // Add more condition checks as needed\n    return true;\n  }\n\n  /**\n   * Get recommended deposit amount based on account balance\n   */\n  private async getRecommendedDepositAmount(bankAccount: BankAccount): Promise<number> {\n    const balance = await bankAccountIntegrationService.getAccountBalance(bankAccount.id);\n    if (balance?.available) {\n      // Recommend 10% of available balance, minimum $100, maximum $5000\n      return Math.min(Math.max(balance.available * 0.1, 100), 5000);\n    }\n    return 500; // Default amount\n  }\n\n  /**\n   * Get recommended withdrawal amount based on trading balance\n   */\n  private async getRecommendedWithdrawalAmount(availableBalance: number): Promise<number> {\n    // Recommend 50% of available balance, minimum $50\n    return Math.max(availableBalance * 0.5, 50);\n  }\n\n  /**\n   * Calculate next execution date based on frequency\n   */\n  private calculateNextExecutionDate(frequency: AutomatedWorkflowConfig['frequency']): Date | undefined {\n    if (frequency === 'manual') return undefined;\n\n    const now = new Date();\n    switch (frequency) {\n      case 'daily':\n        return new Date(now.getTime() + 24 * 60 * 60 * 1000);\n      case 'weekly':\n        return new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n      case 'monthly':\n        const nextMonth = new Date(now);\n        nextMonth.setMonth(nextMonth.getMonth() + 1);\n        return nextMonth;\n      default:\n        return undefined;\n    }\n  }\n\n  /**\n   * Log workflow execution\n   */\n  private logWorkflowExecution(execution: WorkflowExecution): void {\n    this.executionHistory.push(execution);\n    // Keep only last 100 executions\n    if (this.executionHistory.length > 100) {\n      this.executionHistory = this.executionHistory.slice(-100);\n    }\n  }\n\n  /**\n   * Load workflows from storage\n   */\n  private async loadWorkflows(): Promise<void> {\n    try {\n      const stored = localStorage.getItem('automatedWorkflows');\n      if (stored) {\n        const workflows = JSON.parse(stored) as AutomatedWorkflowConfig[];\n        workflows.forEach(w => this.workflows.set(w.id, w));\n      }\n    } catch (error) {\n      logger.error('Error loading workflows:', error);\n    }\n  }\n\n  /**\n   * Save workflows to storage\n   */\n  private async saveWorkflows(): Promise<void> {\n    try {\n      const workflows = Array.from(this.workflows.values());\n      localStorage.setItem('automatedWorkflows', JSON.stringify(workflows));\n    } catch (error) {\n      logger.error('Error saving workflows:', error);\n    }\n  }\n\n  /**\n   * Generate unique ID\n   */\n  private generateId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Get current user ID\n   */\n  private getCurrentUserId(): string {\n    return localStorage.getItem('userId') || 'demo-user';\n  }\n}\n\nexport const automatedDepositWithdrawService = new AutomatedDepositWithdrawService();\nexport default AutomatedDepositWithdrawService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1925, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/TransactionSchedulerService.ts"],"sourcesContent":["'use client'\n\nimport automatedDepositWithdrawService from './AutomatedDepositWithdrawService'\nimport balanceTrackingService from './BalanceTrackingService'\n\nexport interface ScheduledTransaction {\n  id: string\n  userId: string\n  type: 'deposit' | 'withdraw'\n  amount: number\n  currency: string\n  bankAccountId: string\n  frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly'\n  dayOfWeek?: number // 0-6 for weekly\n  dayOfMonth?: number // 1-31 for monthly\n  isActive: boolean\n  nextExecution: Date\n  lastExecution?: Date\n  createdAt: Date\n  conditions?: {\n    minBalance?: number\n    maxBalance?: number\n    profitThreshold?: number\n  }\n}\n\nexport interface ScheduleConfig {\n  type: 'deposit' | 'withdraw'\n  amount: number\n  currency: string\n  bankAccountId: string\n  frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly'\n  dayOfWeek?: number\n  dayOfMonth?: number\n  conditions?: {\n    minBalance?: number\n    maxBalance?: number\n    profitThreshold?: number\n  }\n}\n\nexport interface ExecutionResult {\n  success: boolean\n  transactionId?: string\n  error?: string\n  skipped?: boolean\n  reason?: string\n}\n\nclass TransactionSchedulerService {\n  private scheduledTransactions: Map<string, ScheduledTransaction> = new Map()\n  private isRunning = false\n  private intervalId: NodeJS.Timeout | null = null\n\n  constructor() {\n    this.loadScheduledTransactions()\n    this.startScheduler()\n  }\n\n  /**\n   * Create a new scheduled transaction\n   */\n  async createScheduledTransaction(\n    userId: string,\n    config: ScheduleConfig\n  ): Promise<ScheduledTransaction> {\n    const id = this.generateId()\n    const nextExecution = this.calculateNextExecution(config.frequency, config.dayOfWeek, config.dayOfMonth)\n\n    const scheduledTransaction: ScheduledTransaction = {\n      id,\n      userId,\n      type: config.type,\n      amount: config.amount,\n      currency: config.currency,\n      bankAccountId: config.bankAccountId,\n      frequency: config.frequency,\n      dayOfWeek: config.dayOfWeek,\n      dayOfMonth: config.dayOfMonth,\n      isActive: true,\n      nextExecution,\n      createdAt: new Date(),\n      conditions: config.conditions\n    }\n\n    this.scheduledTransactions.set(id, scheduledTransaction)\n    await this.saveScheduledTransactions()\n\n    return scheduledTransaction\n  }\n\n  /**\n   * Get all scheduled transactions for a user\n   */\n  getScheduledTransactions(userId: string): ScheduledTransaction[] {\n    return Array.from(this.scheduledTransactions.values())\n      .filter(transaction => transaction.userId === userId)\n  }\n\n  /**\n   * Update a scheduled transaction\n   */\n  async updateScheduledTransaction(\n    id: string,\n    updates: Partial<ScheduleConfig>\n  ): Promise<ScheduledTransaction | null> {\n    const transaction = this.scheduledTransactions.get(id)\n    if (!transaction) return null\n\n    const updatedTransaction = {\n      ...transaction,\n      ...updates,\n      nextExecution: updates.frequency || updates.dayOfWeek || updates.dayOfMonth\n        ? this.calculateNextExecution(\n            updates.frequency || transaction.frequency,\n            updates.dayOfWeek ?? transaction.dayOfWeek,\n            updates.dayOfMonth ?? transaction.dayOfMonth\n          )\n        : transaction.nextExecution\n    }\n\n    this.scheduledTransactions.set(id, updatedTransaction)\n    await this.saveScheduledTransactions()\n\n    return updatedTransaction\n  }\n\n  /**\n   * Delete a scheduled transaction\n   */\n  async deleteScheduledTransaction(id: string): Promise<boolean> {\n    const deleted = this.scheduledTransactions.delete(id)\n    if (deleted) {\n      await this.saveScheduledTransactions()\n    }\n    return deleted\n  }\n\n  /**\n   * Toggle active status of a scheduled transaction\n   */\n  async toggleScheduledTransaction(id: string): Promise<ScheduledTransaction | null> {\n    const transaction = this.scheduledTransactions.get(id)\n    if (!transaction) return null\n\n    transaction.isActive = !transaction.isActive\n    this.scheduledTransactions.set(id, transaction)\n    await this.saveScheduledTransactions()\n\n    return transaction\n  }\n\n  /**\n   * Execute a specific scheduled transaction manually\n   */\n  async executeScheduledTransaction(id: string): Promise<ExecutionResult> {\n    const transaction = this.scheduledTransactions.get(id)\n    if (!transaction) {\n      return { success: false, error: 'Transaction not found' }\n    }\n\n    return await this.executeTransaction(transaction)\n  }\n\n  /**\n   * Start the scheduler\n   */\n  startScheduler(): void {\n    if (this.isRunning) return\n\n    this.isRunning = true\n    // Check every minute for due transactions\n    this.intervalId = setInterval(() => {\n      this.checkAndExecuteDueTransactions()\n    }, 60000)\n\n    console.log('Transaction scheduler started')\n  }\n\n  /**\n   * Stop the scheduler\n   */\n  stopScheduler(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId)\n      this.intervalId = null\n    }\n    this.isRunning = false\n    console.log('Transaction scheduler stopped')\n  }\n\n  /**\n   * Check for due transactions and execute them\n   */\n  private async checkAndExecuteDueTransactions(): Promise<void> {\n    const now = new Date()\n    const dueTransactions = Array.from(this.scheduledTransactions.values())\n      .filter(transaction => \n        transaction.isActive && \n        transaction.nextExecution <= now\n      )\n\n    for (const transaction of dueTransactions) {\n      try {\n        const result = await this.executeTransaction(transaction)\n        \n        // Update transaction regardless of success/failure\n        transaction.lastExecution = now\n        transaction.nextExecution = this.calculateNextExecution(\n          transaction.frequency,\n          transaction.dayOfWeek,\n          transaction.dayOfMonth\n        )\n        \n        this.scheduledTransactions.set(transaction.id, transaction)\n        \n        console.log(`Scheduled transaction ${transaction.id} executed:`, result)\n      } catch (error) {\n        console.error(`Error executing scheduled transaction ${transaction.id}:`, error)\n      }\n    }\n\n    if (dueTransactions.length > 0) {\n      await this.saveScheduledTransactions()\n    }\n  }\n\n  /**\n   * Execute a single transaction\n   */\n  private async executeTransaction(transaction: ScheduledTransaction): Promise<ExecutionResult> {\n    try {\n      // Check conditions before executing\n      const conditionCheck = await this.checkConditions(transaction)\n      if (!conditionCheck.canExecute) {\n        return {\n          success: true,\n          skipped: true,\n          reason: conditionCheck.reason\n        }\n      }\n\n      // Execute the transaction\n      if (transaction.type === 'deposit') {\n        const result = await automatedDepositWithdrawService.handleQuickDeposit({\n          type: 'deposit',\n          amount: transaction.amount,\n          bankAccountId: transaction.bankAccountId\n        })\n        \n        return {\n          success: result.status === 'completed' || result.status === 'processing',\n          transactionId: result.id,\n          error: result.status === 'failed' ? result.message : undefined\n        }\n      } else {\n        const result = await automatedDepositWithdrawService.handleQuickWithdraw({\n          type: 'withdrawal',\n          amount: transaction.amount,\n          bankAccountId: transaction.bankAccountId\n        })\n        \n        return {\n          success: result.status === 'completed' || result.status === 'processing',\n          transactionId: result.id,\n          error: result.status === 'failed' ? result.message : undefined\n        }\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * Check if transaction conditions are met\n   */\n  private async checkConditions(transaction: ScheduledTransaction): Promise<{\n    canExecute: boolean\n    reason?: string\n  }> {\n    if (!transaction.conditions) {\n      return { canExecute: true }\n    }\n\n    try {\n      const balance = await balanceTrackingService.getCurrentBalance()\n      const { conditions } = transaction\n\n      // Check minimum balance condition\n      if (conditions.minBalance && balance.availableBalance < conditions.minBalance) {\n        return {\n          canExecute: false,\n          reason: `Balance ${balance.availableBalance} below minimum ${conditions.minBalance}`\n        }\n      }\n\n      // Check maximum balance condition (for deposits)\n      if (conditions.maxBalance && balance.availableBalance > conditions.maxBalance) {\n        return {\n          canExecute: false,\n          reason: `Balance ${balance.availableBalance} above maximum ${conditions.maxBalance}`\n        }\n      }\n\n      // Check profit threshold condition\n      if (conditions.profitThreshold) {\n        const profit = balance.totalBalance - balance.investedAmount\n        if (profit < conditions.profitThreshold) {\n          return {\n            canExecute: false,\n            reason: `Profit ${profit} below threshold ${conditions.profitThreshold}`\n          }\n        }\n      }\n\n      return { canExecute: true }\n    } catch (error) {\n      return {\n        canExecute: false,\n        reason: 'Error checking conditions'\n      }\n    }\n  }\n\n  /**\n   * Calculate next execution time based on frequency\n   */\n  private calculateNextExecution(\n    frequency: string,\n    dayOfWeek?: number,\n    dayOfMonth?: number\n  ): Date {\n    const now = new Date()\n    const next = new Date(now)\n\n    switch (frequency) {\n      case 'daily':\n        next.setDate(next.getDate() + 1)\n        break\n\n      case 'weekly':\n        const targetDay = dayOfWeek ?? 1 // Default to Monday\n        const daysUntilTarget = (targetDay - next.getDay() + 7) % 7\n        next.setDate(next.getDate() + (daysUntilTarget || 7))\n        break\n\n      case 'monthly':\n        const targetDate = dayOfMonth ?? 1 // Default to 1st of month\n        next.setMonth(next.getMonth() + 1)\n        next.setDate(Math.min(targetDate, this.getDaysInMonth(next.getFullYear(), next.getMonth())))\n        break\n\n      case 'quarterly':\n        next.setMonth(next.getMonth() + 3)\n        if (dayOfMonth) {\n          next.setDate(Math.min(dayOfMonth, this.getDaysInMonth(next.getFullYear(), next.getMonth())))\n        }\n        break\n\n      default:\n        next.setDate(next.getDate() + 1)\n    }\n\n    // Set to 9 AM for execution\n    next.setHours(9, 0, 0, 0)\n    \n    return next\n  }\n\n  /**\n   * Get number of days in a month\n   */\n  private getDaysInMonth(year: number, month: number): number {\n    return new Date(year, month + 1, 0).getDate()\n  }\n\n  /**\n   * Generate unique ID\n   */\n  private generateId(): string {\n    return `sched_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * Load scheduled transactions from storage\n   */\n  private async loadScheduledTransactions(): Promise<void> {\n    try {\n      const stored = localStorage.getItem('scheduledTransactions')\n      if (stored) {\n        const transactions = JSON.parse(stored) as ScheduledTransaction[]\n        transactions.forEach(transaction => {\n          // Convert date strings back to Date objects\n          transaction.nextExecution = new Date(transaction.nextExecution)\n          transaction.createdAt = new Date(transaction.createdAt)\n          if (transaction.lastExecution) {\n            transaction.lastExecution = new Date(transaction.lastExecution)\n          }\n          this.scheduledTransactions.set(transaction.id, transaction)\n        })\n      }\n    } catch (error) {\n      console.error('Error loading scheduled transactions:', error)\n    }\n  }\n\n  /**\n   * Save scheduled transactions to storage\n   */\n  private async saveScheduledTransactions(): Promise<void> {\n    try {\n      const transactions = Array.from(this.scheduledTransactions.values())\n      localStorage.setItem('scheduledTransactions', JSON.stringify(transactions))\n    } catch (error) {\n      console.error('Error saving scheduled transactions:', error)\n    }\n  }\n}\n\n// Export singleton instance\nexport const transactionSchedulerService = new TransactionSchedulerService()\nexport default transactionSchedulerService"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2231, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/BankAccountService.ts"],"sourcesContent":["'use client'\n\nimport { bankAccountIntegrationService, BankAccount } from './BankAccountIntegrationService'\n\nexport interface BankAccountInfo {\n  id: string\n  bankName: string\n  accountType: 'checking' | 'savings' | 'credit'\n  lastFour: string\n  isVerified: boolean\n  isActive: boolean\n  balance?: number\n  currency: string\n  connectedAt?: Date\n}\n\nclass BankAccountService {\n  /**\n   * Get all connected bank accounts for the current user\n   */\n  async getConnectedAccounts(): Promise<BankAccountInfo[]> {\n    try {\n      const accounts = await bankAccountIntegrationService.getBankAccounts()\n      \n      return accounts.map(account => ({\n        id: account.id,\n        bankName: account.accountName || 'Unknown Bank',\n        accountType: account.accountType as 'checking' | 'savings' | 'credit',\n        lastFour: account.accountName?.slice(-4) || '****',\n        isVerified: account.isVerified,\n        isActive: account.isActive,\n        balance: account.balance?.available || 0,\n        currency: 'USD',\n        connectedAt: account.createdAt\n      }))\n    } catch (error) {\n      console.error('Error fetching connected accounts:', error)\n      return []\n    }\n  }\n\n  /**\n   * Get a specific bank account by ID\n   */\n  async getBankAccount(accountId: string): Promise<BankAccountInfo | null> {\n    try {\n      const accounts = await this.getConnectedAccounts()\n      return accounts.find(account => account.id === accountId) || null\n    } catch (error) {\n      console.error('Error fetching bank account:', error)\n      return null\n    }\n  }\n\n  /**\n   * Check if user has any verified bank accounts\n   */\n  async hasVerifiedAccounts(): Promise<boolean> {\n    try {\n      const accounts = await this.getConnectedAccounts()\n      return accounts.some(account => account.isVerified)\n    } catch (error) {\n      console.error('Error checking verified accounts:', error)\n      return false\n    }\n  }\n\n  /**\n   * Get the primary (first verified) bank account\n   */\n  async getPrimaryAccount(): Promise<BankAccountInfo | null> {\n    try {\n      const accounts = await this.getConnectedAccounts()\n      return accounts.find(account => account.isVerified) || accounts[0] || null\n    } catch (error) {\n      console.error('Error fetching primary account:', error)\n      return null\n    }\n  }\n\n  /**\n   * Disconnect a bank account\n   */\n  async disconnectAccount(accountId: string): Promise<boolean> {\n    try {\n      return await bankAccountIntegrationService.connectBankAccount({ accountId, disconnect: true })\n    } catch (error) {\n      console.error('Error disconnecting account:', error)\n      return false\n    }\n  }\n\n  /**\n   * Refresh account balance\n   */\n  async refreshAccountBalance(accountId: string): Promise<number | null> {\n    try {\n      const result = await bankAccountIntegrationService.getAccountBalance(accountId)\n      return result?.available || null\n    } catch (error) {\n      console.error('Error refreshing account balance:', error)\n      return null\n    }\n  }\n\n  /**\n   * Verify a bank account\n   */\n  async verifyAccount(accountId: string, verificationData: any): Promise<boolean> {\n    try {\n      return await bankAccountIntegrationService.verifyBankAccount(accountId, verificationData)\n    } catch (error) {\n      console.error('Error verifying account:', error)\n      return false\n    }\n  }\n\n  /**\n   * Get account transaction history\n   */\n  async getAccountTransactions(accountId: string, limit: number = 50): Promise<any[]> {\n    try {\n      return await bankAccountIntegrationService.getTransactionHistory(accountId)\n    } catch (error) {\n      console.error('Error fetching account transactions:', error)\n      return []\n    }\n  }\n\n  /**\n   * Format account display name\n   */\n  formatAccountDisplay(account: BankAccountInfo): string {\n    return `${account.bankName} ****${account.lastFour}`\n  }\n\n  /**\n   * Get account type display name\n   */\n  getAccountTypeDisplay(accountType: string): string {\n    const typeMap: Record<string, string> = {\n      'checking': 'Checking',\n      'savings': 'Savings',\n      'credit': 'Credit Card',\n      'investment': 'Investment',\n      'business': 'Business',\n      'other': 'Other'\n    }\n    return typeMap[accountType.toLowerCase()] || accountType\n  }\n\n  /**\n   * Check if account supports deposits\n   */\n  supportsDeposits(account: BankAccountInfo): boolean {\n    return ['checking', 'savings', 'business'].includes(account.accountType.toLowerCase())\n  }\n\n  /**\n   * Check if account supports withdrawals\n   */\n  supportsWithdrawals(account: BankAccountInfo): boolean {\n    return ['checking', 'savings', 'business'].includes(account.accountType.toLowerCase())\n  }\n\n  /**\n   * Get available balance for withdrawals\n   */\n  getAvailableBalance(account: BankAccountInfo): number {\n    // For checking/savings, return full balance\n    // For credit cards, return available credit\n    if (account.accountType.toLowerCase() === 'credit') {\n      // This would need to be implemented based on credit limit\n      return 0\n    }\n    return account.balance || 0\n  }\n}\n\n// Export singleton instance\nexport const bankAccountService = new BankAccountService()\nexport default bankAccountService"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2393, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/dashboard/ScheduledTransactionsTab.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Switch } from '@/components/ui/switch'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Calendar, Clock, DollarSign, Plus, Settings, Trash2, Play, Pause, Edit } from 'lucide-react'\nimport { transactionSchedulerService, ScheduledTransaction, ScheduleConfig } from '@/services/TransactionSchedulerService'\nimport { bankAccountService } from '@/services/BankAccountService'\n\ninterface BankAccount {\n  id: string\n  bankName: string\n  accountType: string\n  lastFour: string\n  isVerified: boolean\n}\n\nexport default function ScheduledTransactionsTab() {\n  const [scheduledTransactions, setScheduledTransactions] = useState<ScheduledTransaction[]>([])\n  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([])\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [editingTransaction, setEditingTransaction] = useState<ScheduledTransaction | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  // Form state\n  const [formData, setFormData] = useState<ScheduleConfig>({\n    type: 'deposit',\n    amount: 0,\n    currency: 'USD',\n    bankAccountId: '',\n    frequency: 'monthly',\n    dayOfMonth: 1\n  })\n\n  useEffect(() => {\n    loadData()\n  }, [])\n\n  const loadData = async () => {\n    try {\n      setLoading(true)\n      const [transactions, accounts] = await Promise.all([\n        Promise.resolve(transactionSchedulerService.getScheduledTransactions('user-123')),\n        bankAccountService.getConnectedAccounts()\n      ])\n      setScheduledTransactions(transactions)\n      setBankAccounts(accounts)\n    } catch (err) {\n      setError('Failed to load scheduled transactions')\n      console.error('Error loading data:', err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleCreateSchedule = async () => {\n    try {\n      if (!formData.bankAccountId || formData.amount <= 0) {\n        setError('Please fill in all required fields')\n        return\n      }\n\n      await transactionSchedulerService.createScheduledTransaction('user-123', formData)\n      await loadData()\n      setIsCreateDialogOpen(false)\n      resetForm()\n      setError(null)\n    } catch (err) {\n      setError('Failed to create scheduled transaction')\n      console.error('Error creating schedule:', err)\n    }\n  }\n\n  const handleEditSchedule = async () => {\n    try {\n      if (!editingTransaction || !formData.bankAccountId || formData.amount <= 0) {\n        setError('Please fill in all required fields')\n        return\n      }\n\n      await transactionSchedulerService.updateScheduledTransaction(editingTransaction.id, formData)\n      await loadData()\n      setIsEditDialogOpen(false)\n      setEditingTransaction(null)\n      resetForm()\n      setError(null)\n    } catch (err) {\n      setError('Failed to update scheduled transaction')\n      console.error('Error updating schedule:', err)\n    }\n  }\n\n  const handleToggleActive = async (id: string) => {\n    try {\n      await transactionSchedulerService.toggleScheduledTransaction(id)\n      await loadData()\n    } catch (err) {\n      setError('Failed to toggle transaction status')\n      console.error('Error toggling status:', err)\n    }\n  }\n\n  const handleDeleteSchedule = async (id: string) => {\n    try {\n      await transactionSchedulerService.deleteScheduledTransaction(id)\n      await loadData()\n    } catch (err) {\n      setError('Failed to delete scheduled transaction')\n      console.error('Error deleting schedule:', err)\n    }\n  }\n\n  const handleExecuteNow = async (id: string) => {\n    try {\n      const result = await transactionSchedulerService.executeScheduledTransaction(id)\n      if (result.success) {\n        if (result.skipped) {\n          setError(`Transaction skipped: ${result.reason}`)\n        } else {\n          setError(null)\n          await loadData()\n        }\n      } else {\n        setError(`Execution failed: ${result.error}`)\n      }\n    } catch (err) {\n      setError('Failed to execute transaction')\n      console.error('Error executing transaction:', err)\n    }\n  }\n\n  const openEditDialog = (transaction: ScheduledTransaction) => {\n    setEditingTransaction(transaction)\n    setFormData({\n      type: transaction.type,\n      amount: transaction.amount,\n      currency: transaction.currency,\n      bankAccountId: transaction.bankAccountId,\n      frequency: transaction.frequency,\n      dayOfWeek: transaction.dayOfWeek,\n      dayOfMonth: transaction.dayOfMonth,\n      conditions: transaction.conditions\n    })\n    setIsEditDialogOpen(true)\n  }\n\n  const resetForm = () => {\n    setFormData({\n      type: 'deposit',\n      amount: 0,\n      currency: 'USD',\n      bankAccountId: '',\n      frequency: 'monthly',\n      dayOfMonth: 1\n    })\n  }\n\n  const formatNextExecution = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    }).format(new Date(date))\n  }\n\n  const getFrequencyDisplay = (transaction: ScheduledTransaction) => {\n    switch (transaction.frequency) {\n      case 'daily':\n        return 'Daily'\n      case 'weekly':\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n        return `Weekly (${days[transaction.dayOfWeek || 1]})`\n      case 'monthly':\n        return `Monthly (${transaction.dayOfMonth || 1}${getOrdinalSuffix(transaction.dayOfMonth || 1)})`\n      case 'quarterly':\n        return `Quarterly${transaction.dayOfMonth ? ` (${transaction.dayOfMonth}${getOrdinalSuffix(transaction.dayOfMonth)})` : ''}`\n      default:\n        return transaction.frequency\n    }\n  }\n\n  const getOrdinalSuffix = (num: number) => {\n    const j = num % 10\n    const k = num % 100\n    if (j === 1 && k !== 11) return 'st'\n    if (j === 2 && k !== 12) return 'nd'\n    if (j === 3 && k !== 13) return 'rd'\n    return 'th'\n  }\n\n  const getBankAccountDisplay = (bankAccountId: string) => {\n    const account = bankAccounts.find(acc => acc.id === bankAccountId)\n    return account ? `${account.bankName} ****${account.lastFour}` : 'Unknown Account'\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading scheduled transactions...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Scheduled Transactions</h2>\n          <p className=\"text-gray-600\">Automate your deposits and withdrawals</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Schedule Transaction\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Schedule New Transaction</DialogTitle>\n              <DialogDescription>\n                Set up automatic deposits or withdrawals\n              </DialogDescription>\n            </DialogHeader>\n            <ScheduleForm\n              formData={formData}\n              setFormData={setFormData}\n              bankAccounts={bankAccounts}\n            />\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreateSchedule}>\n                Create Schedule\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertDescription className=\"text-red-800\">{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Scheduled Transactions List */}\n      <div className=\"grid gap-4\">\n        {scheduledTransactions.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <Calendar className=\"w-12 h-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Scheduled Transactions</h3>\n              <p className=\"text-gray-600 text-center mb-4\">\n                Set up automatic deposits and withdrawals to streamline your trading workflow.\n              </p>\n              <Button\n                onClick={() => setIsCreateDialogOpen(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Schedule\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          scheduledTransactions.map((transaction) => (\n            <Card key={transaction.id} className={`${!transaction.isActive ? 'opacity-60' : ''}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`p-2 rounded-lg ${\n                      transaction.type === 'deposit' \n                        ? 'bg-green-100 text-green-600' \n                        : 'bg-red-100 text-red-600'\n                    }`}>\n                      <DollarSign className=\"w-5 h-5\" />\n                    </div>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-medium text-gray-900\">\n                          {transaction.type === 'deposit' ? 'Auto Deposit' : 'Auto Withdraw'}\n                        </h3>\n                        <Badge variant={transaction.isActive ? 'default' : 'secondary'}>\n                          {transaction.isActive ? 'Active' : 'Paused'}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-600\">\n                        ${transaction.amount.toLocaleString()} {transaction.currency} • {getFrequencyDisplay(transaction)}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {getBankAccountDisplay(transaction.bankAccountId)}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        Next: {formatNextExecution(transaction.nextExecution)}\n                      </p>\n                      {transaction.lastExecution && (\n                        <p className=\"text-xs text-gray-500\">\n                          Last: {formatNextExecution(transaction.lastExecution)}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleToggleActive(transaction.id)}\n                        title={transaction.isActive ? 'Pause' : 'Resume'}\n                      >\n                        {transaction.isActive ? (\n                          <Pause className=\"w-4 h-4\" />\n                        ) : (\n                          <Play className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => openEditDialog(transaction)}\n                        title=\"Edit\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleExecuteNow(transaction.id)}\n                        title=\"Execute Now\"\n                      >\n                        <Settings className=\"w-4 h-4\" />\n                      </Button>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteSchedule(transaction.id)}\n                        className=\"text-red-600 hover:text-red-700\"\n                        title=\"Delete\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Scheduled Transaction</DialogTitle>\n            <DialogDescription>\n              Update your automatic transaction settings\n            </DialogDescription>\n          </DialogHeader>\n          <ScheduleForm\n            formData={formData}\n            setFormData={setFormData}\n            bankAccounts={bankAccounts}\n          />\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleEditSchedule}>\n              Update Schedule\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n\n// Schedule Form Component\ninterface ScheduleFormProps {\n  formData: ScheduleConfig\n  setFormData: (data: ScheduleConfig) => void\n  bankAccounts: BankAccount[]\n}\n\nfunction ScheduleForm({ formData, setFormData, bankAccounts }: ScheduleFormProps) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"type\">Type</Label>\n          <Select\n            value={formData.type}\n            onValueChange={(value: 'deposit' | 'withdraw') => \n              setFormData({ ...formData, type: value })\n            }\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"deposit\">Deposit</SelectItem>\n              <SelectItem value=\"withdraw\">Withdraw</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"amount\">Amount</Label>\n          <Input\n            id=\"amount\"\n            type=\"number\"\n            value={formData.amount}\n            onChange={(e) => setFormData({ ...formData, amount: parseFloat(e.target.value) || 0 })}\n            placeholder=\"0.00\"\n          />\n        </div>\n      </div>\n\n      <div>\n        <Label htmlFor=\"bankAccount\">Bank Account</Label>\n        <Select\n          value={formData.bankAccountId}\n          onValueChange={(value) => setFormData({ ...formData, bankAccountId: value })}\n        >\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select bank account\" />\n          </SelectTrigger>\n          <SelectContent>\n            {bankAccounts.map((account) => (\n              <SelectItem key={account.id} value={account.id}>\n                {account.bankName} ****{account.lastFour}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label htmlFor=\"frequency\">Frequency</Label>\n        <Select\n          value={formData.frequency}\n          onValueChange={(value: 'daily' | 'weekly' | 'monthly' | 'quarterly') => \n            setFormData({ ...formData, frequency: value })\n          }\n        >\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"daily\">Daily</SelectItem>\n            <SelectItem value=\"weekly\">Weekly</SelectItem>\n            <SelectItem value=\"monthly\">Monthly</SelectItem>\n            <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {formData.frequency === 'weekly' && (\n        <div>\n          <Label htmlFor=\"dayOfWeek\">Day of Week</Label>\n          <Select\n            value={formData.dayOfWeek?.toString() || '1'}\n            onValueChange={(value) => setFormData({ ...formData, dayOfWeek: parseInt(value) })}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"0\">Sunday</SelectItem>\n              <SelectItem value=\"1\">Monday</SelectItem>\n              <SelectItem value=\"2\">Tuesday</SelectItem>\n              <SelectItem value=\"3\">Wednesday</SelectItem>\n              <SelectItem value=\"4\">Thursday</SelectItem>\n              <SelectItem value=\"5\">Friday</SelectItem>\n              <SelectItem value=\"6\">Saturday</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      )}\n\n      {(formData.frequency === 'monthly' || formData.frequency === 'quarterly') && (\n        <div>\n          <Label htmlFor=\"dayOfMonth\">Day of Month</Label>\n          <Input\n            id=\"dayOfMonth\"\n            type=\"number\"\n            min=\"1\"\n            max=\"31\"\n            value={formData.dayOfMonth || 1}\n            onChange={(e) => setFormData({ ...formData, dayOfMonth: parseInt(e.target.value) || 1 })}\n          />\n        </div>\n      )}\n    </div>\n  )\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAfA;;;;;;;;;;;;;;AAyBe,SAAS;IACtB,MAAM,CAAC,uBAAuB,yBAAyB,GAAG,IAAA,iNAAQ,EAAyB,EAAE;IAC7F,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,iNAAQ,EAAgB,EAAE;IAClE,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,IAAA,iNAAQ,EAAC;IAC7D,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,IAAA,iNAAQ,EAAC;IACzD,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,IAAA,iNAAQ,EAA8B;IAC1F,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAgB;IAElD,aAAa;IACb,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAiB;QACvD,MAAM;QACN,QAAQ;QACR,UAAU;QACV,eAAe;QACf,WAAW;QACX,YAAY;IACd;IAEA,IAAA,kNAAS,EAAC;QACR;IACF,GAAG,EAAE;IAEL,MAAM,WAAW;QACf,IAAI;YACF,WAAW;YACX,MAAM,CAAC,cAAc,SAAS,GAAG,MAAM,QAAQ,GAAG,CAAC;gBACjD,QAAQ,OAAO,CAAC,6KAA2B,CAAC,wBAAwB,CAAC;gBACrE,2JAAkB,CAAC,oBAAoB;aACxC;YACD,yBAAyB;YACzB,gBAAgB;QAClB,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC,uBAAuB;QACvC,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,uBAAuB;QAC3B,IAAI;YACF,IAAI,CAAC,SAAS,aAAa,IAAI,SAAS,MAAM,IAAI,GAAG;gBACnD,SAAS;gBACT;YACF;YAEA,MAAM,6KAA2B,CAAC,0BAA0B,CAAC,YAAY;YACzE,MAAM;YACN,sBAAsB;YACtB;YACA,SAAS;QACX,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC,4BAA4B;QAC5C;IACF;IAEA,MAAM,qBAAqB;QACzB,IAAI;YACF,IAAI,CAAC,sBAAsB,CAAC,SAAS,aAAa,IAAI,SAAS,MAAM,IAAI,GAAG;gBAC1E,SAAS;gBACT;YACF;YAEA,MAAM,6KAA2B,CAAC,0BAA0B,CAAC,mBAAmB,EAAE,EAAE;YACpF,MAAM;YACN,oBAAoB;YACpB,sBAAsB;YACtB;YACA,SAAS;QACX,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC,4BAA4B;QAC5C;IACF;IAEA,MAAM,qBAAqB,OAAO;QAChC,IAAI;YACF,MAAM,6KAA2B,CAAC,0BAA0B,CAAC;YAC7D,MAAM;QACR,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC,0BAA0B;QAC1C;IACF;IAEA,MAAM,uBAAuB,OAAO;QAClC,IAAI;YACF,MAAM,6KAA2B,CAAC,0BAA0B,CAAC;YAC7D,MAAM;QACR,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC,4BAA4B;QAC5C;IACF;IAEA,MAAM,mBAAmB,OAAO;QAC9B,IAAI;YACF,MAAM,SAAS,MAAM,6KAA2B,CAAC,2BAA2B,CAAC;YAC7E,IAAI,OAAO,OAAO,EAAE;gBAClB,IAAI,OAAO,OAAO,EAAE;oBAClB,SAAS,CAAC,qBAAqB,EAAE,OAAO,MAAM,EAAE;gBAClD,OAAO;oBACL,SAAS;oBACT,MAAM;gBACR;YACF,OAAO;gBACL,SAAS,CAAC,kBAAkB,EAAE,OAAO,KAAK,EAAE;YAC9C;QACF,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC,gCAAgC;QAChD;IACF;IAEA,MAAM,iBAAiB,CAAC;QACtB,sBAAsB;QACtB,YAAY;YACV,MAAM,YAAY,IAAI;YACtB,QAAQ,YAAY,MAAM;YAC1B,UAAU,YAAY,QAAQ;YAC9B,eAAe,YAAY,aAAa;YACxC,WAAW,YAAY,SAAS;YAChC,WAAW,YAAY,SAAS;YAChC,YAAY,YAAY,UAAU;YAClC,YAAY,YAAY,UAAU;QACpC;QACA,oBAAoB;IACtB;IAEA,MAAM,YAAY;QAChB,YAAY;YACV,MAAM;YACN,QAAQ;YACR,UAAU;YACV,eAAe;YACf,WAAW;YACX,YAAY;QACd;IACF;IAEA,MAAM,sBAAsB,CAAC;QAC3B,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;YACtC,OAAO;YACP,KAAK;YACL,MAAM;YACN,MAAM;YACN,QAAQ;QACV,GAAG,MAAM,CAAC,IAAI,KAAK;IACrB;IAEA,MAAM,sBAAsB,CAAC;QAC3B,OAAQ,YAAY,SAAS;YAC3B,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,MAAM,OAAO;oBAAC;oBAAU;oBAAU;oBAAW;oBAAa;oBAAY;oBAAU;iBAAW;gBAC3F,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC;YACvD,KAAK;gBACH,OAAO,CAAC,SAAS,EAAE,YAAY,UAAU,IAAI,IAAI,iBAAiB,YAAY,UAAU,IAAI,GAAG,CAAC,CAAC;YACnG,KAAK;gBACH,OAAO,CAAC,SAAS,EAAE,YAAY,UAAU,GAAG,CAAC,EAAE,EAAE,YAAY,UAAU,GAAG,iBAAiB,YAAY,UAAU,EAAE,CAAC,CAAC,GAAG,IAAI;YAC9H;gBACE,OAAO,YAAY,SAAS;QAChC;IACF;IAEA,MAAM,mBAAmB,CAAC;QACxB,MAAM,IAAI,MAAM;QAChB,MAAM,IAAI,MAAM;QAChB,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO;QAChC,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO;QAChC,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO;QAChC,OAAO;IACT;IAEA,MAAM,wBAAwB,CAAC;QAC7B,MAAM,UAAU,aAAa,IAAI,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QACpD,OAAO,UAAU,GAAG,QAAQ,QAAQ,CAAC,KAAK,EAAE,QAAQ,QAAQ,EAAE,GAAG;IACnE;IAEA,IAAI,SAAS;QACX,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAE,WAAU;kCAAgB;;;;;;;;;;;;;;;;;IAIrC;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;0CACC,8OAAC;gCAAG,WAAU;0CAAmC;;;;;;0CACjD,8OAAC;gCAAE,WAAU;0CAAgB;;;;;;;;;;;;kCAE/B,8OAAC,4IAAM;wBAAC,MAAM;wBAAoB,cAAc;;0CAC9C,8OAAC,mJAAa;gCAAC,OAAO;0CACpB,cAAA,8OAAC,4IAAM;oCAAC,WAAU;;sDAChB,8OAAC,0MAAI;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;;;;;;0CAIrC,8OAAC,mJAAa;gCAAC,WAAU;;kDACvB,8OAAC,kJAAY;;0DACX,8OAAC,iJAAW;0DAAC;;;;;;0DACb,8OAAC,uJAAiB;0DAAC;;;;;;;;;;;;kDAIrB,8OAAC;wCACC,UAAU;wCACV,aAAa;wCACb,cAAc;;;;;;kDAEhB,8OAAC,kJAAY;;0DACX,8OAAC,4IAAM;gDAAC,SAAQ;gDAAU,SAAS,IAAM,sBAAsB;0DAAQ;;;;;;0DAGvE,8OAAC,4IAAM;gDAAC,SAAS;0DAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAS9C,uBACC,8OAAC,0IAAK;gBAAC,WAAU;0BACf,cAAA,8OAAC,qJAAgB;oBAAC,WAAU;8BAAgB;;;;;;;;;;;0BAKhD,8OAAC;gBAAI,WAAU;0BACZ,sBAAsB,MAAM,KAAK,kBAChC,8OAAC,wIAAI;8BACH,cAAA,8OAAC,+IAAW;wBAAC,WAAU;;0CACrB,8OAAC,sNAAQ;gCAAC,WAAU;;;;;;0CACpB,8OAAC;gCAAG,WAAU;0CAAyC;;;;;;0CACvD,8OAAC;gCAAE,WAAU;0CAAiC;;;;;;0CAG9C,8OAAC,4IAAM;gCACL,SAAS,IAAM,sBAAsB;gCACrC,WAAU;;kDAEV,8OAAC,0MAAI;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;;;;;;;;;;;2BAMvC,sBAAsB,GAAG,CAAC,CAAC,4BACzB,8OAAC,wIAAI;wBAAsB,WAAW,GAAG,CAAC,YAAY,QAAQ,GAAG,eAAe,IAAI;kCAClF,cAAA,8OAAC,+IAAW;4BAAC,WAAU;sCACrB,cAAA,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAW,CAAC,eAAe,EAC9B,YAAY,IAAI,KAAK,YACjB,gCACA,2BACJ;0DACA,cAAA,8OAAC,gOAAU;oDAAC,WAAU;;;;;;;;;;;0DAExB,8OAAC;;kEACC,8OAAC;wDAAI,WAAU;;0EACb,8OAAC;gEAAG,WAAU;0EACX,YAAY,IAAI,KAAK,YAAY,iBAAiB;;;;;;0EAErD,8OAAC,0IAAK;gEAAC,SAAS,YAAY,QAAQ,GAAG,YAAY;0EAChD,YAAY,QAAQ,GAAG,WAAW;;;;;;;;;;;;kEAGvC,8OAAC;wDAAE,WAAU;;4DAAwB;4DACjC,YAAY,MAAM,CAAC,cAAc;4DAAG;4DAAE,YAAY,QAAQ;4DAAC;4DAAI,oBAAoB;;;;;;;kEAEvF,8OAAC;wDAAE,WAAU;kEACV,sBAAsB,YAAY,aAAa;;;;;;;;;;;;;;;;;;kDAKtD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;;kEACb,8OAAC;wDAAE,WAAU;;4DAAoC;4DACxC,oBAAoB,YAAY,aAAa;;;;;;;oDAErD,YAAY,aAAa,kBACxB,8OAAC;wDAAE,WAAU;;4DAAwB;4DAC5B,oBAAoB,YAAY,aAAa;;;;;;;;;;;;;0DAK1D,8OAAC;gDAAI,WAAU;;kEACb,8OAAC,4IAAM;wDACL,SAAQ;wDACR,MAAK;wDACL,SAAS,IAAM,mBAAmB,YAAY,EAAE;wDAChD,OAAO,YAAY,QAAQ,GAAG,UAAU;kEAEvC,YAAY,QAAQ,iBACnB,8OAAC,6MAAK;4DAAC,WAAU;;;;;iFAEjB,8OAAC,0MAAI;4DAAC,WAAU;;;;;;;;;;;kEAIpB,8OAAC,4IAAM;wDACL,SAAQ;wDACR,MAAK;wDACL,SAAS,IAAM,eAAe;wDAC9B,OAAM;kEAEN,cAAA,8OAAC,mNAAI;4DAAC,WAAU;;;;;;;;;;;kEAGlB,8OAAC,4IAAM;wDACL,SAAQ;wDACR,MAAK;wDACL,SAAS,IAAM,iBAAiB,YAAY,EAAE;wDAC9C,OAAM;kEAEN,cAAA,8OAAC,sNAAQ;4DAAC,WAAU;;;;;;;;;;;kEAGtB,8OAAC,4IAAM;wDACL,SAAQ;wDACR,MAAK;wDACL,SAAS,IAAM,qBAAqB,YAAY,EAAE;wDAClD,WAAU;wDACV,OAAM;kEAEN,cAAA,8OAAC,oNAAM;4DAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAhFnB,YAAY,EAAE;;;;;;;;;;0BA4F/B,8OAAC,4IAAM;gBAAC,MAAM;gBAAkB,cAAc;0BAC5C,cAAA,8OAAC,mJAAa;oBAAC,WAAU;;sCACvB,8OAAC,kJAAY;;8CACX,8OAAC,iJAAW;8CAAC;;;;;;8CACb,8OAAC,uJAAiB;8CAAC;;;;;;;;;;;;sCAIrB,8OAAC;4BACC,UAAU;4BACV,aAAa;4BACb,cAAc;;;;;;sCAEhB,8OAAC,kJAAY;;8CACX,8OAAC,4IAAM;oCAAC,SAAQ;oCAAU,SAAS,IAAM,oBAAoB;8CAAQ;;;;;;8CAGrE,8OAAC,4IAAM;oCAAC,SAAS;8CAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQjD;AASA,SAAS,aAAa,EAAE,QAAQ,EAAE,WAAW,EAAE,YAAY,EAAqB;IAC9E,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;0CACC,8OAAC,0IAAK;gCAAC,SAAQ;0CAAO;;;;;;0CACtB,8OAAC,4IAAM;gCACL,OAAO,SAAS,IAAI;gCACpB,eAAe,CAAC,QACd,YAAY;wCAAE,GAAG,QAAQ;wCAAE,MAAM;oCAAM;;kDAGzC,8OAAC,mJAAa;kDACZ,cAAA,8OAAC,iJAAW;;;;;;;;;;kDAEd,8OAAC,mJAAa;;0DACZ,8OAAC,gJAAU;gDAAC,OAAM;0DAAU;;;;;;0DAC5B,8OAAC,gJAAU;gDAAC,OAAM;0DAAW;;;;;;;;;;;;;;;;;;;;;;;;kCAKnC,8OAAC;;0CACC,8OAAC,0IAAK;gCAAC,SAAQ;0CAAS;;;;;;0CACxB,8OAAC,0IAAK;gCACJ,IAAG;gCACH,MAAK;gCACL,OAAO,SAAS,MAAM;gCACtB,UAAU,CAAC,IAAM,YAAY;wCAAE,GAAG,QAAQ;wCAAE,QAAQ,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK;oCAAE;gCACpF,aAAY;;;;;;;;;;;;;;;;;;0BAKlB,8OAAC;;kCACC,8OAAC,0IAAK;wBAAC,SAAQ;kCAAc;;;;;;kCAC7B,8OAAC,4IAAM;wBACL,OAAO,SAAS,aAAa;wBAC7B,eAAe,CAAC,QAAU,YAAY;gCAAE,GAAG,QAAQ;gCAAE,eAAe;4BAAM;;0CAE1E,8OAAC,mJAAa;0CACZ,cAAA,8OAAC,iJAAW;oCAAC,aAAY;;;;;;;;;;;0CAE3B,8OAAC,mJAAa;0CACX,aAAa,GAAG,CAAC,CAAC,wBACjB,8OAAC,gJAAU;wCAAkB,OAAO,QAAQ,EAAE;;4CAC3C,QAAQ,QAAQ;4CAAC;4CAAM,QAAQ,QAAQ;;uCADzB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;0BAQnC,8OAAC;;kCACC,8OAAC,0IAAK;wBAAC,SAAQ;kCAAY;;;;;;kCAC3B,8OAAC,4IAAM;wBACL,OAAO,SAAS,SAAS;wBACzB,eAAe,CAAC,QACd,YAAY;gCAAE,GAAG,QAAQ;gCAAE,WAAW;4BAAM;;0CAG9C,8OAAC,mJAAa;0CACZ,cAAA,8OAAC,iJAAW;;;;;;;;;;0CAEd,8OAAC,mJAAa;;kDACZ,8OAAC,gJAAU;wCAAC,OAAM;kDAAQ;;;;;;kDAC1B,8OAAC,gJAAU;wCAAC,OAAM;kDAAS;;;;;;kDAC3B,8OAAC,gJAAU;wCAAC,OAAM;kDAAU;;;;;;kDAC5B,8OAAC,gJAAU;wCAAC,OAAM;kDAAY;;;;;;;;;;;;;;;;;;;;;;;;YAKnC,SAAS,SAAS,KAAK,0BACtB,8OAAC;;kCACC,8OAAC,0IAAK;wBAAC,SAAQ;kCAAY;;;;;;kCAC3B,8OAAC,4IAAM;wBACL,OAAO,SAAS,SAAS,EAAE,cAAc;wBACzC,eAAe,CAAC,QAAU,YAAY;gCAAE,GAAG,QAAQ;gCAAE,WAAW,SAAS;4BAAO;;0CAEhF,8OAAC,mJAAa;0CACZ,cAAA,8OAAC,iJAAW;;;;;;;;;;0CAEd,8OAAC,mJAAa;;kDACZ,8OAAC,gJAAU;wCAAC,OAAM;kDAAI;;;;;;kDACtB,8OAAC,gJAAU;wCAAC,OAAM;kDAAI;;;;;;kDACtB,8OAAC,gJAAU;wCAAC,OAAM;kDAAI;;;;;;kDACtB,8OAAC,gJAAU;wCAAC,OAAM;kDAAI;;;;;;kDACtB,8OAAC,gJAAU;wCAAC,OAAM;kDAAI;;;;;;kDACtB,8OAAC,gJAAU;wCAAC,OAAM;kDAAI;;;;;;kDACtB,8OAAC,gJAAU;wCAAC,OAAM;kDAAI;;;;;;;;;;;;;;;;;;;;;;;;YAM7B,CAAC,SAAS,SAAS,KAAK,aAAa,SAAS,SAAS,KAAK,WAAW,mBACtE,8OAAC;;kCACC,8OAAC,0IAAK;wBAAC,SAAQ;kCAAa;;;;;;kCAC5B,8OAAC,0IAAK;wBACJ,IAAG;wBACH,MAAK;wBACL,KAAI;wBACJ,KAAI;wBACJ,OAAO,SAAS,UAAU,IAAI;wBAC9B,UAAU,CAAC,IAAM,YAAY;gCAAE,GAAG,QAAQ;gCAAE,YAAY,SAAS,EAAE,MAAM,CAAC,KAAK,KAAK;4BAAE;;;;;;;;;;;;;;;;;;AAMlG","debugId":null}},
    {"offset": {"line": 3548, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>((\n  { className, orientation = \"horizontal\", decorative = true, ...props },\n  ref\n) => (\n  <SeparatorPrimitive.Root\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}\n    className={cn(\n      \"shrink-0 bg-border\",\n      orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n      className\n    )}\n    {...props}\n  />\n))\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,mNAAgB,CAGhC,CACA,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,8OAAC,6KAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,IAAA,yHAAE,EACX,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG,6KAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 3578, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/checkbox.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { Check } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface CheckboxProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type'> {\n  className?: string\n}\n\nconst Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <div className=\"relative inline-flex items-center\">\n        <input\n          type=\"checkbox\"\n          ref={ref}\n          className={cn(\n            \"peer h-4 w-4 shrink-0 rounded-sm border border-gray-300 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 checked:bg-blue-600 checked:border-blue-600\",\n            className\n          )}\n          {...props}\n        />\n        <Check className=\"absolute h-3 w-3 text-white pointer-events-none opacity-0 peer-checked:opacity-100 left-0.5 top-0.5\" />\n      </div>\n    )\n  }\n)\nCheckbox.displayName = \"Checkbox\"\n\nexport { Checkbox }"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAJA;;;;;AAUA,MAAM,yBAAW,mNAAgB,CAC/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IACxB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBACC,MAAK;gBACL,KAAK;gBACL,WAAW,IAAA,yHAAE,EACX,wOACA;gBAED,GAAG,KAAK;;;;;;0BAEX,8OAAC,6MAAK;gBAAC,WAAU;;;;;;;;;;;;AAGvB;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 3625, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/modals/BankAccountConnectionModal.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '../ui/dialog';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { Checkbox } from '../ui/checkbox';\nimport { Alert, AlertDescription } from '../ui/alert';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Separator } from '../ui/separator';\nimport { Loader2, CreditCard, Shield, CheckCircle, AlertCircle, Bank, Plus, Trash2 } from 'lucide-react';\nimport { bankAccountIntegrationService, BankAccount, PlaidLinkResult } from '../../services/BankAccountIntegrationService';\nimport { automatedDepositWithdrawService, AutomatedWorkflowConfig } from '../../services/AutomatedDepositWithdrawService';\nimport { logger } from '../../lib/logger';\n\ninterface BankAccountConnectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  actionType: 'deposit' | 'withdrawal';\n  onSuccess?: (account: BankAccount, workflow?: AutomatedWorkflowConfig) => void;\n  defaultAmount?: number;\n}\n\ninterface PlaidLinkProps {\n  linkToken: string;\n  onSuccess: (publicToken: string, metadata: PlaidLinkResult['metadata']) => void;\n  onExit: () => void;\n}\n\n// Mock Plaid Link component (replace with actual Plaid Link in production)\nconst PlaidLink: React.FC<PlaidLinkProps> = ({ linkToken, onSuccess, onExit }) => {\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const handleConnect = async () => {\n    setIsConnecting(true);\n    // Simulate Plaid Link flow\n    setTimeout(() => {\n      const mockResult = {\n        publicToken: 'public-sandbox-' + Math.random().toString(36).substr(2, 9),\n        metadata: {\n          institution: {\n            name: 'Chase Bank',\n            institution_id: 'ins_3'\n          },\n          accounts: [\n            {\n              id: 'acc_' + Math.random().toString(36).substr(2, 9),\n              name: 'Chase Checking',\n              type: 'depository',\n              subtype: 'checking',\n              mask: '0000'\n            }\n          ]\n        }\n      };\n      onSuccess(mockResult.publicToken, mockResult.metadata);\n      setIsConnecting(false);\n    }, 2000);\n  };\n\n  return (\n    <Card className=\"border-2 border-dashed border-gray-300 hover:border-blue-500 transition-colors\">\n      <CardContent className=\"flex flex-col items-center justify-center p-8\">\n        <Bank className=\"h-12 w-12 text-gray-400 mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Connect Your Bank Account</h3>\n        <p className=\"text-gray-600 text-center mb-6\">\n          Securely connect your bank account using our encrypted connection\n        </p>\n        <Button \n          onClick={handleConnect} \n          disabled={isConnecting}\n          className=\"w-full\"\n        >\n          {isConnecting ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Connecting...\n            </>\n          ) : (\n            <>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Connect Bank Account\n            </>\n          )}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst BankAccountConnectionModal: React.FC<BankAccountConnectionModalProps> = ({\n  isOpen,\n  onClose,\n  actionType,\n  onSuccess,\n  defaultAmount = 500\n}) => {\n  const [step, setStep] = useState<'select' | 'connect' | 'configure' | 'success'>('select');\n  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([]);\n  const [selectedAccount, setSelectedAccount] = useState<BankAccount | null>(null);\n  const [linkToken, setLinkToken] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>('');\n  \n  // Workflow configuration\n  const [amount, setAmount] = useState(defaultAmount);\n  const [createWorkflow, setCreateWorkflow] = useState(false);\n  const [workflowFrequency, setWorkflowFrequency] = useState<'manual' | 'daily' | 'weekly' | 'monthly'>('manual');\n  const [workflowConditions, setWorkflowConditions] = useState({\n    minBalance: '',\n    maxBalance: ''\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      loadBankAccounts();\n    }\n  }, [isOpen]);\n\n  const loadBankAccounts = async () => {\n    try {\n      setIsLoading(true);\n      const accounts = await bankAccountIntegrationService.getBankAccounts();\n      setBankAccounts(accounts);\n      \n      if (accounts.length === 0) {\n        setStep('connect');\n        await initializePlaidLink();\n      } else {\n        setStep('select');\n      }\n    } catch (error) {\n      logger.error('Error loading bank accounts:', error);\n      setError('Failed to load bank accounts');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const initializePlaidLink = async () => {\n    try {\n      const { linkToken } = await bankAccountIntegrationService.initializePlaidLink();\n      setLinkToken(linkToken);\n    } catch (error) {\n      logger.error('Error initializing Plaid Link:', error);\n      setError('Failed to initialize bank connection');\n    }\n  };\n\n  const handlePlaidSuccess = async (publicToken: string, metadata: PlaidLinkResult['metadata']) => {\n    try {\n      setIsLoading(true);\n      const newAccounts = await bankAccountIntegrationService.connectBankAccount(publicToken, metadata);\n      setBankAccounts(prev => [...prev, ...newAccounts]);\n      setSelectedAccount(newAccounts[0]);\n      setStep('configure');\n    } catch (error) {\n      logger.error('Error connecting bank account:', error);\n      setError('Failed to connect bank account');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAccountSelect = (account: BankAccount) => {\n    setSelectedAccount(account);\n    setStep('configure');\n  };\n\n  const handleExecuteAction = async () => {\n    if (!selectedAccount) return;\n\n    try {\n      setIsLoading(true);\n      \n      let workflow: AutomatedWorkflowConfig | undefined;\n      \n      if (createWorkflow) {\n        workflow = await automatedDepositWithdrawService.createAutomatedWorkflow({\n          type: actionType,\n          bankAccountId: selectedAccount.id,\n          amount,\n          frequency: workflowFrequency,\n          conditions: {\n            minBalance: workflowConditions.minBalance ? parseFloat(workflowConditions.minBalance) : undefined,\n            maxBalance: workflowConditions.maxBalance ? parseFloat(workflowConditions.maxBalance) : undefined\n          }\n        });\n      }\n\n      const request = {\n        type: actionType,\n        amount,\n        bankAccountId: selectedAccount.id,\n        saveAsWorkflow: createWorkflow,\n        workflowConfig: workflow\n      };\n\n      if (actionType === 'deposit') {\n        await automatedDepositWithdrawService.handleQuickDeposit(request);\n      } else {\n        await automatedDepositWithdrawService.handleQuickWithdraw(request);\n      }\n\n      setStep('success');\n      onSuccess?.(selectedAccount, workflow);\n    } catch (error) {\n      logger.error(`Error executing ${actionType}:`, error);\n      setError(`Failed to execute ${actionType}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRemoveAccount = async (accountId: string) => {\n    try {\n      await bankAccountIntegrationService.removeBankAccount(accountId);\n      setBankAccounts(prev => prev.filter(acc => acc.id !== accountId));\n    } catch (error) {\n      logger.error('Error removing bank account:', error);\n      setError('Failed to remove bank account');\n    }\n  };\n\n  const renderSelectStep = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-lg font-semibold mb-2\">\n          Select Bank Account for {actionType === 'deposit' ? 'Deposit' : 'Withdrawal'}\n        </h3>\n        <p className=\"text-gray-600\">\n          Choose which bank account to use for this transaction\n        </p>\n      </div>\n\n      <div className=\"space-y-3\">\n        {bankAccounts.map((account) => (\n          <Card \n            key={account.id} \n            className={`cursor-pointer transition-all hover:shadow-md ${\n              selectedAccount?.id === account.id ? 'ring-2 ring-blue-500' : ''\n            }`}\n            onClick={() => handleAccountSelect(account)}\n          >\n            <CardContent className=\"flex items-center justify-between p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <CreditCard className=\"h-8 w-8 text-blue-500\" />\n                <div>\n                  <p className=\"font-medium\">{account.institutionName}</p>\n                  <p className=\"text-sm text-gray-600\">\n                    {account.accountName} ••••{account.mask}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {account.isVerified ? (\n                  <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                    Verified\n                  </Badge>\n                ) : (\n                  <Badge variant=\"secondary\">\n                    <AlertCircle className=\"h-3 w-3 mr-1\" />\n                    Pending\n                  </Badge>\n                )}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleRemoveAccount(account.id);\n                  }}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Separator />\n      \n      <Button \n        variant=\"outline\" \n        className=\"w-full\" \n        onClick={() => {\n          setStep('connect');\n          initializePlaidLink();\n        }}\n      >\n        <Plus className=\"mr-2 h-4 w-4\" />\n        Add New Bank Account\n      </Button>\n    </div>\n  );\n\n  const renderConnectStep = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-6\">\n        <Shield className=\"h-12 w-12 text-blue-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Secure Bank Connection</h3>\n        <p className=\"text-gray-600\">\n          Your bank credentials are encrypted and never stored on our servers\n        </p>\n      </div>\n\n      {linkToken && (\n        <PlaidLink\n          linkToken={linkToken}\n          onSuccess={handlePlaidSuccess}\n          onExit={() => setStep('select')}\n        />\n      )}\n\n      <div className=\"flex items-center justify-center space-x-4 text-sm text-gray-500\">\n        <div className=\"flex items-center\">\n          <Shield className=\"h-4 w-4 mr-1\" />\n          256-bit SSL\n        </div>\n        <div className=\"flex items-center\">\n          <CheckCircle className=\"h-4 w-4 mr-1\" />\n          Bank-level Security\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderConfigureStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-lg font-semibold mb-2\">\n          Configure {actionType === 'deposit' ? 'Deposit' : 'Withdrawal'}\n        </h3>\n        <p className=\"text-gray-600\">\n          Set up your transaction details and automation preferences\n        </p>\n      </div>\n\n      {selectedAccount && (\n        <Card>\n          <CardContent className=\"flex items-center space-x-3 p-4\">\n            <CreditCard className=\"h-8 w-8 text-blue-500\" />\n            <div>\n              <p className=\"font-medium\">{selectedAccount.institutionName}</p>\n              <p className=\"text-sm text-gray-600\">\n                {selectedAccount.accountName} ••••{selectedAccount.mask}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"amount\">Amount ($)</Label>\n          <Input\n            id=\"amount\"\n            type=\"number\"\n            value={amount}\n            onChange={(e) => setAmount(parseFloat(e.target.value) || 0)}\n            min=\"1\"\n            step=\"0.01\"\n          />\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox\n            id=\"create-workflow\"\n            checked={createWorkflow}\n            onCheckedChange={(checked) => setCreateWorkflow(checked as boolean)}\n          />\n          <Label htmlFor=\"create-workflow\">\n            Create automated workflow for future transactions\n          </Label>\n        </div>\n\n        {createWorkflow && (\n          <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg\">\n            <div>\n              <Label htmlFor=\"frequency\">Frequency</Label>\n              <Select value={workflowFrequency} onValueChange={(value: any) => setWorkflowFrequency(value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"manual\">Manual Only</SelectItem>\n                  <SelectItem value=\"daily\">Daily</SelectItem>\n                  <SelectItem value=\"weekly\">Weekly</SelectItem>\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"min-balance\">Min Balance Trigger ($)</Label>\n                <Input\n                  id=\"min-balance\"\n                  type=\"number\"\n                  value={workflowConditions.minBalance}\n                  onChange={(e) => setWorkflowConditions(prev => ({ ...prev, minBalance: e.target.value }))}\n                  placeholder=\"Optional\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"max-balance\">Max Balance Trigger ($)</Label>\n                <Input\n                  id=\"max-balance\"\n                  type=\"number\"\n                  value={workflowConditions.maxBalance}\n                  onChange={(e) => setWorkflowConditions(prev => ({ ...prev, maxBalance: e.target.value }))}\n                  placeholder=\"Optional\"\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex space-x-3\">\n        <Button variant=\"outline\" onClick={() => setStep('select')} className=\"flex-1\">\n          Back\n        </Button>\n        <Button onClick={handleExecuteAction} disabled={isLoading} className=\"flex-1\">\n          {isLoading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Processing...\n            </>\n          ) : (\n            `Execute ${actionType === 'deposit' ? 'Deposit' : 'Withdrawal'}`\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderSuccessStep = () => (\n    <div className=\"text-center space-y-4\">\n      <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto\" />\n      <h3 className=\"text-lg font-semibold\">\n        {actionType === 'deposit' ? 'Deposit' : 'Withdrawal'} Initiated Successfully!\n      </h3>\n      <p className=\"text-gray-600\">\n        Your transaction has been submitted and will be processed within 1-3 business days.\n      </p>\n      {createWorkflow && (\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Automated workflow has been created and will execute based on your configured schedule.\n          </AlertDescription>\n        </Alert>\n      )}\n      <Button onClick={onClose} className=\"w-full\">\n        Done\n      </Button>\n    </div>\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px] max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {step === 'select' && 'Select Bank Account'}\n            {step === 'connect' && 'Connect Bank Account'}\n            {step === 'configure' && `Configure ${actionType === 'deposit' ? 'Deposit' : 'Withdrawal'}`}\n            {step === 'success' && 'Transaction Initiated'}\n          </DialogTitle>\n          <DialogDescription>\n            {step === 'select' && 'Choose an existing bank account or add a new one'}\n            {step === 'connect' && 'Securely connect your bank account using our encrypted service'}\n            {step === 'configure' && 'Set up your transaction details and automation preferences'}\n            {step === 'success' && 'Your transaction has been successfully initiated'}\n          </DialogDescription>\n        </DialogHeader>\n\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {isLoading && step !== 'configure' && (\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        )}\n\n        {!isLoading && (\n          <>\n            {step === 'select' && renderSelectStep()}\n            {step === 'connect' && renderConnectStep()}\n            {step === 'configure' && renderConfigureStep()}\n            {step === 'success' && renderSuccessStep()}\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default BankAccountConnectionModal;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4685, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/dashboard/BankAccountManagement.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'\nimport { Separator } from '@/components/ui/separator'\nimport { \n  CreditCard, \n  Plus, \n  Trash2, \n  RefreshCw, \n  CheckCircle, \n  AlertCircle, \n  Eye, \n  EyeOff,\n  Building,\n  DollarSign,\n  Calendar,\n  Shield,\n  Unlink\n} from 'lucide-react'\nimport { bankAccountService, BankAccountInfo } from '@/services/BankAccountService'\nimport BankAccountConnectionModal from '@/components/modals/BankAccountConnectionModal'\n\nexport default function BankAccountManagement() {\n  const [bankAccounts, setBankAccounts] = useState<BankAccountInfo[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [showConnectionModal, setShowConnectionModal] = useState(false)\n  const [disconnectingAccount, setDisconnectingAccount] = useState<string | null>(null)\n  const [showBalances, setShowBalances] = useState(false)\n  const [refreshingAccount, setRefreshingAccount] = useState<string | null>(null)\n\n  useEffect(() => {\n    loadBankAccounts()\n  }, [])\n\n  const loadBankAccounts = async () => {\n    try {\n      setLoading(true)\n      const accounts = await bankAccountService.getConnectedAccounts()\n      setBankAccounts(accounts)\n      setError(null)\n    } catch (err) {\n      setError('Failed to load bank accounts')\n      console.error('Error loading bank accounts:', err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleDisconnectAccount = async (accountId: string) => {\n    try {\n      setDisconnectingAccount(accountId)\n      const success = await bankAccountService.disconnectAccount(accountId)\n      \n      if (success) {\n        await loadBankAccounts()\n        setError(null)\n      } else {\n        setError('Failed to disconnect bank account')\n      }\n    } catch (err) {\n      setError('Error disconnecting bank account')\n      console.error('Error disconnecting account:', err)\n    } finally {\n      setDisconnectingAccount(null)\n    }\n  }\n\n  const handleRefreshBalance = async (accountId: string) => {\n    try {\n      setRefreshingAccount(accountId)\n      const newBalance = await bankAccountService.refreshAccountBalance(accountId)\n      \n      if (newBalance !== null) {\n        // Update the account balance in the local state\n        setBankAccounts(prev => \n          prev.map(account => \n            account.id === accountId \n              ? { ...account, balance: newBalance }\n              : account\n          )\n        )\n        setError(null)\n      } else {\n        setError('Failed to refresh account balance')\n      }\n    } catch (err) {\n      setError('Error refreshing account balance')\n      console.error('Error refreshing balance:', err)\n    } finally {\n      setRefreshingAccount(null)\n    }\n  }\n\n  const handleConnectionSuccess = () => {\n    setShowConnectionModal(false)\n    loadBankAccounts()\n  }\n\n  const formatBalance = (balance: number | undefined, currency: string = 'USD') => {\n    if (balance === undefined) return 'N/A'\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency\n    }).format(balance)\n  }\n\n  const formatDate = (date: Date | undefined) => {\n    if (!date) return 'N/A'\n    return new Intl.DateTimeFormat('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }).format(new Date(date))\n  }\n\n  const getAccountIcon = (accountType: string) => {\n    switch (accountType.toLowerCase()) {\n      case 'checking':\n      case 'savings':\n        return <Building className=\"w-5 h-5\" />\n      case 'credit':\n        return <CreditCard className=\"w-5 h-5\" />\n      default:\n        return <DollarSign className=\"w-5 h-5\" />\n    }\n  }\n\n  const getStatusBadge = (account: BankAccountInfo) => {\n    if (account.isVerified) {\n      return (\n        <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n          <CheckCircle className=\"w-3 h-3 mr-1\" />\n          Verified\n        </Badge>\n      )\n    } else {\n      return (\n        <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">\n          <AlertCircle className=\"w-3 h-3 mr-1\" />\n          Pending\n        </Badge>\n      )\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading bank accounts...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Bank Account Management</h2>\n          <p className=\"text-gray-600\">Manage your connected bank accounts for deposits and withdrawals</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowBalances(!showBalances)}\n            className=\"flex items-center\"\n          >\n            {showBalances ? (\n              <>\n                <EyeOff className=\"w-4 h-4 mr-2\" />\n                Hide Balances\n              </>\n            ) : (\n              <>\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Show Balances\n              </>\n            )}\n          </Button>\n          <Button\n            onClick={() => setShowConnectionModal(true)}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Connect Bank Account\n          </Button>\n        </div>\n      </div>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-red-800\">{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Bank Accounts List */}\n      <div className=\"grid gap-4\">\n        {bankAccounts.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <CreditCard className=\"w-12 h-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Bank Accounts Connected</h3>\n              <p className=\"text-gray-600 text-center mb-4\">\n                Connect your bank account to enable automated deposits and withdrawals.\n              </p>\n              <Button\n                onClick={() => setShowConnectionModal(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Connect Your First Account\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          bankAccounts.map((account) => (\n            <Card key={account.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"p-3 bg-blue-100 rounded-lg text-blue-600\">\n                      {getAccountIcon(account.accountType)}\n                    </div>\n                    <div>\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"font-semibold text-gray-900\">\n                          {account.bankName}\n                        </h3>\n                        {getStatusBadge(account)}\n                      </div>\n                      <p className=\"text-sm text-gray-600\">\n                        {bankAccountService.getAccountTypeDisplay(account.accountType)} • ****{account.lastFour}\n                      </p>\n                      {account.connectedAt && (\n                        <p className=\"text-xs text-gray-500 flex items-center mt-1\">\n                          <Calendar className=\"w-3 h-3 mr-1\" />\n                          Connected {formatDate(account.connectedAt)}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    {/* Balance Display */}\n                    {showBalances && account.balance !== undefined && (\n                      <div className=\"text-right\">\n                        <p className=\"text-sm text-gray-500\">Available Balance</p>\n                        <p className=\"font-semibold text-gray-900\">\n                          {formatBalance(account.balance, account.currency)}\n                        </p>\n                      </div>\n                    )}\n                    \n                    {/* Action Buttons */}\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleRefreshBalance(account.id)}\n                        disabled={refreshingAccount === account.id}\n                        title=\"Refresh Balance\"\n                      >\n                        <RefreshCw className={`w-4 h-4 ${refreshingAccount === account.id ? 'animate-spin' : ''}`} />\n                      </Button>\n                      \n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-700\"\n                            title=\"Disconnect Account\"\n                          >\n                            <Unlink className=\"w-4 h-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Disconnect Bank Account</DialogTitle>\n                            <DialogDescription>\n                              Are you sure you want to disconnect {account.bankName} ****{account.lastFour}? \n                              This will stop all automated transactions for this account.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <DialogFooter>\n                            <Button variant=\"outline\">Cancel</Button>\n                            <Button\n                              variant=\"destructive\"\n                              onClick={() => handleDisconnectAccount(account.id)}\n                              disabled={disconnectingAccount === account.id}\n                            >\n                              {disconnectingAccount === account.id ? (\n                                <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                              ) : (\n                                <Trash2 className=\"w-4 h-4 mr-2\" />\n                              )}\n                              Disconnect\n                            </Button>\n                          </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Account Features */}\n                <Separator className=\"my-4\" />\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Shield className=\"w-4 h-4 text-green-500\" />\n                      <span className=\"text-gray-600\">Bank-level security</span>\n                    </div>\n                    {bankAccountService.supportsDeposits(account) && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        Deposits\n                      </Badge>\n                    )}\n                    {bankAccountService.supportsWithdrawals(account) && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        Withdrawals\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  {!account.isVerified && (\n                    <Button variant=\"link\" size=\"sm\" className=\"text-blue-600\">\n                      Complete Verification\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Security Notice */}\n      <Card className=\"bg-blue-50 border-blue-200\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <Shield className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium text-blue-900 mb-1\">Security & Privacy</h4>\n              <p className=\"text-sm text-blue-800\">\n                Your bank account information is encrypted and securely stored. We use bank-level security \n                protocols and never store your login credentials. You can disconnect any account at any time.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bank Account Connection Modal */}\n      <BankAccountConnectionModal\n        isOpen={showConnectionModal}\n        onClose={() => setShowConnectionModal(false)}\n        onSuccess={handleConnectionSuccess}\n        actionType=\"deposit\"\n      />\n    </div>\n  )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5507, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/dashboard/UserDashboard.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Progress } from '@/components/ui/progress'\nimport {\n  User,\n  Settings,\n  CreditCard,\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  Users,\n  Brain,\n  Shield,\n  Bell,\n  Eye,\n  EyeOff,\n  Copy,\n  ExternalLink,\n  Crown,\n  Star,\n  Activity,\n  BarChart3,\n  PieChart,\n  LineChart,\n  Target,\n  Zap,\n  Calendar,\n  Clock,\n  Award,\n  Smartphone,\n  Mail,\n  Phone,\n  MapPin,\n  Edit,\n  Check,\n  X,\n  Plus,\n  Minus,\n  ArrowUpRight,\n  ArrowDownLeft,\n  RefreshCw,\n  Download,\n  Upload,\n  Filter,\n  Search,\n  MoreHorizontal,\n  ChevronRight,\n  ChevronDown,\n  AlertTriangle,\n  CheckCircle,\n  Info,\n  Bookmark,\n  Share,\n  Heart,\n  MessageSquare,\n  Globe,\n  Lock,\n  Unlock,\n  Key,\n  Database,\n  Server,\n  Wifi,\n  Signal,\n  Menu\n} from 'lucide-react'\nimport { cn, formatCurrency as utilsFormatCurrency, formatPercent as utilsFormatPercent } from '@/lib/utils'\nimport automatedWorkflowService from '@/services/AutomatedWorkflowService'\nimport { useBalance } from '@/hooks/useBalance'\nimport ScheduledTransactionsTab from './ScheduledTransactionsTab'\nimport BankAccountManagement from './BankAccountManagement'\nimport { alertService } from '@/services/alertService'\n\ninterface PortfolioData {\n  totalValue: number\n  todayChange: number\n  todayChangePercent: number\n  weekChange: number\n  monthChange: number\n  yearChange: number\n}\n\ninterface SubscriptionData {\n  plan: string\n  status: string\n  nextBilling: string\n  amount: number\n  features: string[]\n  usage: {\n    trades: { used: number; limit: number }\n    copyTraders: { used: number; limit: number }\n    aiInsights: { used: number; limit: number }\n  }\n}\n\ninterface TradeData {\n  id: string\n  symbol: string\n  type: 'buy' | 'sell'\n  amount: number\n  price: number\n  profit: number\n  profitPercent: number\n  timestamp: string\n  status: 'completed' | 'pending' | 'cancelled'\n}\n\ninterface CopyTraderData {\n  id: string\n  name: string\n  avatar: string\n  followers: number\n  monthlyReturn: number\n  totalReturn: number\n  winRate: number\n  riskScore: number\n  isFollowing: boolean\n  copiedAmount: number\n}\n\nconst UserDashboard: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('overview')\n  const [balanceVisible, setBalanceVisible] = useState(true)\n  const [isEditing, setIsEditing] = useState(false)\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)\n  const [isAutoRebalancing, setIsAutoRebalancing] = useState(false)\n  const [realTimeUpdates, setRealTimeUpdates] = useState(true)\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null)\n  const [autoTradeEnabled, setAutoTradeEnabled] = useState(false)\n  const [pendingTrades, setPendingTrades] = useState<string[]>([])\n  const [autoCopyTradeEnabled, setAutoCopyTradeEnabled] = useState(false)\n  const [riskManagementEnabled, setRiskManagementEnabled] = useState(true)\n  const [smartAlertsEnabled, setSmartAlertsEnabled] = useState(true)\n  const [aiInsightsEnabled, setAiInsightsEnabled] = useState(true)\n  const [portfolioOptimizationEnabled, setPortfolioOptimizationEnabled] = useState(false)\n  const [advancedAnalyticsEnabled, setAdvancedAnalyticsEnabled] = useState(true)\n  \n  // Real-time balance tracking\n  const { balance, formattedBalance, isLoading: balanceLoading } = useBalance()\n  \n  // Mock data - in real app, this would come from API\n  const [portfolioData, setPortfolioData] = useState<PortfolioData>({\n    totalValue: 125847.32,\n    todayChange: 2847.21,\n    todayChangePercent: 2.31,\n    weekChange: 5234.12,\n    monthChange: 12847.89,\n    yearChange: 34521.67\n  })\n  \n  const [subscriptionData] = useState<SubscriptionData>({\n    plan: 'Pro Annual',\n    status: 'active',\n    nextBilling: '2024-12-15',\n    amount: 89.99,\n    features: [\n      'Unlimited trades',\n      'Follow up to 50 traders',\n      'Advanced AI insights',\n      'Priority support',\n      'Advanced analytics',\n      'Risk management tools'\n    ],\n    usage: {\n      trades: { used: 1247, limit: -1 },\n      copyTraders: { used: 12, limit: 50 },\n      aiInsights: { used: 89, limit: -1 }\n    }\n  })\n  \n  const [recentTrades] = useState<TradeData[]>([\n    {\n      id: '1',\n      symbol: 'BTC/USD',\n      type: 'buy',\n      amount: 0.5,\n      price: 43250.00,\n      profit: 1247.50,\n      profitPercent: 5.76,\n      timestamp: '2024-01-15T10:30:00Z',\n      status: 'completed'\n    },\n    {\n      id: '2',\n      symbol: 'ETH/USD',\n      type: 'sell',\n      amount: 2.3,\n      price: 2650.00,\n      profit: -234.12,\n      profitPercent: -3.84,\n      timestamp: '2024-01-15T09:15:00Z',\n      status: 'completed'\n    },\n    {\n      id: '3',\n      symbol: 'AAPL',\n      type: 'buy',\n      amount: 50,\n      price: 185.50,\n      profit: 425.00,\n      profitPercent: 4.58,\n      timestamp: '2024-01-14T16:45:00Z',\n      status: 'completed'\n    }\n  ])\n  \n  const [copyTraders] = useState<CopyTraderData[]>([\n    {\n      id: '1',\n      name: 'Sarah Chen',\n      avatar: 'SC',\n      followers: 12847,\n      monthlyReturn: 24.5,\n      totalReturn: 156.7,\n      winRate: 78.5,\n      riskScore: 6.2,\n      isFollowing: true,\n      copiedAmount: 5000\n    },\n    {\n      id: '2',\n      name: 'Marcus Rodriguez',\n      avatar: 'MR',\n      followers: 8934,\n      monthlyReturn: 18.3,\n      totalReturn: 134.2,\n      winRate: 82.1,\n      riskScore: 4.8,\n      isFollowing: true,\n      copiedAmount: 3000\n    },\n    {\n      id: '3',\n      name: 'Emily Watson',\n      avatar: 'EW',\n      followers: 15623,\n      monthlyReturn: 31.2,\n      totalReturn: 203.4,\n      winRate: 75.9,\n      riskScore: 7.1,\n      isFollowing: false,\n      copiedAmount: 0\n    }\n  ])\n  \n  const [userProfile, setUserProfile] = useState({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n    phone: '+1 (555) 123-4567',\n    location: 'New York, NY',\n    joinDate: '2023-06-15',\n    verified: true,\n    twoFactorEnabled: true\n  })\n\n  // Initialize lastUpdate on client side only to prevent hydration mismatch\n  useEffect(() => {\n    setLastUpdate(new Date())\n  }, [])\n\n  // Real-time updates effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout\n    \n    if (realTimeUpdates) {\n      interval = setInterval(() => {\n        // Simulate real-time portfolio updates\n        setPortfolioData(prev => ({\n          ...prev,\n          totalValue: prev.totalValue + (Math.random() - 0.5) * 1000,\n          todayChange: prev.todayChange + (Math.random() - 0.5) * 100,\n          todayChangePercent: prev.todayChangePercent + (Math.random() - 0.5) * 0.5\n        }))\n        setLastUpdate(new Date())\n      }, 3000) // Update every 3 seconds\n    }\n    \n    return () => {\n      if (interval) clearInterval(interval)\n    }\n  }, [realTimeUpdates])\n  \n  // Auto-rebalancing effect\n  useEffect(() => {\n    let timeout: NodeJS.Timeout\n    \n    if (isAutoRebalancing) {\n      timeout = setTimeout(() => {\n        // Simulate portfolio rebalancing\n        alert('Portfolio automatically rebalanced based on AI recommendations!')\n        setIsAutoRebalancing(false)\n      }, 5000) // Rebalance after 5 seconds\n    }\n    \n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [isAutoRebalancing])\n\n  const formatCurrency = (amount: number) => {\n    if (typeof amount !== 'number' || isNaN(amount)) return '$0.00'\n    try {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 2\n      }).format(amount)\n    } catch (error) {\n      return '$0.00'\n    }\n  }\n\n  const formatPercent = (percent: number) => {\n    return `${percent >= 0 ? '+' : ''}${percent.toFixed(2)}%`\n  }\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return 'N/A'\n    try {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      })\n    } catch (error) {\n      return 'Invalid Date'\n    }\n  }\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-blue-900 text-white p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Top Navigation Bar */}\n        <div className=\"bg-gray-800/30 backdrop-blur-xl rounded-xl border border-gray-700/50 p-4\">\n          <div className=\"flex flex-wrap items-center justify-between gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n                <Zap className=\"h-5 w-5 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold text-white\">KAIRO</span>\n              <Badge className=\"bg-orange-500/20 text-orange-300 border-orange-500/30 ml-2\">\n                Demo Mode\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center space-x-2 overflow-x-auto\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => window.open('/dashboard', '_self')}\n                className=\"text-gray-300 hover:text-white hover:bg-gray-700/50 whitespace-nowrap\"\n              >\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                Dashboard\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => window.open('/trading', '_self')}\n                className=\"text-gray-300 hover:text-white hover:bg-gray-700/50 whitespace-nowrap\"\n              >\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Trading\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => window.open('/portfolio', '_self')}\n                className=\"text-gray-300 hover:text-white hover:bg-gray-700/50 whitespace-nowrap\"\n              >\n                <PieChart className=\"w-4 h-4 mr-2\" />\n                Portfolio\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => window.open('/copy-trade', '_self')}\n                className=\"text-gray-300 hover:text-white hover:bg-gray-700/50 whitespace-nowrap\"\n              >\n                <Users className=\"w-4 h-4 mr-2\" />\n                Copy Trade\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => window.open('/automation', '_self')}\n                className=\"text-gray-300 hover:text-white hover:bg-gray-700/50 whitespace-nowrap\"\n              >\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Automation\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => window.open('/settings', '_self')}\n                className=\"text-gray-300 hover:text-white hover:bg-gray-700/50 whitespace-nowrap\"\n              >\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Settings\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Header */}\n        <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6\">\n          <div>\n            <h1 className=\"text-3xl lg:text-4xl font-bold mb-2\">\n              Welcome back, {userProfile.name.split(' ')[0]}!\n            </h1>\n            <p className=\"text-gray-300\">\n              Here&apos;s your trading overview for today\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Quick Fund Management Buttons */}\n            <Button \n              onClick={async () => {\n                try {\n                  await automatedWorkflowService.manualDeposit(1000, 'bank');\n                } catch (error) {\n                  console.error('Quick deposit failed:', error);\n                }\n              }}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Quick Deposit\n            </Button>\n            <Button \n              onClick={async () => {\n                try {\n                  await automatedWorkflowService.manualWithdraw(500, 'bank');\n                } catch (error) {\n                  console.error('Quick withdrawal failed:', error);\n                }\n              }}\n              variant=\"outline\" \n              className=\"border-blue-600 text-blue-300 hover:bg-blue-600/20\"\n            >\n              <Minus className=\"w-4 h-4 mr-2\" />\n              Quick Withdraw\n            </Button>\n            <Button variant=\"outline\" className=\"border-gray-600 text-gray-300 hover:bg-gray-800\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Data\n            </Button>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                className={cn(\n                  \"border-gray-600\",\n                  realTimeUpdates \n                    ? \"border-green-500 bg-green-500/20 text-green-300\" \n                    : \"text-gray-300 hover:bg-gray-700\"\n                )}\n                onClick={() => {\n                  setRealTimeUpdates(!realTimeUpdates)\n                  setLastUpdate(new Date())\n                  if (!realTimeUpdates) {\n                    alert('Real-time updates enabled')\n                  } else {\n                    alert('Real-time updates disabled')\n                  }\n                }}\n              >\n                <RefreshCw className={cn(\"w-4 h-4 mr-2\", realTimeUpdates && \"animate-spin\")} />\n                {realTimeUpdates ? 'Live' : 'Refresh'}\n              </Button>\n              <Button\n                onClick={() => window.open('/trading', '_blank')}\n                className=\"bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Trade\n              </Button>\n            </div>\n            <button\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              className=\"lg:hidden p-2 text-gray-400 hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900\"\n              aria-expanded={mobileMenuOpen}\n              aria-controls=\"mobile-menu\"\n              aria-label={mobileMenuOpen ? 'Close mobile menu' : 'Open mobile menu'}\n            >\n              {mobileMenuOpen ? <X className=\"h-6 w-6\" aria-hidden=\"true\" /> : <Menu className=\"h-6 w-6\" aria-hidden=\"true\" />}\n            </button>\n          </div>\n        </div>\n\n        {/* Portfolio Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"w-6 h-6 text-blue-400\" />\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setBalanceVisible(!balanceVisible)}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  {balanceVisible ? <Eye className=\"w-4 h-4\" /> : <EyeOff className=\"w-4 h-4\" />}\n                </Button>\n              </div>\n              <div>\n                <p className=\"text-gray-400 text-sm mb-1\">Total Portfolio Value</p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {balanceVisible ? formattedBalance.total : '••••••'}\n                  {balanceLoading && <span className=\"ml-2 text-sm text-gray-400\">updating...</span>}\n                </p>\n                <div className=\"flex items-center mt-2\">\n                  <TrendingUp className=\"w-4 h-4 text-green-400 mr-1\" />\n                  <span className=\"text-green-400 text-sm\">\n                    {formatPercent(portfolioData.todayChangePercent)}\n                  </span>\n                  <span className=\"text-gray-400 text-sm ml-1\">today</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-6 h-6 text-green-400\" />\n                </div>\n                <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                  Active\n                </Badge>\n              </div>\n              <div>\n                <p className=\"text-gray-400 text-sm mb-1\">Today&apos;s P&L</p>\n                <p className=\"text-2xl font-bold text-green-400\">\n                  {balanceVisible ? formatCurrency(portfolioData.todayChange) : '••••••'}\n                </p>\n                <p className=\"text-gray-400 text-sm mt-2\">\n                  {formatPercent(portfolioData.todayChangePercent)} from yesterday\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center\">\n                  <Users className=\"w-6 h-6 text-purple-400\" />\n                </div>\n                <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">\n                  {copyTraders.filter(t => t.isFollowing).length} Following\n                </Badge>\n              </div>\n              <div>\n                <p className=\"text-gray-400 text-sm mb-1\">Copy Trading</p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {copyTraders.filter(t => t.isFollowing).length} Traders\n                </p>\n                <p className=\"text-gray-400 text-sm mt-2\">\n                  {formatCurrency(copyTraders.reduce((sum, t) => sum + t.copiedAmount, 0))} allocated\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-orange-500/20 rounded-lg flex items-center justify-center\">\n                  <Crown className=\"w-6 h-6 text-orange-400\" />\n                </div>\n                <Badge className=\"bg-orange-500/20 text-orange-400 border-orange-500/30\">\n                  {subscriptionData.plan}\n                </Badge>\n              </div>\n              <div>\n                <p className=\"text-gray-400 text-sm mb-1\">Subscription</p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {formatCurrency(subscriptionData.amount)}\n                </p>\n                <p className=\"text-gray-400 text-sm mt-2\">\n                  Next billing: {formatDate(subscriptionData.nextBilling)}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Balance Breakdown Card */}\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"w-6 h-6 text-green-400\" />\n                </div>\n                <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                  Live\n                </Badge>\n              </div>\n              <div>\n                <p className=\"text-gray-400 text-sm mb-1\">Available Balance</p>\n                <p className=\"text-xl font-bold text-white\">\n                  {balanceVisible ? formattedBalance.available : '••••••'}\n                  {balanceLoading && <span className=\"ml-2 text-xs text-gray-400\">updating...</span>}\n                </p>\n                <p className=\"text-gray-400 text-sm mt-3 mb-1\">Invested Amount</p>\n                <p className=\"text-lg font-semibold text-white\">\n                  {balanceVisible ? formattedBalance.invested : '••••••'}\n                </p>\n                <p className=\"text-gray-400 text-sm mt-3 mb-1\">Pending Deposits</p>\n                <p className=\"text-lg font-semibold text-blue-400\">\n                  {balanceVisible ? balance.pendingDeposits.toLocaleString('en-US', { style: 'currency', currency: 'USD' }) : '••••••'}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"bg-gray-800/50 border border-gray-700 p-1\">\n            <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\">\n              <BarChart3 className=\"w-4 h-4 mr-2\" />\n              Overview\n            </TabsTrigger>\n            <TabsTrigger value=\"trades\" className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\">\n              <Activity className=\"w-4 h-4 mr-2\" />\n              Recent Trades\n            </TabsTrigger>\n            <TabsTrigger value=\"copy-trading\" className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Copy Trading\n            </TabsTrigger>\n            <TabsTrigger value=\"scheduled\" className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Scheduled\n            </TabsTrigger>\n            <TabsTrigger value=\"subscription\" className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\">\n              <Crown className=\"w-4 h-4 mr-2\" />\n              Subscription\n            </TabsTrigger>\n            <TabsTrigger value=\"profile\" className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\">\n              <User className=\"w-4 h-4 mr-2\" />\n              Profile\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Performance Chart */}\n              <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Portfolio Performance</span>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400\">\n                      <RefreshCw className=\"w-4 h-4\" />\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <p className=\"text-gray-400 text-sm\">1W</p>\n                        <p className=\"text-lg font-semibold text-green-400\">\n                          {formatPercent(4.2)}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-400 text-sm\">1M</p>\n                        <p className=\"text-lg font-semibold text-green-400\">\n                          {formatPercent(12.8)}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-400 text-sm\">1Y</p>\n                        <p className=\"text-lg font-semibold text-green-400\">\n                          {formatPercent(38.5)}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {/* Mock chart area */}\n                    <div className=\"h-48 bg-gray-900/50 rounded-lg flex items-center justify-center\">\n                      <div className=\"text-center\">\n                        <LineChart className=\"w-12 h-12 text-gray-600 mx-auto mb-2\" />\n                        <p className=\"text-gray-500 text-sm\">Performance Chart</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* AI Insights */}\n              <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Brain className=\"w-5 h-5 text-purple-400 mr-2\" />\n                    AI Insights\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"p-4 bg-purple-500/20 border border-purple-500/30 rounded-lg\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                          <Brain className=\"w-4 h-4 text-white\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-purple-300 font-semibold mb-1\">Market Opportunity</p>\n                          <p className=\"text-gray-300 text-sm mb-3\">\n                            Strong bullish momentum detected in BTC. Consider increasing allocation by 5-10%.\n                          </p>\n                          <div className=\"flex items-center justify-between\">\n                            <Badge className=\"bg-purple-500/30 text-purple-300 border-purple-500/50\">\n                              92% Confidence\n                            </Badge>\n                            <div className=\"flex space-x-2\">\n                              <Button \n                                size=\"sm\" \n                                onClick={() => window.open('/trading', '_blank')}\n                                className=\"bg-purple-600 hover:bg-purple-700 text-white text-xs px-3 py-1\"\n                              >\n                                Trade Now\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                className={cn(\n                                  \"text-xs px-3 py-1\",\n                                  pendingTrades.includes('BTC') \n                                    ? \"border-yellow-500 bg-yellow-500/20 text-yellow-300\" \n                                    : \"border-purple-500/30 text-purple-300 hover:bg-purple-500/10\"\n                                )}\n                                onClick={() => {\n                                  if (!pendingTrades.includes('BTC')) {\n                                    setPendingTrades(prev => [...prev, 'BTC'])\n                                    setTimeout(() => {\n                                      alert('Auto-trade executed: BTC +7.5% allocation')\n                                      setPendingTrades(prev => prev.filter(t => t !== 'BTC'))\n                                    }, 3000)\n                                  }\n                                }}\n                                disabled={pendingTrades.includes('BTC')}\n                              >\n                                <Zap className={cn(\"w-3 h-3 mr-1\", pendingTrades.includes('BTC') && \"animate-pulse\")} />\n                                {pendingTrades.includes('BTC') ? 'Executing...' : 'Auto Execute'}\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"p-4 bg-blue-500/20 border border-blue-500/30 rounded-lg\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                          <Shield className=\"w-4 h-4 text-white\" />\n                        </div>\n                        <div>\n                          <p className=\"text-blue-300 font-semibold mb-1\">Risk Alert</p>\n                          <p className=\"text-gray-300 text-sm\">\n                            Your portfolio concentration in tech stocks is above recommended levels.\n                          </p>\n                          <Badge className=\"mt-2 bg-blue-500/30 text-blue-300 border-blue-500/50\">\n                            Medium Risk\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Quick Actions Section */}\n            <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                   <div className=\"flex items-center\">\n                     <Zap className=\"w-5 h-5 text-yellow-400 mr-2\" />\n                     Quick Actions & Automation\n                   </div>\n                   {realTimeUpdates && lastUpdate && (\n                     <div className=\"flex items-center text-xs text-blue-400\">\n                       <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse mr-2\" />\n                       Last update: {lastUpdate.toLocaleTimeString()}\n                     </div>\n                   )}\n                 </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {/* Trading Links */}\n                  <div className=\"space-y-3\">\n                    <h4 className=\"text-sm font-semibold text-gray-300 mb-2\">Trading Platforms</h4>\n                    <Button \n                      className=\"w-full bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600\"\n                      onClick={() => window.open('/trading', '_blank')}\n                    >\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      Spot Trading\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-700\"\n                      onClick={() => window.open('/trading?tab=futures', '_blank')}\n                    >\n                      <TrendingUp className=\"w-4 h-4 mr-2\" />\n                      Futures Trading\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-700\"\n                      onClick={() => window.open('/trading?tab=options', '_blank')}\n                    >\n                      <Target className=\"w-4 h-4 mr-2\" />\n                      Options Trading\n                    </Button>\n                  </div>\n                  \n                  {/* Automation Features */}\n                  <div className=\"space-y-3\">\n                    <h4 className=\"text-sm font-semibold text-gray-300 mb-2\">Automation</h4>\n                    <Button \n                       variant=\"outline\" \n                       className={cn(\n                         \"w-full\",\n                         isAutoRebalancing \n                           ? \"border-green-500 bg-green-500/20 text-green-300\" \n                           : \"border-green-500/30 text-green-400 hover:bg-green-500/10\"\n                       )}\n                       onClick={() => {\n                         setIsAutoRebalancing(!isAutoRebalancing)\n                         if (!isAutoRebalancing) {\n                           alert('Portfolio rebalancing initiated based on AI recommendations')\n                         }\n                       }}\n                       disabled={isAutoRebalancing}\n                     >\n                       <RefreshCw className={cn(\"w-4 h-4 mr-2\", isAutoRebalancing && \"animate-spin\")} />\n                       {isAutoRebalancing ? 'Rebalancing...' : 'Auto Rebalance'}\n                     </Button>\n                    <Button \n                       variant=\"outline\" \n                       className={cn(\n                         \"w-full\",\n                         autoTradeEnabled \n                           ? \"border-blue-500 bg-blue-500/20 text-blue-300\" \n                           : \"border-blue-500/30 text-blue-400 hover:bg-blue-500/10\"\n                       )}\n                       onClick={() => {\n                         setAutoTradeEnabled(!autoTradeEnabled)\n                         if (!autoTradeEnabled) {\n                           alert('Automated trade execution enabled for AI insights')\n                         } else {\n                           alert('Automated trade execution disabled')\n                         }\n                       }}\n                     >\n                       <Zap className={cn(\"w-4 h-4 mr-2\", autoTradeEnabled && \"animate-pulse\")} />\n                       {autoTradeEnabled ? 'Auto Trade ON' : 'Enable Auto Trade'}\n                     </Button>\n                     <Button \n                       variant=\"outline\" \n                       className={cn(\n                         \"w-full\",\n                         autoCopyTradeEnabled \n                           ? \"border-purple-500 bg-purple-500/20 text-purple-300\" \n                           : \"border-purple-500/30 text-purple-400 hover:bg-purple-500/10\"\n                       )}\n                       onClick={() => {\n                         setAutoCopyTradeEnabled(!autoCopyTradeEnabled)\n                         if (!autoCopyTradeEnabled) {\n                           alert('Auto copy trading enabled for top performers')\n                         } else {\n                           alert('Auto copy trading disabled')\n                         }\n                       }}\n                     >\n                       <Copy className={cn(\"w-4 h-4 mr-2\", autoCopyTradeEnabled && \"animate-pulse\")} />\n                       {autoCopyTradeEnabled ? 'Auto Copy ON' : 'Auto Copy Trade'}\n                     </Button>\n                    <Button \n                      variant=\"outline\" \n                      className={cn(\n                        \"w-full\",\n                        riskManagementEnabled \n                          ? \"border-orange-500 bg-orange-500/20 text-orange-300\" \n                          : \"border-orange-500/30 text-orange-400 hover:bg-orange-500/10\"\n                      )}\n                      onClick={() => {\n                        setRiskManagementEnabled(!riskManagementEnabled)\n                        if (!riskManagementEnabled) {\n                          alert('Risk management system activated')\n                        } else {\n                          alert('Risk management system disabled')\n                        }\n                      }}\n                    >\n                      <Shield className={cn(\"w-4 h-4 mr-2\", riskManagementEnabled && \"animate-pulse\")} />\n                      {riskManagementEnabled ? 'Risk Mgmt ON' : 'Risk Management'}\n                    </Button>\n                  </div>\n                  \n                  {/* AI & Analytics Features */}\n                  <div className=\"space-y-3\">\n                    <h4 className=\"text-sm font-semibold text-gray-300 mb-2\">AI & Analytics</h4>\n                    <Button \n                      variant=\"outline\" \n                      className={cn(\n                        \"w-full\",\n                        aiInsightsEnabled \n                          ? \"border-blue-500 bg-blue-500/20 text-blue-300\" \n                          : \"border-blue-500/30 text-blue-400 hover:bg-blue-500/10\"\n                      )}\n                      onClick={() => {\n                        setAiInsightsEnabled(!aiInsightsEnabled)\n                        if (!aiInsightsEnabled) {\n                          alert('AI insights and recommendations activated')\n                        } else {\n                          alert('AI insights disabled')\n                        }\n                      }}\n                    >\n                      <Brain className={cn(\"w-4 h-4 mr-2\", aiInsightsEnabled && \"animate-pulse\")} />\n                      {aiInsightsEnabled ? 'AI Insights ON' : 'Enable AI Insights'}\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className={cn(\n                        \"w-full\",\n                        smartAlertsEnabled \n                          ? \"border-yellow-500 bg-yellow-500/20 text-yellow-300\" \n                          : \"border-yellow-500/30 text-yellow-400 hover:bg-yellow-500/10\"\n                      )}\n                      onClick={async () => {\n                        if (!smartAlertsEnabled) {\n                          try {\n                            const success = await alertService.enableAlerts();\n                            if (success) {\n                              setSmartAlertsEnabled(true);\n                              alert('Smart alerts and notifications enabled');\n                            } else {\n                              alert('Failed to enable alerts. Please check your browser settings.');\n                            }\n                          } catch (error) {\n                            alert('Failed to enable alerts. Please check your browser settings.');\n                          }\n                        } else {\n                          setSmartAlertsEnabled(false);\n                          alert('Smart alerts disabled');\n                        }\n                      }}\n                    >\n                      <Bell className={cn(\"w-4 h-4 mr-2\", smartAlertsEnabled && \"animate-pulse\")} />\n                      {smartAlertsEnabled ? 'Smart Alerts ON' : 'Smart Alerts'}\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className={cn(\n                        \"w-full\",\n                        portfolioOptimizationEnabled \n                          ? \"border-green-500 bg-green-500/20 text-green-300\" \n                          : \"border-green-500/30 text-green-400 hover:bg-green-500/10\"\n                      )}\n                      onClick={() => {\n                        setPortfolioOptimizationEnabled(!portfolioOptimizationEnabled)\n                        if (!portfolioOptimizationEnabled) {\n                          alert('Portfolio optimization engine activated')\n                        } else {\n                          alert('Portfolio optimization disabled')\n                        }\n                      }}\n                    >\n                      <Target className={cn(\"w-4 h-4 mr-2\", portfolioOptimizationEnabled && \"animate-pulse\")} />\n                      {portfolioOptimizationEnabled ? 'Optimization ON' : 'Portfolio Optimizer'}\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className={cn(\n                        \"w-full\",\n                        advancedAnalyticsEnabled \n                          ? \"border-purple-500 bg-purple-500/20 text-purple-300\" \n                          : \"border-purple-500/30 text-purple-400 hover:bg-purple-500/10\"\n                      )}\n                      onClick={() => {\n                        setAdvancedAnalyticsEnabled(!advancedAnalyticsEnabled)\n                        if (!advancedAnalyticsEnabled) {\n                          alert('Advanced analytics and reporting enabled')\n                        } else {\n                          alert('Advanced analytics disabled')\n                        }\n                      }}\n                    >\n                      <BarChart3 className={cn(\"w-4 h-4 mr-2\", advancedAnalyticsEnabled && \"animate-pulse\")} />\n                      {advancedAnalyticsEnabled ? 'Analytics ON' : 'Advanced Analytics'}\n                    </Button>\n                  </div>\n                  \n                  {/* Data & Reports */}\n                  <div className=\"space-y-3\">\n                    <h4 className=\"text-sm font-semibold text-gray-300 mb-2\">Data & Reports</h4>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-700\"\n                      onClick={() => {\n                        alert('Generating automated portfolio report...')\n                      }}\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export Report\n                    </Button>\n                    <Button \n                       variant=\"outline\" \n                       className={cn(\n                         \"w-full\",\n                         realTimeUpdates \n                           ? \"border-blue-500 bg-blue-500/20 text-blue-300\" \n                           : \"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                       )}\n                       onClick={() => {\n                         setRealTimeUpdates(!realTimeUpdates)\n                         if (!realTimeUpdates) {\n                           alert('Real-time data sync enabled')\n                         } else {\n                           alert('Real-time data sync disabled')\n                         }\n                       }}\n                     >\n                       <Activity className={cn(\"w-4 h-4 mr-2\", realTimeUpdates && \"animate-pulse\")} />\n                       {realTimeUpdates ? 'Live Sync ON' : 'Enable Sync'}\n                     </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-700\"\n                      onClick={() => {\n                        alert('Automated alerts configured')\n                      }}\n                    >\n                      <Bell className=\"w-4 h-4 mr-2\" />\n                      Setup Alerts\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Recent Trades Tab */}\n          <TabsContent value=\"trades\" className=\"space-y-6\">\n            <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Recent Trades</CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      Filter\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {recentTrades.map((trade) => (\n                    <div key={trade.id} className=\"flex items-center justify-between p-4 bg-gray-900/50 rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={cn(\n                          \"w-10 h-10 rounded-full flex items-center justify-center\",\n                          trade.type === 'buy' ? \"bg-green-500/20\" : \"bg-red-500/20\"\n                        )}>\n                          {trade.type === 'buy' ? (\n                            <TrendingUp className=\"w-5 h-5 text-green-400\" />\n                          ) : (\n                            <TrendingDown className=\"w-5 h-5 text-red-400\" />\n                          )}\n                        </div>\n                        <div>\n                          <p className=\"font-semibold text-white\">{trade.symbol}</p>\n                          <p className=\"text-gray-400 text-sm\">\n                            {trade.type.toUpperCase()} {trade.amount} @ {formatCurrency(trade.price)}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <p className={cn(\n                          \"font-semibold\",\n                          trade.profit >= 0 ? \"text-green-400\" : \"text-red-400\"\n                        )}>\n                          {trade.profit >= 0 ? '+' : ''}{formatCurrency(trade.profit)}\n                        </p>\n                        <p className={cn(\n                          \"text-sm\",\n                          trade.profit >= 0 ? \"text-green-400\" : \"text-red-400\"\n                        )}>\n                          {formatPercent(trade.profitPercent)}\n                        </p>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <Badge className={cn(\n                          trade.status === 'completed' && \"bg-green-500/20 text-green-400 border-green-500/30\",\n                          trade.status === 'pending' && \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\",\n                          trade.status === 'cancelled' && \"bg-red-500/20 text-red-400 border-red-500/30\"\n                        )}>\n                          {trade.status}\n                        </Badge>\n                        <p className=\"text-gray-400 text-sm mt-1\">\n                          {formatDate(trade.timestamp)}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Copy Trading Tab */}\n          <TabsContent value=\"copy-trading\" className=\"space-y-6\">\n            <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Copy Trading Portfolio</CardTitle>\n                  <Button className=\"bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Find Traders\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                  {copyTraders.map((trader) => (\n                    <Card key={trader.id} className=\"bg-gray-900/50 border-gray-600\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center space-x-3 mb-4\">\n                          <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold\">\n                            {trader.avatar}\n                          </div>\n                          <div>\n                            <p className=\"font-semibold text-white\">{trader.name}</p>\n                            <p className=\"text-gray-400 text-sm\">{trader.followers.toLocaleString()} followers</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                          <div>\n                            <p className=\"text-gray-400 text-sm\">Monthly Return</p>\n                            <p className=\"text-green-400 font-semibold\">{formatPercent(trader.monthlyReturn)}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-400 text-sm\">Win Rate</p>\n                            <p className=\"text-white font-semibold\">{trader.winRate}%</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-400 text-sm\">Total Return</p>\n                            <p className=\"text-green-400 font-semibold\">{formatPercent(trader.totalReturn)}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-400 text-sm\">Risk Score</p>\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"flex space-x-1\">\n                                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((i) => (\n                                  <div\n                                    key={i}\n                                    className={cn(\n                                      \"w-2 h-2 rounded-full\",\n                                      i <= trader.riskScore ? \"bg-orange-400\" : \"bg-gray-600\"\n                                    )}\n                                  />\n                                ))}\n                              </div>\n                              <span className=\"text-orange-400 text-sm\">{trader.riskScore}/10</span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {trader.isFollowing ? (\n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-gray-400 text-sm\">Copied Amount</span>\n                              <span className=\"text-white font-semibold\">{formatCurrency(trader.copiedAmount)}</span>\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <Button variant=\"outline\" size=\"sm\" className=\"flex-1 border-gray-600 text-gray-300\">\n                                <Settings className=\"w-4 h-4 mr-2\" />\n                                Settings\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" className=\"border-red-500 text-red-400 hover:bg-red-500 hover:text-white\">\n                                Unfollow\n                              </Button>\n                            </div>\n                          </div>\n                        ) : (\n                          <Button className=\"w-full bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Follow Trader\n                          </Button>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Subscription Tab */}\n          <TabsContent value=\"subscription\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Current Plan */}\n              <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Crown className=\"w-5 h-5 text-orange-400 mr-2\" />\n                    Current Plan\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-2xl font-bold text-white\">{subscriptionData.plan}</p>\n                        <p className=\"text-gray-400\">{formatCurrency(subscriptionData.amount)}/year</p>\n                      </div>\n                      <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                        {subscriptionData.status}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <p className=\"font-semibold text-white\">Features Included:</p>\n                      {subscriptionData.features.map((feature, index) => (\n                        <div key={index} className=\"flex items-center space-x-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                          <span className=\"text-gray-300\">{feature}</span>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <div className=\"pt-4 border-t border-gray-700\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-gray-400\">Next billing date</span>\n                        <span className=\"text-white\">{formatDate(subscriptionData.nextBilling)}</span>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"outline\" className=\"flex-1 border-gray-600 text-gray-300\">\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Update Payment\n                        </Button>\n                        <Button variant=\"outline\" className=\"border-red-500 text-red-400 hover:bg-red-500 hover:text-white\">\n                          Cancel Plan\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Usage Statistics */}\n              <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n                <CardHeader>\n                  <CardTitle>Usage Statistics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-gray-300\">Trades This Month</span>\n                        <span className=\"text-white font-semibold\">\n                          {subscriptionData.usage.trades.used.toLocaleString()}\n                          {subscriptionData.usage.trades.limit > 0 && ` / ${subscriptionData.usage.trades.limit.toLocaleString()}`}\n                        </span>\n                      </div>\n                      {subscriptionData.usage.trades.limit > 0 && (\n                        <Progress \n                          value={(subscriptionData.usage.trades.used / subscriptionData.usage.trades.limit) * 100} \n                          className=\"h-2\"\n                        />\n                      )}\n                      <p className=\"text-gray-400 text-sm mt-1\">\n                        {subscriptionData.usage.trades.limit === -1 ? 'Unlimited' : `${subscriptionData.usage.trades.limit - subscriptionData.usage.trades.used} remaining`}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-gray-300\">Copy Traders</span>\n                        <span className=\"text-white font-semibold\">\n                          {subscriptionData.usage.copyTraders.used} / {subscriptionData.usage.copyTraders.limit}\n                        </span>\n                      </div>\n                      <Progress \n                        value={(subscriptionData.usage.copyTraders.used / subscriptionData.usage.copyTraders.limit) * 100} \n                        className=\"h-2\"\n                      />\n                      <p className=\"text-gray-400 text-sm mt-1\">\n                        {subscriptionData.usage.copyTraders.limit - subscriptionData.usage.copyTraders.used} slots available\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-gray-300\">AI Insights Used</span>\n                        <span className=\"text-white font-semibold\">\n                          {subscriptionData.usage.aiInsights.used}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-400 text-sm\">\n                        Unlimited AI insights included\n                      </p>\n                    </div>\n                    \n                    <div className=\"pt-4 border-t border-gray-700\">\n                      <Button className=\"w-full bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600\">\n                        <Crown className=\"w-4 h-4 mr-2\" />\n                        Upgrade Plan\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Bank Account Management */}\n            <div className=\"mt-8\">\n              <BankAccountManagement />\n            </div>\n          </TabsContent>\n\n          {/* Scheduled Transactions Tab */}\n          <TabsContent value=\"scheduled\" className=\"space-y-6\">\n            <ScheduledTransactionsTab />\n          </TabsContent>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Profile Information */}\n              <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Profile Information</CardTitle>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setIsEditing(!isEditing)}\n                      className=\"text-gray-400 hover:text-white\"\n                    >\n                      {isEditing ? <X className=\"w-4 h-4\" /> : <Edit className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-20 h-20 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center text-2xl font-bold text-white\">\n                        {userProfile.name.split(' ').map(n => n[0]).join('')}\n                      </div>\n                      <div>\n                        <p className=\"text-xl font-bold text-white\">{userProfile.name}</p>\n                        <p className=\"text-gray-400\">Member since {formatDate(userProfile.joinDate)}</p>\n                        {userProfile.verified && (\n                          <Badge className=\"mt-1 bg-green-500/20 text-green-400 border-green-500/30\">\n                            <CheckCircle className=\"w-3 h-3 mr-1\" />\n                            Verified\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Mail className=\"w-5 h-5 text-gray-400\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-gray-400 text-sm\">Email</p>\n                          <p className=\"text-white\">{userProfile.email}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-3\">\n                        <Phone className=\"w-5 h-5 text-gray-400\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-gray-400 text-sm\">Phone</p>\n                          <p className=\"text-white\">{userProfile.phone}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-3\">\n                        <MapPin className=\"w-5 h-5 text-gray-400\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-gray-400 text-sm\">Location</p>\n                          <p className=\"text-white\">{userProfile.location}</p>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {isEditing && (\n                      <div className=\"flex space-x-2 pt-4 border-t border-gray-700\">\n                        <Button className=\"flex-1 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600\">\n                          <Check className=\"w-4 h-4 mr-2\" />\n                          Save Changes\n                        </Button>\n                        <Button variant=\"outline\" onClick={() => setIsEditing(false)} className=\"border-gray-600 text-gray-300\">\n                          Cancel\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Security Settings */}\n              <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-xl\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Shield className=\"w-5 h-5 text-green-400 mr-2\" />\n                    Security Settings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-white font-semibold\">Two-Factor Authentication</p>\n                        <p className=\"text-gray-400 text-sm\">Add an extra layer of security to your account</p>\n                      </div>\n                      <Badge className={cn(\n                        userProfile.twoFactorEnabled \n                          ? \"bg-green-500/20 text-green-400 border-green-500/30\" \n                          : \"bg-red-500/20 text-red-400 border-red-500/30\"\n                      )}>\n                        {userProfile.twoFactorEnabled ? 'Enabled' : 'Disabled'}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <Button variant=\"outline\" className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-800\">\n                        <Key className=\"w-4 h-4 mr-2\" />\n                        Change Password\n                      </Button>\n                      \n                      <Button variant=\"outline\" className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-800\">\n                        <Smartphone className=\"w-4 h-4 mr-2\" />\n                        Manage 2FA\n                      </Button>\n                      \n                      <Button variant=\"outline\" className=\"w-full border-gray-600 text-gray-300 hover:bg-gray-800\">\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download Account Data\n                      </Button>\n                    </div>\n                    \n                    <div className=\"pt-4 border-t border-gray-700\">\n                      <div className=\"flex items-center space-x-2 mb-3\">\n                        <AlertTriangle className=\"w-5 h-5 text-orange-400\" />\n                        <span className=\"text-orange-400 font-semibold\">Danger Zone</span>\n                      </div>\n                      <Button variant=\"outline\" className=\"w-full border-red-500 text-red-400 hover:bg-red-500 hover:text-white\">\n                        Delete Account\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n\nexport default UserDashboard"],"names":[],"mappings":"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","debugId":null}}]
}