{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/dashboard/TradingPanel.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  Target,\n  Zap,\n  Bot,\n  Settings,\n  Play,\n  Pause,\n  Square,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  BarChart3,\n  Activity,\n  Layers,\n  Shield\n} from 'lucide-react';\n\ninterface MarketData {\n  symbol: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  high24h: number;\n  low24h: number;\n}\n\ninterface Order {\n  id: string;\n  symbol: string;\n  type: 'buy' | 'sell';\n  orderType: 'market' | 'limit' | 'stop';\n  quantity: number;\n  price?: number;\n  stopPrice?: number;\n  status: 'pending' | 'filled' | 'cancelled' | 'partial';\n  timestamp: Date;\n  filled: number;\n}\n\ninterface Strategy {\n  id: string;\n  name: string;\n  description: string;\n  status: 'active' | 'paused' | 'stopped';\n  winRate: number;\n  profitFactor: number;\n  totalTrades: number;\n  pnl: number;\n  drawdown: number;\n}\n\ninterface Signal {\n  id: string;\n  symbol: string;\n  type: 'buy' | 'sell';\n  confidence: number;\n  entry: number;\n  stopLoss: number;\n  takeProfit: number;\n  timestamp: Date;\n  status: 'active' | 'executed' | 'expired';\n}\n\nexport default function TradingPanel() {\n  const [activeTab, setActiveTab] = useState<'manual' | 'auto' | 'signals' | 'orders'>('manual');\n  const [selectedSymbol, setSelectedSymbol] = useState('AAPL');\n  const [orderType, setOrderType] = useState<'market' | 'limit' | 'stop'>('market');\n  const [tradeType, setTradeType] = useState<'buy' | 'sell'>('buy');\n  const [quantity, setQuantity] = useState('');\n  const [price, setPrice] = useState('');\n  const [stopLoss, setStopLoss] = useState('');\n  const [takeProfit, setTakeProfit] = useState('');\n  const [riskAmount, setRiskAmount] = useState('100');\n  const [autoTradingEnabled, setAutoTradingEnabled] = useState(false);\n\n  const [marketData, setMarketData] = useState<MarketData[]>([\n    {\n      symbol: 'AAPL',\n      price: 185.25,\n      change: 2.85,\n      changePercent: 1.56,\n      volume: 45678900,\n      high24h: 187.50,\n      low24h: 182.10\n    },\n    {\n      symbol: 'TSLA',\n      price: 245.80,\n      change: -5.25,\n      changePercent: -2.09,\n      volume: 32456700,\n      high24h: 252.30,\n      low24h: 243.50\n    },\n    {\n      symbol: 'BTC',\n      price: 43250.00,\n      change: 850.00,\n      changePercent: 2.01,\n      volume: 28945600,\n      high24h: 44100.00,\n      low24h: 42100.00\n    }\n  ]);\n\n  const [orders, setOrders] = useState<Order[]>([\n    {\n      id: '1',\n      symbol: 'AAPL',\n      type: 'buy',\n      orderType: 'limit',\n      quantity: 100,\n      price: 180.00,\n      status: 'pending',\n      timestamp: new Date(Date.now() - 30 * 60 * 1000),\n      filled: 0\n    },\n    {\n      id: '2',\n      symbol: 'TSLA',\n      type: 'sell',\n      orderType: 'market',\n      quantity: 50,\n      status: 'filled',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      filled: 50\n    }\n  ]);\n\n  const [strategies, setStrategies] = useState<Strategy[]>([\n    {\n      id: '1',\n      name: 'GainzAlgo V2 Pro',\n      description: 'High-frequency momentum strategy with 78% win rate',\n      status: 'active',\n      winRate: 78.5,\n      profitFactor: 1.85,\n      totalTrades: 247,\n      pnl: 12450.75,\n      drawdown: 3.2\n    },\n    {\n      id: '2',\n      name: 'Crypto Scalper',\n      description: 'Short-term crypto trading with automated risk management',\n      status: 'paused',\n      winRate: 72.3,\n      profitFactor: 1.62,\n      totalTrades: 189,\n      pnl: 8920.50,\n      drawdown: 5.8\n    }\n  ]);\n\n  const [signals, setSignals] = useState<Signal[]>([\n    {\n      id: '1',\n      symbol: 'AAPL',\n      type: 'buy',\n      confidence: 85,\n      entry: 184.50,\n      stopLoss: 180.00,\n      takeProfit: 192.00,\n      timestamp: new Date(Date.now() - 15 * 60 * 1000),\n      status: 'active'\n    },\n    {\n      id: '2',\n      symbol: 'BTC',\n      type: 'sell',\n      confidence: 78,\n      entry: 43100.00,\n      stopLoss: 44500.00,\n      takeProfit: 41200.00,\n      timestamp: new Date(Date.now() - 45 * 60 * 1000),\n      status: 'active'\n    }\n  ]);\n\n  const currentMarketData = marketData.find(data => data.symbol === selectedSymbol);\n\n  const handlePlaceOrder = () => {\n    const newOrder: Order = {\n      id: Date.now().toString(),\n      symbol: selectedSymbol,\n      type: tradeType,\n      orderType,\n      quantity: parseFloat(quantity),\n      price: orderType !== 'market' ? parseFloat(price) : undefined,\n      status: 'pending',\n      timestamp: new Date(),\n      filled: 0\n    };\n    \n    setOrders(prev => [newOrder, ...prev]);\n    \n    // Reset form\n    setQuantity('');\n    setPrice('');\n  };\n\n  const toggleStrategy = (strategyId: string) => {\n    setStrategies(prev => prev.map(strategy => \n      strategy.id === strategyId \n        ? { ...strategy, status: strategy.status === 'active' ? 'paused' : 'active' }\n        : strategy\n    ));\n  };\n\n  const executeSignal = (signalId: string) => {\n    setSignals(prev => prev.map(signal => \n      signal.id === signalId \n        ? { ...signal, status: 'executed' }\n        : signal\n    ));\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatPercent = (percent: number) => {\n    return `${percent >= 0 ? '+' : ''}${percent.toFixed(2)}%`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 dark:text-green-400';\n      case 'paused': return 'text-yellow-600 dark:text-yellow-400';\n      case 'stopped': return 'text-red-600 dark:text-red-400';\n      case 'pending': return 'text-blue-600 dark:text-blue-400';\n      case 'filled': return 'text-green-600 dark:text-green-400';\n      case 'cancelled': return 'text-red-600 dark:text-red-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active': return <Play className=\"h-4 w-4\" />;\n      case 'paused': return <Pause className=\"h-4 w-4\" />;\n      case 'stopped': return <Square className=\"h-4 w-4\" />;\n      case 'pending': return <Clock className=\"h-4 w-4\" />;\n      case 'filled': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'cancelled': return <AlertTriangle className=\"h-4 w-4\" />;\n      default: return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">Trading Panel</h2>\n          <div className=\"flex items-center space-x-2\">\n            <div className={`flex items-center space-x-2 px-3 py-1 rounded-full text-sm font-medium ${\n              autoTradingEnabled \n                ? 'bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300'\n                : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'\n            }`}>\n              <Bot className=\"h-4 w-4\" />\n              <span>Auto Trading {autoTradingEnabled ? 'ON' : 'OFF'}</span>\n            </div>\n            <button\n              onClick={() => setAutoTradingEnabled(!autoTradingEnabled)}\n              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                autoTradingEnabled ? 'bg-green-600' : 'bg-gray-300 dark:bg-gray-600'\n              }`}\n            >\n              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                autoTradingEnabled ? 'translate-x-6' : 'translate-x-1'\n              }`} />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200 dark:border-gray-700\">\n        <nav className=\"flex space-x-8 px-6\">\n          {[\n            { id: 'manual', label: 'Manual Trading', icon: Target },\n            { id: 'auto', label: 'Auto Strategies', icon: Bot },\n            { id: 'signals', label: 'Signals', icon: Zap },\n            { id: 'orders', label: 'Orders', icon: Layers }\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                  : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-6\">\n        {activeTab === 'manual' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Order Form */}\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Place Order</h3>\n                \n                {/* Symbol Selection */}\n                <div className=\"mb-4\">\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Symbol\n                  </label>\n                  <select\n                    value={selectedSymbol}\n                    onChange={(e) => setSelectedSymbol(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    {marketData.map((data) => (\n                      <option key={data.symbol} value={data.symbol}>\n                        {data.symbol} - {formatCurrency(data.price)}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Trade Type */}\n                <div className=\"mb-4\">\n                  <div className=\"flex space-x-2\">\n                    <button\n                      onClick={() => setTradeType('buy')}\n                      className={`flex-1 py-2 px-4 rounded-lg font-medium transition-colors ${\n                        tradeType === 'buy'\n                          ? 'bg-green-600 text-white'\n                          : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'\n                      }`}\n                    >\n                      Buy\n                    </button>\n                    <button\n                      onClick={() => setTradeType('sell')}\n                      className={`flex-1 py-2 px-4 rounded-lg font-medium transition-colors ${\n                        tradeType === 'sell'\n                          ? 'bg-red-600 text-white'\n                          : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'\n                      }`}\n                    >\n                      Sell\n                    </button>\n                  </div>\n                </div>\n\n                {/* Order Type */}\n                <div className=\"mb-4\">\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Order Type\n                  </label>\n                  <select\n                    value={orderType}\n                    onChange={(e) => setOrderType(e.target.value as any)}\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"market\">Market</option>\n                    <option value=\"limit\">Limit</option>\n                    <option value=\"stop\">Stop</option>\n                  </select>\n                </div>\n\n                {/* Quantity */}\n                <div className=\"mb-4\">\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Quantity\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={quantity}\n                    onChange={(e) => setQuantity(e.target.value)}\n                    placeholder=\"Enter quantity\"\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                </div>\n\n                {/* Price (for limit/stop orders) */}\n                {orderType !== 'market' && (\n                  <div className=\"mb-4\">\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                      Price\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={price}\n                      onChange={(e) => setPrice(e.target.value)}\n                      placeholder=\"Enter price\"\n                      step=\"0.01\"\n                      className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                )}\n\n                {/* Risk Management */}\n                <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                      Stop Loss\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={stopLoss}\n                      onChange={(e) => setStopLoss(e.target.value)}\n                      placeholder=\"Stop loss\"\n                      step=\"0.01\"\n                      className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                      Take Profit\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={takeProfit}\n                      onChange={(e) => setTakeProfit(e.target.value)}\n                      placeholder=\"Take profit\"\n                      step=\"0.01\"\n                      className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </div>\n\n                {/* Place Order Button */}\n                <button\n                  onClick={handlePlaceOrder}\n                  disabled={!quantity || (orderType !== 'market' && !price)}\n                  className={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${\n                    tradeType === 'buy'\n                      ? 'bg-green-600 hover:bg-green-700 disabled:bg-green-400'\n                      : 'bg-red-600 hover:bg-red-700 disabled:bg-red-400'\n                  } text-white disabled:cursor-not-allowed`}\n                >\n                  Place {tradeType.toUpperCase()} Order\n                </button>\n              </div>\n            </div>\n\n            {/* Market Data */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Market Data</h3>\n              {currentMarketData && (\n                <div className=\"bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4 mb-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                      {currentMarketData.symbol}\n                    </h4>\n                    <div className={`flex items-center space-x-1 ${\n                      currentMarketData.change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n                    }`}>\n                      {currentMarketData.change >= 0 ? <TrendingUp className=\"h-4 w-4\" /> : <TrendingDown className=\"h-4 w-4\" />}\n                      <span className=\"font-medium\">{formatPercent(currentMarketData.changePercent)}</span>\n                    </div>\n                  </div>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n                    {formatCurrency(currentMarketData.price)}\n                  </p>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-400\">24h High</p>\n                      <p className=\"font-medium text-gray-900 dark:text-white\">\n                        {formatCurrency(currentMarketData.high24h)}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-400\">24h Low</p>\n                      <p className=\"font-medium text-gray-900 dark:text-white\">\n                        {formatCurrency(currentMarketData.low24h)}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-400\">Volume</p>\n                      <p className=\"font-medium text-gray-900 dark:text-white\">\n                        {currentMarketData.volume.toLocaleString()}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-400\">Change</p>\n                      <p className={`font-medium ${\n                        currentMarketData.change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n                      }`}>\n                        {formatCurrency(currentMarketData.change)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'auto' && (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Automated Strategies</h3>\n              <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors\">\n                Add Strategy\n              </button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {strategies.map((strategy) => (\n                <div key={strategy.id} className=\"bg-gray-50 dark:bg-gray-700/50 rounded-lg p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white\">{strategy.name}</h4>\n                      <p className=\"text-gray-600 dark:text-gray-400\">{strategy.description}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <span className={`flex items-center space-x-1 text-sm font-medium ${getStatusColor(strategy.status)}`}>\n                        {getStatusIcon(strategy.status)}\n                        <span className=\"capitalize\">{strategy.status}</span>\n                      </span>\n                      <button\n                        onClick={() => toggleStrategy(strategy.id)}\n                        className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                          strategy.status === 'active'\n                            ? 'bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 hover:bg-red-200 dark:hover:bg-red-900/40'\n                            : 'bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300 hover:bg-green-200 dark:hover:bg-green-900/40'\n                        }`}\n                      >\n                        {strategy.status === 'active' ? 'Pause' : 'Start'}\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Win Rate</p>\n                      <p className=\"text-lg font-semibold text-green-600 dark:text-green-400\">\n                        {strategy.winRate}%\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Profit Factor</p>\n                      <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        {strategy.profitFactor}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Trades</p>\n                      <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        {strategy.totalTrades}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">P&L</p>\n                      <p className={`text-lg font-semibold ${\n                        strategy.pnl >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n                      }`}>\n                        {formatCurrency(strategy.pnl)}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Drawdown</p>\n                      <p className=\"text-lg font-semibold text-red-600 dark:text-red-400\">\n                        -{strategy.drawdown}%\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'signals' && (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Trading Signals</h3>\n            \n            <div className=\"space-y-4\">\n              {signals.map((signal) => (\n                <div key={signal.id} className=\"bg-gray-50 dark:bg-gray-700/50 rounded-lg p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n                        signal.type === 'buy' ? 'bg-green-100 dark:bg-green-900/20' : 'bg-red-100 dark:bg-red-900/20'\n                      }`}>\n                        {signal.type === 'buy' ? (\n                          <TrendingUp className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                        ) : (\n                          <TrendingDown className=\"h-6 w-6 text-red-600 dark:text-red-400\" />\n                        )}\n                      </div>\n                      <div>\n                        <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                          {signal.type.toUpperCase()} {signal.symbol}\n                        </h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          Confidence: {signal.confidence}% • {signal.timestamp.toLocaleTimeString()}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {signal.status === 'active' && (\n                      <button\n                        onClick={() => executeSignal(signal.id)}\n                        className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                          signal.type === 'buy'\n                            ? 'bg-green-600 hover:bg-green-700 text-white'\n                            : 'bg-red-600 hover:bg-red-700 text-white'\n                        }`}\n                      >\n                        Execute\n                      </button>\n                    )}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Entry Price</p>\n                      <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        {formatCurrency(signal.entry)}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Stop Loss</p>\n                      <p className=\"text-lg font-semibold text-red-600 dark:text-red-400\">\n                        {formatCurrency(signal.stopLoss)}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Take Profit</p>\n                      <p className=\"text-lg font-semibold text-green-600 dark:text-green-400\">\n                        {formatCurrency(signal.takeProfit)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'orders' && (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Order Management</h3>\n            \n            <div className=\"space-y-4\">\n              {orders.map((order) => (\n                <div key={order.id} className=\"bg-gray-50 dark:bg-gray-700/50 rounded-lg p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                        order.type === 'buy' ? 'bg-green-100 dark:bg-green-900/20' : 'bg-red-100 dark:bg-red-900/20'\n                      }`}>\n                        {order.type === 'buy' ? (\n                          <TrendingUp className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                        ) : (\n                          <TrendingDown className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                        )}\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">\n                          {order.type.toUpperCase()} {order.symbol}\n                        </h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {order.orderType.toUpperCase()} • {order.quantity} shares\n                          {order.price && ` @ ${formatCurrency(order.price)}`}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-500\">\n                          {order.timestamp.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <span className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(order.status)}`}>\n                        {getStatusIcon(order.status)}\n                        <span className=\"capitalize\">{order.status}</span>\n                      </span>\n                      {order.status === 'partial' && (\n                        <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">\n                          Filled: {order.filled}/{order.quantity}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}