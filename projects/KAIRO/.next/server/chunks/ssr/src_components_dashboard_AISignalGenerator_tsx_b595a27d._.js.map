{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/dashboard/AISignalGenerator.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Brain, \n  TrendingUp, \n  TrendingDown, \n  Zap, \n  Target, \n  BarChart3, \n  Activity, \n  Settings, \n  Play, \n  Pause, \n  RefreshCw,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  Percent,\n  Eye,\n  Filter,\n  Download,\n  Upload\n} from 'lucide-react';\n\ninterface AIModel {\n  id: string;\n  name: string;\n  type: 'neural_network' | 'random_forest' | 'svm' | 'lstm' | 'transformer';\n  accuracy: number;\n  status: 'training' | 'active' | 'inactive' | 'error';\n  lastTrained: string;\n  signals: number;\n  winRate: number;\n  description: string;\n}\n\ninterface Signal {\n  id: string;\n  symbol: string;\n  type: 'BUY' | 'SELL';\n  confidence: number;\n  price: number;\n  timestamp: string;\n  model: string;\n  reasoning: string[];\n  status: 'pending' | 'executed' | 'expired';\n  expectedReturn: number;\n  riskLevel: 'low' | 'medium' | 'high';\n}\n\ninterface MarketData {\n  symbol: string;\n  price: number;\n  change: number;\n  volume: number;\n  volatility: number;\n  sentiment: number;\n  technicalScore: number;\n  fundamentalScore: number;\n}\n\nconst AISignalGenerator: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('signals');\n  const [selectedModel, setSelectedModel] = useState<string>('ensemble');\n  const [autoTrading, setAutoTrading] = useState(false);\n  const [signalFilter, setSignalFilter] = useState('all');\n  const [confidenceThreshold, setConfidenceThreshold] = useState(75);\n\n  // Mock data\n  const [aiModels] = useState<AIModel[]>([\n    {\n      id: 'ensemble',\n      name: 'Ensemble Model',\n      type: 'neural_network',\n      accuracy: 87.3,\n      status: 'active',\n      lastTrained: '2024-01-15',\n      signals: 1247,\n      winRate: 73.2,\n      description: 'Advanced ensemble combining multiple ML models'\n    },\n    {\n      id: 'lstm',\n      name: 'LSTM Predictor',\n      type: 'lstm',\n      accuracy: 82.1,\n      status: 'active',\n      lastTrained: '2024-01-14',\n      signals: 892,\n      winRate: 68.9,\n      description: 'Long Short-Term Memory network for time series prediction'\n    },\n    {\n      id: 'transformer',\n      name: 'Transformer Model',\n      type: 'transformer',\n      accuracy: 84.7,\n      status: 'training',\n      lastTrained: '2024-01-13',\n      signals: 634,\n      winRate: 71.4,\n      description: 'Attention-based transformer for market pattern recognition'\n    },\n    {\n      id: 'random_forest',\n      name: 'Random Forest',\n      type: 'random_forest',\n      accuracy: 79.5,\n      status: 'active',\n      lastTrained: '2024-01-12',\n      signals: 1156,\n      winRate: 65.8,\n      description: 'Ensemble of decision trees for robust predictions'\n    }\n  ]);\n\n  const [signals] = useState<Signal[]>([\n    {\n      id: '1',\n      symbol: 'BTCUSDT',\n      type: 'BUY',\n      confidence: 89.2,\n      price: 45250,\n      timestamp: '2024-01-15 14:30:00',\n      model: 'Ensemble Model',\n      reasoning: ['Strong bullish momentum', 'Volume spike detected', 'Support level confirmed'],\n      status: 'pending',\n      expectedReturn: 12.5,\n      riskLevel: 'medium'\n    },\n    {\n      id: '2',\n      symbol: 'ETHUSDT',\n      type: 'SELL',\n      confidence: 76.8,\n      price: 2850,\n      timestamp: '2024-01-15 14:25:00',\n      model: 'LSTM Predictor',\n      reasoning: ['Resistance level reached', 'Bearish divergence', 'Overbought conditions'],\n      status: 'executed',\n      expectedReturn: 8.3,\n      riskLevel: 'low'\n    },\n    {\n      id: '3',\n      symbol: 'ADAUSDT',\n      type: 'BUY',\n      confidence: 82.4,\n      price: 0.485,\n      timestamp: '2024-01-15 14:20:00',\n      model: 'Transformer Model',\n      reasoning: ['Breakout pattern forming', 'Positive sentiment shift', 'Volume accumulation'],\n      status: 'pending',\n      expectedReturn: 15.7,\n      riskLevel: 'high'\n    }\n  ]);\n\n  const [marketData] = useState<MarketData[]>([\n    {\n      symbol: 'BTCUSDT',\n      price: 45250,\n      change: 2.34,\n      volume: 1250000,\n      volatility: 0.045,\n      sentiment: 0.72,\n      technicalScore: 78,\n      fundamentalScore: 85\n    },\n    {\n      symbol: 'ETHUSDT',\n      price: 2850,\n      change: -1.23,\n      volume: 890000,\n      volatility: 0.038,\n      sentiment: 0.45,\n      technicalScore: 65,\n      fundamentalScore: 72\n    },\n    {\n      symbol: 'ADAUSDT',\n      price: 0.485,\n      change: 5.67,\n      volume: 450000,\n      volatility: 0.062,\n      sentiment: 0.68,\n      technicalScore: 82,\n      fundamentalScore: 69\n    }\n  ]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'training': return 'bg-yellow-100 text-yellow-800';\n      case 'inactive': return 'bg-gray-100 text-gray-800';\n      case 'error': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getSignalStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-blue-100 text-blue-800';\n      case 'executed': return 'bg-green-100 text-green-800';\n      case 'expired': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low': return 'bg-green-100 text-green-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'high': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const filteredSignals = signals.filter(signal => {\n    if (signalFilter === 'all') return true;\n    if (signalFilter === 'high-confidence') return signal.confidence >= 80;\n    if (signalFilter === 'pending') return signal.status === 'pending';\n    if (signalFilter === 'executed') return signal.status === 'executed';\n    return true;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">AI Signal Generator</h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">Advanced machine learning powered trading signals</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Label htmlFor=\"auto-trading\">Auto Trading</Label>\n            <Switch\n              id=\"auto-trading\"\n              checked={autoTrading}\n              onCheckedChange={setAutoTrading}\n            />\n          </div>\n          <Button>\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Configure\n          </Button>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Active Signals</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">12</p>\n              </div>\n              <Zap className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Avg Confidence</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">84.2%</p>\n              </div>\n              <Target className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Win Rate</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">72.8%</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Models Active</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">3/4</p>\n              </div>\n              <Brain className=\"h-8 w-8 text-purple-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"signals\">Live Signals</TabsTrigger>\n          <TabsTrigger value=\"models\">AI Models</TabsTrigger>\n          <TabsTrigger value=\"analysis\">Market Analysis</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"signals\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Live Trading Signals\n                </CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <select \n                    value={signalFilter} \n                    onChange={(e) => setSignalFilter(e.target.value)}\n                    className=\"px-3 py-1 border border-gray-300 rounded-md text-sm\"\n                  >\n                    <option value=\"all\">All Signals</option>\n                    <option value=\"high-confidence\">High Confidence</option>\n                    <option value=\"pending\">Pending</option>\n                    <option value=\"executed\">Executed</option>\n                  </select>\n                  <Button size=\"sm\" variant=\"outline\">\n                    <RefreshCw className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredSignals.map((signal) => (\n                  <div key={signal.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge className={signal.type === 'BUY' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                          {signal.type}\n                        </Badge>\n                        <span className=\"font-semibold text-lg\">{signal.symbol}</span>\n                        <Badge className={getSignalStatusColor(signal.status)}>\n                          {signal.status}\n                        </Badge>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">{signal.timestamp}</p>\n                        <p className=\"font-semibold\">${signal.price.toLocaleString()}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-3\">\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Confidence</p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Progress value={signal.confidence} className=\"flex-1\" />\n                          <span className=\"text-sm font-medium\">{signal.confidence}%</span>\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Expected Return</p>\n                        <p className=\"font-semibold text-green-600\">+{signal.expectedReturn}%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Risk Level</p>\n                        <Badge className={getRiskColor(signal.riskLevel)}>\n                          {signal.riskLevel}\n                        </Badge>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Model</p>\n                        <p className=\"font-medium\">{signal.model}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mb-3\">\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">AI Reasoning:</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {signal.reasoning.map((reason, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            {reason}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    {signal.status === 'pending' && (\n                      <div className=\"flex space-x-2\">\n                        <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\n                          Execute Trade\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\">\n                          View Details\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\">\n                          Dismiss\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"models\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"h-5 w-5\" />\n                AI Models Management\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {aiModels.map((model) => (\n                  <div key={model.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-semibold text-lg\">{model.name}</h3>\n                      <Badge className={getStatusColor(model.status)}>\n                        {model.status}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">{model.description}</p>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</p>\n                        <p className=\"font-semibold text-green-600\">{model.accuracy}%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Win Rate</p>\n                        <p className=\"font-semibold\">{model.winRate}%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Signals Generated</p>\n                        <p className=\"font-semibold\">{model.signals.toLocaleString()}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Last Trained</p>\n                        <p className=\"font-semibold\">{model.lastTrained}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      {model.status === 'active' ? (\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Pause className=\"h-4 w-4 mr-1\" />\n                          Pause\n                        </Button>\n                      ) : (\n                        <Button size=\"sm\">\n                          <Play className=\"h-4 w-4 mr-1\" />\n                          Activate\n                        </Button>\n                      )}\n                      <Button size=\"sm\" variant=\"outline\">\n                        <RefreshCw className=\"h-4 w-4 mr-1\" />\n                        Retrain\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Settings className=\"h-4 w-4 mr-1\" />\n                        Configure\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analysis\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Real-time Market Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {marketData.map((data) => (\n                  <div key={data.symbol} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"font-semibold text-lg\">{data.symbol}</span>\n                        <Badge className={data.change >= 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                          {data.change >= 0 ? '+' : ''}{data.change}%\n                        </Badge>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-lg\">${data.price.toLocaleString()}</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Volume: {data.volume.toLocaleString()}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Volatility</p>\n                        <Progress value={data.volatility * 1000} className=\"mt-1\" />\n                        <p className=\"text-xs mt-1\">{(data.volatility * 100).toFixed(2)}%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Sentiment</p>\n                        <Progress value={data.sentiment * 100} className=\"mt-1\" />\n                        <p className=\"text-xs mt-1\">{(data.sentiment * 100).toFixed(0)}%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Technical Score</p>\n                        <Progress value={data.technicalScore} className=\"mt-1\" />\n                        <p className=\"text-xs mt-1\">{data.technicalScore}/100</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Fundamental Score</p>\n                        <Progress value={data.fundamentalScore} className=\"mt-1\" />\n                        <p className=\"text-xs mt-1\">{data.fundamentalScore}/100</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                AI Signal Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"confidence-threshold\">Minimum Confidence Threshold</Label>\n                <div className=\"flex items-center space-x-4 mt-2\">\n                  <input\n                    type=\"range\"\n                    id=\"confidence-threshold\"\n                    min=\"50\"\n                    max=\"95\"\n                    value={confidenceThreshold}\n                    onChange={(e) => setConfidenceThreshold(Number(e.target.value))}\n                    className=\"flex-1\"\n                  />\n                  <span className=\"font-semibold\">{confidenceThreshold}%</span>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold mb-3\">Signal Preferences</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Enable BUY signals</Label>\n                      <Switch defaultChecked />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Enable SELL signals</Label>\n                      <Switch defaultChecked />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <Label>High-risk signals</Label>\n                      <Switch />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <Label>Real-time notifications</Label>\n                      <Switch defaultChecked />\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-3\">Risk Management</h4>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <Label htmlFor=\"max-position\">Max Position Size (%)</Label>\n                      <Input id=\"max-position\" type=\"number\" defaultValue=\"5\" className=\"mt-1\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"stop-loss\">Default Stop Loss (%)</Label>\n                      <Input id=\"stop-loss\" type=\"number\" defaultValue=\"2\" className=\"mt-1\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"take-profit\">Default Take Profit (%)</Label>\n                      <Input id=\"take-profit\" type=\"number\" defaultValue=\"6\" className=\"mt-1\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex space-x-4\">\n                <Button>\n                  Save Settings\n                </Button>\n                <Button variant=\"outline\">\n                  Reset to Default\n                </Button>\n                <Button variant=\"outline\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Config\n                </Button>\n                <Button variant=\"outline\">\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  Import Config\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default AISignalGenerator;"],"names":[],"mappings":"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","debugId":null}}]
}