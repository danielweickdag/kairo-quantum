{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/tradingService.ts"],"sourcesContent":["import axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { errorHandler, handleNetworkError, handleTradingError, handleValidationError } from '@/lib/errorHandler';\n\n// Market types supported by GainzAlgo integration\nexport type MarketType = 'STOCKS' | 'CRYPTO' | 'FOREX';\nexport type TimeFrame = '1m' | '5m' | '15m' | '30m' | '1h' | '4h' | '1d' | '1w';\nexport type SignalType = 'BUY' | 'SELL' | 'HOLD';\n\n// GainzAlgo Signal Interface\nexport interface TradingSignal {\n  id: string;\n  symbol: string;\n  marketType: MarketType;\n  signalType: SignalType;\n  confidence: number; // 0-100%\n  entryPrice: number;\n  stopLoss: number;\n  takeProfit: number;\n  timeFrame: TimeFrame;\n  timestamp: string;\n  riskRewardRatio: number;\n  profitFactor?: number;\n}\n\n// Enhanced Trade Request with GainzAlgo features\nexport interface CreateTradeRequest {\n  portfolioId: string;\n  symbol: string;\n  marketType: MarketType;\n  side: 'BUY' | 'SELL';\n  quantity: number;\n  price: number;\n  stopLoss?: number;\n  takeProfit?: number;\n  orderType?: 'MARKET' | 'LIMIT' | 'STOP';\n  signalId?: string; // Reference to GainzAlgo signal\n  timeFrame?: TimeFrame;\n  brokerAccountId?: string; // Selected broker account for execution\n  brokerConnectionId?: string; // Broker connection ID\n}\n\n// Enhanced Trade interface with GainzAlgo features\nexport interface Trade {\n  id: string;\n  symbol: string;\n  userId: string;\n  portfolioId: string;\n  marketType: MarketType;\n  side: 'BUY' | 'SELL';\n  quantity: number;\n  price: number;\n  stopLoss?: number;\n  takeProfit?: number;\n  totalValue: number;\n  status: 'PENDING' | 'EXECUTED' | 'CANCELLED' | 'FAILED';\n  executedAt?: string;\n  createdAt: string;\n  signalId?: string;\n  timeFrame?: TimeFrame;\n  actualPnL?: number;\n  winRate?: number;\n  profitFactor?: number;\n  portfolio?: {\n    id: string;\n    name: string;\n  };\n}\n\n// Performance Tracking Interfaces\nexport interface PerformanceMetrics {\n  totalTrades: number;\n  winningTrades: number;\n  losingTrades: number;\n  winRate: number; // percentage\n  profitFactor: number;\n  totalPnL: number;\n  maxDrawdown: number;\n  currentDrawdown: number;\n  averageWin: number;\n  averageLoss: number;\n  riskRewardRatio: number;\n}\n\nexport interface MarketPerformance {\n  marketType: MarketType;\n  metrics: PerformanceMetrics;\n  signals: TradingSignal[];\n  lastUpdated: string;\n}\n\nexport interface TradesResponse {\n  success: boolean;\n  data: {\n    trades: Trade[];\n    pagination: {\n      page: number;\n      limit: number;\n      total: number;\n      pages: number;\n    };\n  };\n}\n\nexport interface CreateTradeResponse {\n  success: boolean;\n  data: {\n    trade: Trade;\n  };\n}\n\nclass TradingService {\n  /**\n   * Create a new trade\n   */\n  async createTrade(tradeData: CreateTradeRequest): Promise<Trade> {\n    try {\n      const response = await axios.post<CreateTradeResponse>('/trades', tradeData);\n      \n      if (response.data.success) {\n        toast.success(`${tradeData.side} order for ${tradeData.symbol} placed successfully!`);\n        return response.data.data.trade;\n      } else {\n        throw new Error('Failed to create trade');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Create Trade');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Get user's trades with optional filters\n   */\n  async getTrades(params?: {\n    page?: number;\n    limit?: number;\n    portfolioId?: string;\n    symbol?: string;\n    side?: 'BUY' | 'SELL';\n    status?: 'PENDING' | 'EXECUTED' | 'CANCELLED' | 'FAILED';\n  }): Promise<TradesResponse['data']> {\n    try {\n      const response = await axios.get<TradesResponse>('/trades', { params });\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error('Failed to fetch trades');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Trades');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Get a specific trade by ID\n   */\n  async getTradeById(tradeId: string): Promise<Trade> {\n    try {\n      const response = await axios.get<CreateTradeResponse>(`/trades/${tradeId}`);\n      \n      if (response.data.success) {\n        return response.data.data.trade;\n      } else {\n        throw new Error('Failed to fetch trade');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Trade By ID');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Cancel a pending trade\n   */\n  async cancelTrade(tradeId: string): Promise<Trade> {\n    try {\n      const response = await axios.put<CreateTradeResponse>(`/trades/${tradeId}/cancel`);\n      \n      if (response.data.success) {\n        toast.success('Trade cancelled successfully!');\n        return response.data.data.trade;\n      } else {\n        throw new Error('Failed to cancel trade');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Cancel Trade');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Validate trade data before submission\n   */\n  validateTradeData(tradeData: CreateTradeRequest): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!tradeData.portfolioId) {\n      const error = handleValidationError('Portfolio is required', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    if (!tradeData.symbol) {\n      const error = handleValidationError('Symbol is required', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    if (!tradeData.side) {\n      const error = handleValidationError('Order side (BUY/SELL) is required', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    if (!tradeData.quantity || tradeData.quantity <= 0) {\n      const error = handleValidationError('Quantity must be greater than 0', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    if (!tradeData.price || tradeData.price <= 0) {\n      const error = handleValidationError('Price must be greater than 0', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  // GainzAlgo Integration Methods\n\n  /**\n   * Generate trading signals using GainzAlgo algorithm\n   */\n  async generateSignals(marketType: MarketType, timeFrame: TimeFrame, symbols?: string[]): Promise<TradingSignal[]> {\n    try {\n      const response = await axios.post('/trading/signals/generate', {\n        marketType,\n        timeFrame,\n        symbols\n      });\n      \n      if (response.data.success) {\n        return response.data.data.signals;\n      } else {\n        throw new Error('Failed to generate signals');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Generate Signals');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Get active trading signals\n   */\n  async getActiveSignals(marketType?: MarketType): Promise<TradingSignal[]> {\n    try {\n      const params = marketType ? { marketType } : {};\n      const response = await axios.get('/trading/signals/active', { params });\n      \n      if (response.data.success) {\n        return response.data.data.signals;\n      } else {\n        throw new Error('Failed to fetch active signals');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Active Signals');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Calculate Stop Loss and Take Profit levels\n   */\n  calculateSLTP(entryPrice: number, signalType: SignalType, riskPercent: number = 2, rewardRatio: number = 2): { stopLoss: number; takeProfit: number } {\n    const riskAmount = entryPrice * (riskPercent / 100);\n    \n    if (signalType === 'BUY') {\n      const stopLoss = entryPrice - riskAmount;\n      const takeProfit = entryPrice + (riskAmount * rewardRatio);\n      return { stopLoss, takeProfit };\n    } else {\n      const stopLoss = entryPrice + riskAmount;\n      const takeProfit = entryPrice - (riskAmount * rewardRatio);\n      return { stopLoss, takeProfit };\n    }\n  }\n\n  /**\n   * Get performance metrics for a specific market or overall\n   */\n  async getPerformanceMetrics(marketType?: MarketType, timeRange?: string): Promise<PerformanceMetrics> {\n    try {\n      const params = { marketType, timeRange };\n      const response = await axios.get('/trading/performance/metrics', { params });\n      \n      if (response.data.success) {\n        return response.data.data.metrics;\n      } else {\n        throw new Error('Failed to fetch performance metrics');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Performance Metrics');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Get market-specific performance data\n   */\n  async getMarketPerformance(): Promise<MarketPerformance[]> {\n    try {\n      const response = await axios.get('/trading/performance/markets');\n      \n      if (response.data.success) {\n        return response.data.data.markets;\n      } else {\n        throw new Error('Failed to fetch market performance');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Market Performance');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Calculate win rate from trades\n   */\n  calculateWinRate(trades: Trade[]): number {\n    if (trades.length === 0) return 0;\n    \n    const executedTrades = trades.filter(trade => trade.status === 'EXECUTED' && trade.actualPnL !== undefined);\n    if (executedTrades.length === 0) return 0;\n    \n    const winningTrades = executedTrades.filter(trade => (trade.actualPnL || 0) > 0);\n    return (winningTrades.length / executedTrades.length) * 100;\n  }\n\n  /**\n   * Calculate profit factor from trades\n   */\n  calculateProfitFactor(trades: Trade[]): number {\n    const executedTrades = trades.filter(trade => trade.status === 'EXECUTED' && trade.actualPnL !== undefined);\n    if (executedTrades.length === 0) return 0;\n    \n    const grossProfit = executedTrades\n      .filter(trade => (trade.actualPnL || 0) > 0)\n      .reduce((sum, trade) => sum + (trade.actualPnL || 0), 0);\n    \n    const grossLoss = Math.abs(executedTrades\n      .filter(trade => (trade.actualPnL || 0) < 0)\n      .reduce((sum, trade) => sum + (trade.actualPnL || 0), 0));\n    \n    return grossLoss === 0 ? (grossProfit > 0 ? Infinity : 0) : grossProfit / grossLoss;\n  }\n\n  /**\n   * Calculate maximum drawdown\n   */\n  calculateMaxDrawdown(trades: Trade[]): number {\n    const executedTrades = trades\n      .filter(trade => trade.status === 'EXECUTED' && trade.actualPnL !== undefined)\n      .sort((a, b) => new Date(a.executedAt || a.createdAt).getTime() - new Date(b.executedAt || b.createdAt).getTime());\n    \n    if (executedTrades.length === 0) return 0;\n    \n    let peak = 0;\n    let maxDrawdown = 0;\n    let runningPnL = 0;\n    \n    for (const trade of executedTrades) {\n      runningPnL += trade.actualPnL || 0;\n      \n      if (runningPnL > peak) {\n        peak = runningPnL;\n      }\n      \n      const drawdown = peak - runningPnL;\n      if (drawdown > maxDrawdown) {\n        maxDrawdown = drawdown;\n      }\n    }\n    \n    return maxDrawdown;\n  }\n\n  /**\n   * Execute trade based on signal with automatic SL/TP\n   */\n  async executeSignalTrade(signal: TradingSignal, portfolioId: string, quantity: number, riskPercent: number = 2): Promise<Trade> {\n    const { stopLoss, takeProfit } = this.calculateSLTP(signal.entryPrice, signal.signalType, riskPercent);\n    \n    const tradeData: CreateTradeRequest = {\n      portfolioId,\n      symbol: signal.symbol,\n      marketType: signal.marketType,\n      side: signal.signalType === 'BUY' ? 'BUY' : 'SELL',\n      quantity,\n      price: signal.entryPrice,\n      stopLoss,\n      takeProfit,\n      signalId: signal.id,\n      timeFrame: signal.timeFrame,\n      orderType: 'MARKET'\n    };\n    \n    return this.createTrade(tradeData);\n  }\n}\n\nexport const tradingService = new TradingService();\nexport default tradingService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/BrokerAccountSelector.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { ChevronDownIcon, CheckIcon } from '@heroicons/react/24/outline';\n\ninterface BrokerAccount {\n  id: string;\n  accountNumber: string;\n  accountType: string;\n  status: string;\n  buyingPower: number;\n  cashBalance: number;\n  portfolioValue: number;\n  currency: string;\n  brokerConnection: {\n    id: string;\n    accountName: string;\n    brokerType: string;\n    environment: string;\n  };\n}\n\ninterface BrokerAccountSelectorProps {\n  selectedAccount?: BrokerAccount | null;\n  onAccountSelect: (account: BrokerAccount | null) => void;\n  className?: string;\n  placeholder?: string;\n}\n\nexport default function BrokerAccountSelector({\n  selectedAccount,\n  onAccountSelect,\n  className = '',\n  placeholder = 'Select a broker account'\n}: BrokerAccountSelectorProps) {\n  const [accounts, setAccounts] = useState<BrokerAccount[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    fetchBrokerAccounts();\n  }, []);\n\n  const fetchBrokerAccounts = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      if (!token) {\n        // User is not authenticated, set empty accounts and return\n        setIsAuthenticated(false);\n        setAccounts([]);\n        setLoading(false);\n        return;\n      }\n      \n      setIsAuthenticated(true);\n\n      const response = await fetch('/api/brokers/accounts', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch broker accounts');\n      }\n\n      const data = await response.json();\n      if (data.success) {\n        setAccounts(data.data || []);\n      } else {\n        throw new Error(data.message || 'Failed to fetch accounts');\n      }\n    } catch (err) {\n      console.error('Error fetching broker accounts:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load accounts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency\n    }).format(amount);\n  };\n\n  const getBrokerDisplayName = (brokerType: string) => {\n    const brokerNames: { [key: string]: string } = {\n      'ALPACA': 'Alpaca',\n      'INTERACTIVE_BROKERS': 'Interactive Brokers',\n      'TD_AMERITRADE': 'TD Ameritrade',\n      'SCHWAB': 'Charles Schwab',\n      'FIDELITY': 'Fidelity',\n      'E_TRADE': 'E*TRADE'\n    };\n    return brokerNames[brokerType] || brokerType;\n  };\n\n  const getAccountTypeDisplay = (accountType: string) => {\n    const typeNames: { [key: string]: string } = {\n      'CASH': 'Cash Account',\n      'MARGIN': 'Margin Account',\n      'RETIREMENT': 'Retirement Account',\n      'CRYPTO': 'Crypto Account'\n    };\n    return typeNames[accountType] || accountType;\n  };\n\n  const handleAccountSelect = (account: BrokerAccount) => {\n    onAccountSelect(account);\n    setIsOpen(false);\n  };\n\n  if (loading) {\n    return (\n      <div className={`relative ${className}`}>\n        <div className=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500\">\n          Loading accounts...\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`relative ${className}`}>\n        <div className=\"w-full px-3 py-2 border border-red-300 rounded-md bg-red-50 text-red-600\">\n          {error}\n        </div>\n      </div>\n    );\n  }\n\n  if (accounts.length === 0) {\n    return (\n      <div className={`relative ${className}`}>\n        <div className=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500\">\n          {isAuthenticated \n            ? \"No broker accounts found. Please connect a broker first.\"\n            : \"Please log in to view broker accounts.\"\n          }\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`}>\n      <button\n        type=\"button\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"relative w-full cursor-pointer rounded-md border border-gray-300 bg-white py-2 pl-3 pr-10 text-left shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 sm:text-sm\"\n      >\n        <span className=\"block truncate\">\n          {selectedAccount ? (\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <span className=\"font-medium\">\n                  {getBrokerDisplayName(selectedAccount.brokerConnection.brokerType)}\n                </span>\n                <span className=\"ml-2 text-gray-500\">\n                  {selectedAccount.brokerConnection.accountName}\n                </span>\n              </div>\n              <div className=\"text-sm text-gray-600\">\n                {formatCurrency(selectedAccount.portfolioValue, selectedAccount.currency)}\n              </div>\n            </div>\n          ) : (\n            <span className=\"text-gray-500\">{placeholder}</span>\n          )}\n        </span>\n        <span className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\n          <ChevronDownIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n        </span>\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\n          <div\n            className=\"relative cursor-pointer select-none py-2 pl-3 pr-9 text-gray-900 hover:bg-blue-50\"\n            onClick={() => handleAccountSelect(null as any)}\n          >\n            <span className=\"block truncate text-gray-500\">Clear selection</span>\n          </div>\n          {accounts.map((account) => (\n            <div\n              key={account.id}\n              className=\"relative cursor-pointer select-none py-2 pl-3 pr-9 text-gray-900 hover:bg-blue-50\"\n              onClick={() => handleAccountSelect(account)}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center\">\n                    <span className=\"font-medium\">\n                      {getBrokerDisplayName(account.brokerConnection.brokerType)}\n                    </span>\n                    <span className=\"ml-2 text-gray-500\">\n                      {account.brokerConnection.accountName}\n                    </span>\n                    <span className=\"ml-2 text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded\">\n                      {account.brokerConnection.environment}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-600 mt-1\">\n                    <span>{getAccountTypeDisplay(account.accountType)}</span>\n                    <span className=\"mx-2\">•</span>\n                    <span>Account: {account.accountNumber}</span>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    <span>Portfolio: {formatCurrency(account.portfolioValue, account.currency)}</span>\n                    <span className=\"mx-2\">•</span>\n                    <span>Cash: {formatCurrency(account.cashBalance, account.currency)}</span>\n                    <span className=\"mx-2\">•</span>\n                    <span>Buying Power: {formatCurrency(account.buyingPower, account.currency)}</span>\n                  </div>\n                </div>\n              </div>\n\n              {selectedAccount?.id === account.id && (\n                <span className=\"absolute inset-y-0 right-0 flex items-center pr-4 text-blue-600\">\n                  <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                </span>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 689, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/app/trading/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  BarChart3,\n  LineChart,\n  Activity,\n  Search,\n  Filter,\n  Star,\n  Clock,\n  Volume2,\n  ArrowUpRight,\n  ArrowDownRight,\n  Plus,\n  Minus,\n  RefreshCw,\n  Eye,\n  Settings,\n  Zap,\n  Code,\n  Target,\n  ArrowRight\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { tradingService, CreateTradeRequest } from '@/services/tradingService';\nimport { toast } from 'react-hot-toast';\nimport BrokerAccountSelector from '@/components/BrokerAccountSelector';\nimport { useBrokerAccount } from '@/contexts/BrokerAccountContext';\n\ninterface MarketData {\n  symbol: string;\n  name: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  marketCap: number;\n  high24h: number;\n  low24h: number;\n  sector: string;\n  type: 'stock' | 'crypto' | 'forex' | 'commodity';\n}\n\ninterface OrderBookEntry {\n  price: number;\n  quantity: number;\n  total: number;\n}\n\ninterface Trade {\n  id: string;\n  symbol: string;\n  type: 'buy' | 'sell';\n  quantity: number;\n  price: number;\n  timestamp: string;\n  status: 'pending' | 'filled' | 'cancelled';\n}\n\nexport default function TradingPage() {\n  const { user } = useAuth();\n  const { selectedAccount: selectedBrokerAccount, setSelectedAccount: setSelectedBrokerAccount } = useBrokerAccount();\n  const [activeTab, setActiveTab] = useState<'market' | 'watchlist' | 'orders' | 'chart'>('market');\n  const [selectedAsset, setSelectedAsset] = useState<string>('AAPL');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [orderType, setOrderType] = useState<'market' | 'limit' | 'stop'>('market');\n  const [orderSide, setOrderSide] = useState<'buy' | 'sell'>('buy');\n  const [orderQuantity, setOrderQuantity] = useState('');\n  const [orderPrice, setOrderPrice] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [portfolioId, setPortfolioId] = useState('');\n  const [isPlacingOrder, setIsPlacingOrder] = useState(false);\n\n  // Mock market data\n  const [marketData, setMarketData] = useState<MarketData[]>([\n    {\n      symbol: 'AAPL',\n      name: 'Apple Inc.',\n      price: 175.80,\n      change: 2.45,\n      changePercent: 1.41,\n      volume: 45678900,\n      marketCap: 2800000000000,\n      high24h: 177.20,\n      low24h: 173.50,\n      sector: 'Technology',\n      type: 'stock'\n    },\n    {\n      symbol: 'TSLA',\n      name: 'Tesla Inc.',\n      price: 245.30,\n      change: -3.20,\n      changePercent: -1.29,\n      volume: 32456780,\n      marketCap: 780000000000,\n      high24h: 250.80,\n      low24h: 243.10,\n      sector: 'Automotive',\n      type: 'stock'\n    },\n    {\n      symbol: 'BTC',\n      name: 'Bitcoin',\n      price: 52000.00,\n      change: 1200.00,\n      changePercent: 2.36,\n      volume: 28000000000,\n      marketCap: 1020000000000,\n      high24h: 53500.00,\n      low24h: 50800.00,\n      sector: 'Cryptocurrency',\n      type: 'crypto'\n    },\n    {\n      symbol: 'ETH',\n      name: 'Ethereum',\n      price: 3200.50,\n      change: 85.30,\n      changePercent: 2.74,\n      volume: 15000000000,\n      marketCap: 385000000000,\n      high24h: 3250.00,\n      low24h: 3100.00,\n      sector: 'Cryptocurrency',\n      type: 'crypto'\n    },\n    {\n      symbol: 'EURUSD',\n      name: 'Euro/US Dollar',\n      price: 1.0875,\n      change: 0.0025,\n      changePercent: 0.23,\n      volume: 125000000,\n      marketCap: 0,\n      high24h: 1.0890,\n      low24h: 1.0850,\n      sector: 'Forex',\n      type: 'forex'\n    }\n  ]);\n\n  // Mock order book data\n  const [orderBook, setOrderBook] = useState({\n    bids: [\n      { price: 175.75, quantity: 1500, total: 263625 },\n      { price: 175.70, quantity: 2300, total: 404110 },\n      { price: 175.65, quantity: 1800, total: 316170 },\n      { price: 175.60, quantity: 2100, total: 368760 },\n      { price: 175.55, quantity: 1200, total: 210660 }\n    ],\n    asks: [\n      { price: 175.85, quantity: 1200, total: 211020 },\n      { price: 175.90, quantity: 1800, total: 316620 },\n      { price: 175.95, quantity: 2200, total: 387090 },\n      { price: 176.00, quantity: 1500, total: 264000 },\n      { price: 176.05, quantity: 1900, total: 334495 }\n    ]\n  });\n\n  // Mock recent trades\n  const [recentTrades, setRecentTrades] = useState<Trade[]>([\n    {\n      id: '1',\n      symbol: 'AAPL',\n      type: 'buy',\n      quantity: 100,\n      price: 175.80,\n      timestamp: '2024-03-15T10:30:00Z',\n      status: 'filled'\n    },\n    {\n      id: '2',\n      symbol: 'TSLA',\n      type: 'sell',\n      quantity: 50,\n      price: 245.30,\n      timestamp: '2024-03-15T10:25:00Z',\n      status: 'filled'\n    },\n    {\n      id: '3',\n      symbol: 'BTC',\n      type: 'buy',\n      quantity: 0.1,\n      price: 52000.00,\n      timestamp: '2024-03-15T10:20:00Z',\n      status: 'pending'\n    }\n  ]);\n\n  const [watchlist, setWatchlist] = useState<string[]>(['AAPL', 'TSLA', 'BTC']);\n\n  useEffect(() => {\n    // Simulate loading\n    const timer = setTimeout(() => setLoading(false), 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const selectedAssetData = marketData.find(asset => asset.symbol === selectedAsset);\n\n  const filteredMarketData = marketData.filter(asset => \n    asset.symbol.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    asset.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const formatCurrency = (amount: number, decimals = 2) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    }).format(amount);\n  };\n\n  const formatNumber = (num: number) => {\n    if (num >= 1e12) return (num / 1e12).toFixed(2) + 'T';\n    if (num >= 1e9) return (num / 1e9).toFixed(2) + 'B';\n    if (num >= 1e6) return (num / 1e6).toFixed(2) + 'M';\n    if (num >= 1e3) return (num / 1e3).toFixed(2) + 'K';\n    return num.toLocaleString();\n  };\n\n  const handleAddToWatchlist = (symbol: string) => {\n    if (!watchlist.includes(symbol)) {\n      setWatchlist([...watchlist, symbol]);\n    }\n  };\n\n  const handleRemoveFromWatchlist = (symbol: string) => {\n    setWatchlist(watchlist.filter(s => s !== symbol));\n  };\n\n  const handlePlaceOrder = async () => {\n    if (!selectedAsset || !orderQuantity || !portfolioId || !selectedBrokerAccount) {\n      toast.error('Please fill in all required fields including broker account');\n      return;\n    }\n\n    const tradeData: CreateTradeRequest = {\n      portfolioId,\n      symbol: selectedAsset,\n      marketType: 'STOCKS', // Default to stocks, can be enhanced to detect market type\n      side: orderSide.toUpperCase() as 'BUY' | 'SELL',\n      quantity: parseFloat(orderQuantity),\n      price: orderType === 'market' ? 0 : parseFloat(orderPrice || '0'),\n      orderType: orderType.toUpperCase() as 'MARKET' | 'LIMIT',\n      brokerAccountId: selectedBrokerAccount?.id,\n      brokerConnectionId: selectedBrokerAccount?.brokerConnection?.id\n    };\n\n    // Validate trade data\n    const validation = tradingService.validateTradeData(tradeData);\n    if (!validation.isValid) {\n      validation.errors.forEach(error => toast.error(error));\n      return;\n    }\n\n    setIsPlacingOrder(true);\n    try {\n      await tradingService.createTrade(tradeData);\n      \n      // Reset form on success\n      setOrderQuantity('');\n      setOrderPrice('');\n      setPortfolioId('');\n    } catch (error) {\n      // Error handling is done in the service\n    } finally {\n      setIsPlacingOrder(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"py-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n                  Trading\n                </h1>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Trade stocks, crypto, forex, and commodities\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <button className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors\">\n                  <RefreshCw className=\"h-5 w-5\" />\n                </button>\n                <button className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors\">\n                  <Settings className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Trading Features Navigation */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"py-4\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Link\n                href=\"/trading/pine-editor\"\n                className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors group\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <Code className=\"h-5 w-5 text-blue-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-white\">Pine Editor</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">Script strategies</div>\n                  </div>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300\" />\n              </Link>\n              \n              <Link\n                href=\"/trading/profit-targets\"\n                className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors group\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <Target className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-white\">Profit Targets</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">Daily goals</div>\n                  </div>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300\" />\n              </Link>\n              \n              <Link\n                href=\"/trading/market-updates\"\n                className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors group\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <Activity className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-white\">Market Updates</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">Live data</div>\n                  </div>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300\" />\n              </Link>\n              \n              <Link\n                href=\"/trading/futures\"\n                className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors group\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <BarChart3 className=\"h-5 w-5 text-blue-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-white\">Futures</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">Contracts</div>\n                  </div>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300\" />\n              </Link>\n            </div>\n            \n            <div className=\"mt-4\">\n              <Link\n                href=\"/trading/options\"\n                className=\"flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-lg hover:from-purple-100 hover:to-blue-100 dark:hover:from-purple-900/30 dark:hover:to-blue-900/30 transition-colors group border border-purple-200 dark:border-purple-700\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <Target className=\"h-5 w-5 text-purple-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-white\">Options Trading</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">Advanced strategies with Greeks calculation</div>\n                  </div>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300\" />\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Market Data / Watchlist */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700\">\n              {/* Tabs */}\n              <div className=\"flex border-b border-gray-200 dark:border-gray-700\">\n                <button\n                  onClick={() => setActiveTab('market')}\n                  className={`flex-1 px-4 py-3 text-sm font-medium ${\n                    activeTab === 'market'\n                      ? 'text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400'\n                      : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\n                  }`}\n                >\n                  Market\n                </button>\n                <button\n                  onClick={() => setActiveTab('watchlist')}\n                  className={`flex-1 px-4 py-3 text-sm font-medium ${\n                    activeTab === 'watchlist'\n                      ? 'text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400'\n                      : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\n                  }`}\n                >\n                  Watchlist\n                </button>\n              </div>\n\n              {/* Search */}\n              <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search assets...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n                  />\n                </div>\n              </div>\n\n              {/* Asset List */}\n              <div className=\"max-h-96 overflow-y-auto\">\n                {(activeTab === 'market' ? filteredMarketData : marketData.filter(asset => watchlist.includes(asset.symbol))).map((asset) => (\n                  <div\n                    key={asset.symbol}\n                    onClick={() => setSelectedAsset(asset.symbol)}\n                    className={`p-4 border-b border-gray-200 dark:border-gray-700 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 ${\n                      selectedAsset === asset.symbol ? 'bg-blue-50 dark:bg-blue-900/20' : ''\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-semibold text-gray-900 dark:text-white\">{asset.symbol}</span>\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            if (watchlist.includes(asset.symbol)) {\n                              handleRemoveFromWatchlist(asset.symbol);\n                            } else {\n                              handleAddToWatchlist(asset.symbol);\n                            }\n                          }}\n                          className={`p-1 rounded ${\n                            watchlist.includes(asset.symbol)\n                              ? 'text-yellow-500 hover:text-yellow-600'\n                              : 'text-gray-400 hover:text-yellow-500'\n                          }`}\n                        >\n                          <Star className={`h-3 w-3 ${watchlist.includes(asset.symbol) ? 'fill-current' : ''}`} />\n                        </button>\n                      </div>\n                      <span className={`text-sm font-medium ${\n                        asset.change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n                      }`}>\n                        {asset.change >= 0 ? '+' : ''}{asset.changePercent.toFixed(2)}%\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">{asset.name}</span>\n                      <span className=\"font-medium text-gray-900 dark:text-white\">\n                        {formatCurrency(asset.price, asset.type === 'forex' ? 4 : 2)}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Chart and Trading Interface */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n              {/* Chart */}\n              <div className=\"xl:col-span-2\">\n                <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div>\n                      <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                        {selectedAssetData?.symbol} - {selectedAssetData?.name}\n                      </h2>\n                      <div className=\"flex items-center space-x-4 mt-2\">\n                        <span className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                          {selectedAssetData && formatCurrency(selectedAssetData.price, selectedAssetData.type === 'forex' ? 4 : 2)}\n                        </span>\n                        <span className={`flex items-center text-sm font-medium ${\n                          selectedAssetData && selectedAssetData.change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n                        }`}>\n                          {selectedAssetData && selectedAssetData.change >= 0 ? <ArrowUpRight className=\"h-4 w-4 mr-1\" /> : <ArrowDownRight className=\"h-4 w-4 mr-1\" />}\n                          {selectedAssetData && formatCurrency(Math.abs(selectedAssetData.change), 2)} ({selectedAssetData && selectedAssetData.changePercent.toFixed(2)}%)\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      {['1D', '1W', '1M', '3M', '1Y'].map((period) => (\n                        <button\n                          key={period}\n                          className=\"px-3 py-1 text-xs font-medium text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\n                        >\n                          {period}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  {/* Chart Placeholder */}\n                  <div className=\"h-80 flex items-center justify-center bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"text-center\">\n                      <LineChart className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-500 dark:text-gray-400\">Interactive chart would go here</p>\n                      <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-2\">\n                        Real-time price data and technical indicators\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Asset Stats */}\n                  {selectedAssetData && (\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">24h High</p>\n                        <p className=\"font-semibold text-gray-900 dark:text-white\">\n                          {formatCurrency(selectedAssetData.high24h, selectedAssetData.type === 'forex' ? 4 : 2)}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">24h Low</p>\n                        <p className=\"font-semibold text-gray-900 dark:text-white\">\n                          {formatCurrency(selectedAssetData.low24h, selectedAssetData.type === 'forex' ? 4 : 2)}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Volume</p>\n                        <p className=\"font-semibold text-gray-900 dark:text-white\">\n                          {formatNumber(selectedAssetData.volume)}\n                        </p>\n                      </div>\n                      {selectedAssetData.marketCap > 0 && (\n                        <div>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Market Cap</p>\n                          <p className=\"font-semibold text-gray-900 dark:text-white\">\n                            {formatNumber(selectedAssetData.marketCap)}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Trading Panel */}\n              <div className=\"xl:col-span-1\">\n                <div className=\"space-y-6\">\n                  {/* Order Form */}\n                  <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Place Order</h3>\n                    \n                    {/* Order Type */}\n                    <div className=\"flex space-x-1 mb-4\">\n                      {['market', 'limit', 'stop'].map((type) => (\n                        <button\n                          key={type}\n                          onClick={() => setOrderType(type as any)}\n                          className={`flex-1 py-2 px-3 text-sm font-medium rounded ${\n                            orderType === type\n                              ? 'bg-blue-600 text-white'\n                              : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'\n                          }`}\n                        >\n                          {type.charAt(0).toUpperCase() + type.slice(1)}\n                        </button>\n                      ))}\n                    </div>\n\n                    {/* Buy/Sell Toggle */}\n                    <div className=\"flex space-x-1 mb-4\">\n                      <button\n                        onClick={() => setOrderSide('buy')}\n                        className={`flex-1 py-2 px-3 font-medium rounded ${\n                          orderSide === 'buy'\n                            ? 'bg-green-600 text-white'\n                            : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'\n                        }`}\n                      >\n                        Buy\n                      </button>\n                      <button\n                        onClick={() => setOrderSide('sell')}\n                        className={`flex-1 py-2 px-3 font-medium rounded ${\n                          orderSide === 'sell'\n                            ? 'bg-red-600 text-white'\n                            : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'\n                        }`}\n                      >\n                        Sell\n                      </button>\n                    </div>\n\n                    {/* Broker Account */}\n                    <div className=\"mb-4\">\n                      <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                        Broker Account\n                      </label>\n                      <BrokerAccountSelector\n                        selectedAccount={selectedBrokerAccount}\n                        onAccountSelect={setSelectedBrokerAccount}\n                        placeholder=\"Select a broker account for trading\"\n                      />\n                    </div>\n\n                    {/* Portfolio */}\n                    <div className=\"mb-4\">\n                      <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                        Portfolio\n                      </label>\n                      <select\n                        value={portfolioId}\n                        onChange={(e) => setPortfolioId(e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      >\n                        <option value=\"\">Select portfolio</option>\n                        <option value=\"portfolio-1\">Main Portfolio</option>\n                        <option value=\"portfolio-2\">Growth Portfolio</option>\n                        <option value=\"portfolio-3\">Conservative Portfolio</option>\n                      </select>\n                    </div>\n\n                    {/* Quantity */}\n                    <div className=\"mb-4\">\n                      <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                        Quantity\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={orderQuantity}\n                        onChange={(e) => setOrderQuantity(e.target.value)}\n                        placeholder=\"0.00\"\n                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      />\n                    </div>\n\n                    {/* Price (for limit orders) */}\n                    {orderType !== 'market' && (\n                      <div className=\"mb-4\">\n                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                          Price\n                        </label>\n                        <input\n                          type=\"number\"\n                          value={orderPrice}\n                          onChange={(e) => setOrderPrice(e.target.value)}\n                          placeholder=\"0.00\"\n                          className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        />\n                      </div>\n                    )}\n\n                    {/* Order Total */}\n                    <div className=\"mb-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Estimated Total:</span>\n                        <span className=\"font-medium text-gray-900 dark:text-white\">\n                          {orderQuantity && selectedAssetData ? \n                            formatCurrency(parseFloat(orderQuantity) * (orderType === 'market' ? selectedAssetData.price : parseFloat(orderPrice || '0')))\n                            : '$0.00'\n                          }\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Place Order Button */}\n                    <button\n                      onClick={handlePlaceOrder}\n                      disabled={!orderQuantity || !portfolioId || !selectedBrokerAccount || (orderType !== 'market' && !orderPrice) || isPlacingOrder}\n                      className={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${\n                        orderSide === 'buy'\n                          ? 'bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white'\n                          : 'bg-red-600 hover:bg-red-700 disabled:bg-gray-400 text-white'\n                      }`}\n                    >\n                      {isPlacingOrder ? 'Placing Order...' : `${orderSide === 'buy' ? 'Buy' : 'Sell'} ${selectedAsset}`}\n                    </button>\n                  </div>\n\n                  {/* Order Book */}\n                  <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Order Book</h3>\n                    \n                    {/* Asks */}\n                    <div className=\"mb-4\">\n                      <h4 className=\"text-sm font-medium text-red-600 dark:text-red-400 mb-2\">Asks</h4>\n                      <div className=\"space-y-1\">\n                        {orderBook.asks.slice().reverse().map((ask, index) => (\n                          <div key={index} className=\"flex justify-between text-xs\">\n                            <span className=\"text-red-600 dark:text-red-400\">{formatCurrency(ask.price, 2)}</span>\n                            <span className=\"text-gray-600 dark:text-gray-400\">{ask.quantity}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Spread */}\n                    <div className=\"py-2 border-y border-gray-200 dark:border-gray-700 mb-4\">\n                      <div className=\"text-center text-sm font-medium text-gray-900 dark:text-white\">\n                        Spread: {formatCurrency(orderBook.asks[0].price - orderBook.bids[0].price, 2)}\n                      </div>\n                    </div>\n\n                    {/* Bids */}\n                    <div>\n                      <h4 className=\"text-sm font-medium text-green-600 dark:text-green-400 mb-2\">Bids</h4>\n                      <div className=\"space-y-1\">\n                        {orderBook.bids.map((bid, index) => (\n                          <div key={index} className=\"flex justify-between text-xs\">\n                            <span className=\"text-green-600 dark:text-green-400\">{formatCurrency(bid.price, 2)}</span>\n                            <span className=\"text-gray-600 dark:text-gray-400\">{bid.quantity}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Recent Trades */}\n                  <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Recent Trades</h3>\n                    <div className=\"space-y-3\">\n                      {recentTrades.map((trade) => (\n                        <div key={trade.id} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className={`h-2 w-2 rounded-full ${\n                              trade.type === 'buy' ? 'bg-green-500' : 'bg-red-500'\n                            }`}></div>\n                            <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                              {trade.symbol}\n                            </span>\n                            <span className={`text-xs px-2 py-1 rounded-full ${\n                              trade.status === 'filled' ? 'bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400' :\n                              trade.status === 'pending' ? 'bg-yellow-100 dark:bg-yellow-900/20 text-yellow-700 dark:text-yellow-400' :\n                              'bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400'\n                            }`}>\n                              {trade.status}\n                            </span>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                              {formatCurrency(trade.price, 2)}\n                            </p>\n                            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                              {trade.quantity} shares\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}