{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/BalanceTrackingService.ts"],"sourcesContent":["'use client'\n\ninterface BalanceData {\n  totalBalance: number\n  availableBalance: number\n  investedAmount: number\n  pendingDeposits: number\n  pendingWithdrawals: number\n  lastUpdated: Date\n}\n\ninterface BalanceUpdateListener {\n  (balance: BalanceData): void\n}\n\nclass BalanceTrackingService {\n  private balance: BalanceData = {\n    totalBalance: 125000,\n    availableBalance: 45000,\n    investedAmount: 80000,\n    pendingDeposits: 0,\n    pendingWithdrawals: 0,\n    lastUpdated: new Date()\n  }\n\n  private listeners: Set<BalanceUpdateListener> = new Set()\n  private updateInterval: NodeJS.Timeout | null = null\n\n  constructor() {\n    // Start real-time updates\n    this.startRealTimeUpdates()\n  }\n\n  /**\n   * Subscribe to balance updates\n   */\n  subscribe(listener: BalanceUpdateListener): () => void {\n    this.listeners.add(listener)\n    \n    // Immediately send current balance\n    listener(this.balance)\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(listener)\n    }\n  }\n\n  /**\n   * Get current balance\n   */\n  getCurrentBalance(): BalanceData {\n    return { ...this.balance }\n  }\n\n  /**\n   * Update balance after deposit\n   */\n  async processDeposit(amount: number): Promise<void> {\n    // Add to pending deposits first\n    this.balance.pendingDeposits += amount\n    this.notifyListeners()\n\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 2000))\n\n    // Move from pending to available balance\n    this.balance.pendingDeposits -= amount\n    this.balance.availableBalance += amount\n    this.balance.totalBalance += amount\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Update balance after withdrawal\n   */\n  async processWithdrawal(amount: number): Promise<void> {\n    // Check if sufficient funds\n    if (this.balance.availableBalance < amount) {\n      throw new Error('Insufficient funds for withdrawal')\n    }\n\n    // Add to pending withdrawals\n    this.balance.pendingWithdrawals += amount\n    this.balance.availableBalance -= amount\n    this.notifyListeners()\n\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 2000))\n\n    // Complete withdrawal\n    this.balance.pendingWithdrawals -= amount\n    this.balance.totalBalance -= amount\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Update invested amount\n   */\n  updateInvestedAmount(amount: number): void {\n    const difference = amount - this.balance.investedAmount\n    \n    // Adjust available balance\n    this.balance.availableBalance -= difference\n    this.balance.investedAmount = amount\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Add profit from trading\n   */\n  addTradingProfit(profit: number): void {\n    this.balance.availableBalance += profit\n    this.balance.totalBalance += profit\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Start real-time balance updates (simulate market changes)\n   */\n  private startRealTimeUpdates(): void {\n    this.updateInterval = setInterval(() => {\n      // Simulate small market fluctuations in invested amount\n      const fluctuation = (Math.random() - 0.5) * 100 // Â±$50\n      const newInvestedValue = Math.max(0, this.balance.investedAmount + fluctuation)\n      const difference = newInvestedValue - this.balance.investedAmount\n      \n      this.balance.investedAmount = newInvestedValue\n      this.balance.totalBalance += difference\n      this.balance.lastUpdated = new Date()\n      \n      this.notifyListeners()\n    }, 5000) // Update every 5 seconds\n  }\n\n  /**\n   * Stop real-time updates\n   */\n  stopRealTimeUpdates(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval)\n      this.updateInterval = null\n    }\n  }\n\n  /**\n   * Notify all listeners of balance changes\n   */\n  private notifyListeners(): void {\n    const balanceCopy = { ...this.balance }\n    this.listeners.forEach(listener => {\n      try {\n        listener(balanceCopy)\n      } catch (error) {\n        console.error('Error in balance listener:', error)\n      }\n    })\n  }\n\n  /**\n   * Format currency for display\n   */\n  formatCurrency(amount: number): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(amount)\n  }\n\n  /**\n   * Get balance summary for display\n   */\n  getBalanceSummary(): {\n    total: string\n    available: string\n    invested: string\n    pending: string\n  } {\n    return {\n      total: this.formatCurrency(this.balance.totalBalance),\n      available: this.formatCurrency(this.balance.availableBalance),\n      invested: this.formatCurrency(this.balance.investedAmount),\n      pending: this.formatCurrency(this.balance.pendingDeposits + this.balance.pendingWithdrawals)\n    }\n  }\n}\n\n// Create singleton instance\nconst balanceTrackingService = new BalanceTrackingService()\n\nexport default balanceTrackingService\nexport type { BalanceData, BalanceUpdateListener }"],"names":[],"mappings":";;;;AAAA;AAeA,MAAM;IACI,UAAuB;QAC7B,cAAc;QACd,kBAAkB;QAClB,gBAAgB;QAChB,iBAAiB;QACjB,oBAAoB;QACpB,aAAa,IAAI;IACnB,EAAC;IAEO,YAAwC,IAAI,MAAK;IACjD,iBAAwC,KAAI;IAEpD,aAAc;QACZ,0BAA0B;QAC1B,IAAI,CAAC,oBAAoB;IAC3B;IAEA;;GAEC,GACD,UAAU,QAA+B,EAAc;QACrD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;QAEnB,mCAAmC;QACnC,SAAS,IAAI,CAAC,OAAO;QAErB,8BAA8B;QAC9B,OAAO;YACL,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QACxB;IACF;IAEA;;GAEC,GACD,oBAAiC;QAC/B,OAAO;YAAE,GAAG,IAAI,CAAC,OAAO;QAAC;IAC3B;IAEA;;GAEC,GACD,MAAM,eAAe,MAAc,EAAiB;QAClD,gCAAgC;QAChC,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI;QAChC,IAAI,CAAC,eAAe;QAEpB,2BAA2B;QAC3B,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;QAEjD,yCAAyC;QACzC,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI;QAChC,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI;QACjC,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI;QAC7B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI;QAE/B,IAAI,CAAC,eAAe;IACtB;IAEA;;GAEC,GACD,MAAM,kBAAkB,MAAc,EAAiB;QACrD,4BAA4B;QAC5B,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,QAAQ;YAC1C,MAAM,IAAI,MAAM;QAClB;QAEA,6BAA6B;QAC7B,IAAI,CAAC,OAAO,CAAC,kBAAkB,IAAI;QACnC,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI;QACjC,IAAI,CAAC,eAAe;QAEpB,2BAA2B;QAC3B,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;QAEjD,sBAAsB;QACtB,IAAI,CAAC,OAAO,CAAC,kBAAkB,IAAI;QACnC,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI;QAC7B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI;QAE/B,IAAI,CAAC,eAAe;IACtB;IAEA;;GAEC,GACD,qBAAqB,MAAc,EAAQ;QACzC,MAAM,aAAa,SAAS,IAAI,CAAC,OAAO,CAAC,cAAc;QAEvD,2BAA2B;QAC3B,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI;QACjC,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG;QAC9B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI;QAE/B,IAAI,CAAC,eAAe;IACtB;IAEA;;GAEC,GACD,iBAAiB,MAAc,EAAQ;QACrC,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI;QACjC,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI;QAC7B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI;QAE/B,IAAI,CAAC,eAAe;IACtB;IAEA;;GAEC,GACD,AAAQ,uBAA6B;QACnC,IAAI,CAAC,cAAc,GAAG,YAAY;YAChC,wDAAwD;YACxD,MAAM,cAAc,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,IAAI,OAAO;;YACvD,MAAM,mBAAmB,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG;YACnE,MAAM,aAAa,mBAAmB,IAAI,CAAC,OAAO,CAAC,cAAc;YAEjE,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG;YAC9B,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI;YAC7B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI;YAE/B,IAAI,CAAC,eAAe;QACtB,GAAG,OAAM,yBAAyB;IACpC;IAEA;;GAEC,GACD,sBAA4B;QAC1B,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,cAAc,IAAI,CAAC,cAAc;YACjC,IAAI,CAAC,cAAc,GAAG;QACxB;IACF;IAEA;;GAEC,GACD,AAAQ,kBAAwB;QAC9B,MAAM,cAAc;YAAE,GAAG,IAAI,CAAC,OAAO;QAAC;QACtC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;YACrB,IAAI;gBACF,SAAS;YACX,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,8BAA8B;YAC9C;QACF;IACF;IAEA;;GAEC,GACD,eAAe,MAAc,EAAU;QACrC,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;YACpC,OAAO;YACP,UAAU;YACV,uBAAuB;YACvB,uBAAuB;QACzB,GAAG,MAAM,CAAC;IACZ;IAEA;;GAEC,GACD,oBAKE;QACA,OAAO;YACL,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY;YACpD,WAAW,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB;YAC5D,UAAU,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc;YACzD,SAAS,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB;QAC7F;IACF;AACF;AAEA,4BAA4B;AAC5B,MAAM,yBAAyB,IAAI;uCAEpB","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/AutomatedWorkflowService.ts"],"sourcesContent":["'use client';\n\nimport { toast } from 'react-hot-toast';\nimport balanceTrackingService from './BalanceTrackingService';\n\n// Types for the automated workflow\nexport interface WorkflowConfig {\n  autoDeposit: {\n    enabled: boolean;\n    amount: number;\n    frequency: 'daily' | 'weekly' | 'monthly';\n    source: 'bank' | 'card' | 'crypto';\n  };\n  autoInvest: {\n    enabled: boolean;\n    strategy: 'conservative' | 'moderate' | 'aggressive' | 'custom';\n    allocation: {\n      stocks: number;\n      crypto: number;\n      forex: number;\n      commodities: number;\n    };\n    minBalance: number;\n  };\n  autoWithdraw: {\n    enabled: boolean;\n    profitThreshold: number;\n    withdrawPercentage: number;\n    destination: 'bank' | 'card' | 'crypto';\n  };\n}\n\nexport interface WorkflowStatus {\n  isRunning: boolean;\n  lastExecution: Date | null;\n  nextExecution: Date | null;\n  totalDeposited: number;\n  totalInvested: number;\n  totalWithdrawn: number;\n  currentBalance: number;\n  totalProfit: number;\n}\n\nexport interface Transaction {\n  id: string;\n  type: 'deposit' | 'invest' | 'withdraw';\n  amount: number;\n  status: 'pending' | 'completed' | 'failed';\n  timestamp: Date;\n  description: string;\n}\n\nclass AutomatedWorkflowService {\n  private config: WorkflowConfig;\n  private status: WorkflowStatus;\n  private transactions: Transaction[];\n  private intervalId: NodeJS.Timeout | null = null;\n\n  constructor() {\n    // Load configuration from localStorage or use defaults\n    this.config = this.loadConfig();\n    this.status = this.loadStatus();\n    this.transactions = this.loadTransactions();\n    \n    // Start the workflow if enabled\n    if (this.isAnyWorkflowEnabled()) {\n      this.startWorkflow();\n    }\n  }\n\n  private loadConfig(): WorkflowConfig {\n    if (typeof window === 'undefined') {\n      return this.getDefaultConfig();\n    }\n    \n    const saved = localStorage.getItem('automatedWorkflowConfig');\n    return saved ? JSON.parse(saved) : this.getDefaultConfig();\n  }\n\n  private loadStatus(): WorkflowStatus {\n    if (typeof window === 'undefined') {\n      return this.getDefaultStatus();\n    }\n    \n    const saved = localStorage.getItem('automatedWorkflowStatus');\n    return saved ? JSON.parse(saved) : this.getDefaultStatus();\n  }\n\n  private loadTransactions(): Transaction[] {\n    if (typeof window === 'undefined') {\n      return [];\n    }\n    \n    const saved = localStorage.getItem('automatedWorkflowTransactions');\n    return saved ? JSON.parse(saved) : [];\n  }\n\n  private getDefaultConfig(): WorkflowConfig {\n    return {\n      autoDeposit: {\n        enabled: false,\n        amount: 100,\n        frequency: 'weekly',\n        source: 'bank'\n      },\n      autoInvest: {\n        enabled: false,\n        strategy: 'moderate',\n        allocation: {\n          stocks: 40,\n          crypto: 30,\n          forex: 20,\n          commodities: 10\n        },\n        minBalance: 50\n      },\n      autoWithdraw: {\n        enabled: false,\n        profitThreshold: 500,\n        withdrawPercentage: 50,\n        destination: 'bank'\n      }\n    };\n  }\n\n  private getDefaultStatus(): WorkflowStatus {\n    return {\n      isRunning: false,\n      lastExecution: null,\n      nextExecution: null,\n      totalDeposited: 0,\n      totalInvested: 0,\n      totalWithdrawn: 0,\n      currentBalance: 1250.75, // Mock current balance\n      totalProfit: 250.75 // Mock profit\n    };\n  }\n\n  private saveConfig(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('automatedWorkflowConfig', JSON.stringify(this.config));\n    }\n  }\n\n  private saveStatus(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('automatedWorkflowStatus', JSON.stringify(this.status));\n    }\n  }\n\n  private saveTransactions(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('automatedWorkflowTransactions', JSON.stringify(this.transactions));\n    }\n  }\n\n  private isAnyWorkflowEnabled(): boolean {\n    return this.config.autoDeposit.enabled || \n           this.config.autoInvest.enabled || \n           this.config.autoWithdraw.enabled;\n  }\n\n  public updateConfig(newConfig: Partial<WorkflowConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.saveConfig();\n    \n    // Restart workflow with new config\n    this.stopWorkflow();\n    if (this.isAnyWorkflowEnabled()) {\n      this.startWorkflow();\n    }\n    \n    toast.success('Automated workflow configuration updated');\n  }\n\n  public getConfig(): WorkflowConfig {\n    return { ...this.config };\n  }\n\n  public getStatus(): WorkflowStatus {\n    return { ...this.status };\n  }\n\n  public getTransactions(): Transaction[] {\n    return [...this.transactions];\n  }\n\n  public startWorkflow(): void {\n    if (this.intervalId) {\n      this.stopWorkflow();\n    }\n\n    this.status.isRunning = true;\n    this.status.nextExecution = this.calculateNextExecution();\n    this.saveStatus();\n\n    // Run workflow every minute (in production, this would be less frequent)\n    this.intervalId = setInterval(() => {\n      this.executeWorkflow();\n    }, 60000); // 1 minute\n\n    toast.success('Automated workflow started');\n  }\n\n  public stopWorkflow(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n\n    this.status.isRunning = false;\n    this.status.nextExecution = null;\n    this.saveStatus();\n\n    toast.success('Automated workflow stopped');\n  }\n\n  private calculateNextExecution(): Date {\n    const now = new Date();\n    const next = new Date(now);\n    \n    // For demo purposes, set next execution to 1 minute from now\n    next.setMinutes(next.getMinutes() + 1);\n    \n    return next;\n  }\n\n  private async executeWorkflow(): Promise<void> {\n    try {\n      this.status.lastExecution = new Date();\n      \n      // Execute auto deposit\n      if (this.config.autoDeposit.enabled) {\n        await this.executeAutoDeposit();\n      }\n\n      // Execute auto invest\n      if (this.config.autoInvest.enabled && this.status.currentBalance >= this.config.autoInvest.minBalance) {\n        await this.executeAutoInvest();\n      }\n\n      // Execute auto withdraw\n      if (this.config.autoWithdraw.enabled && this.status.totalProfit >= this.config.autoWithdraw.profitThreshold) {\n        await this.executeAutoWithdraw();\n      }\n\n      this.status.nextExecution = this.calculateNextExecution();\n      this.saveStatus();\n      \n    } catch (error) {\n      console.error('Workflow execution failed:', error);\n      toast.error('Automated workflow execution failed');\n    }\n  }\n\n  private async executeAutoDeposit(): Promise<void> {\n    const transaction: Transaction = {\n      id: `dep_${Date.now()}`,\n      type: 'deposit',\n      amount: this.config.autoDeposit.amount,\n      status: 'pending',\n      timestamp: new Date(),\n      description: `Auto deposit from ${this.config.autoDeposit.source}`\n    };\n\n    this.transactions.unshift(transaction);\n    this.saveTransactions();\n\n    // Simulate deposit processing\n    setTimeout(() => {\n      transaction.status = 'completed';\n      this.status.totalDeposited += transaction.amount;\n      this.status.currentBalance += transaction.amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Auto deposit of $${transaction.amount} completed`);\n    }, 2000);\n  }\n\n  private async executeAutoInvest(): Promise<void> {\n    const investAmount = Math.min(\n      this.status.currentBalance - this.config.autoInvest.minBalance,\n      this.status.currentBalance * 0.8 // Invest max 80% of available balance\n    );\n\n    if (investAmount <= 0) return;\n\n    const transaction: Transaction = {\n      id: `inv_${Date.now()}`,\n      type: 'invest',\n      amount: investAmount,\n      status: 'pending',\n      timestamp: new Date(),\n      description: `Auto investment using ${this.config.autoInvest.strategy} strategy`\n    };\n\n    this.transactions.unshift(transaction);\n    this.saveTransactions();\n\n    // Simulate investment processing\n    setTimeout(() => {\n      transaction.status = 'completed';\n      this.status.totalInvested += transaction.amount;\n      this.status.currentBalance -= transaction.amount;\n      \n      // Simulate profit generation (random between 1-5%)\n      const profitRate = (Math.random() * 4 + 1) / 100;\n      const profit = transaction.amount * profitRate;\n      this.status.totalProfit += profit;\n      this.status.currentBalance += profit;\n      \n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Auto investment of $${transaction.amount.toFixed(2)} completed`);\n    }, 3000);\n  }\n\n  private async executeAutoWithdraw(): Promise<void> {\n    const withdrawAmount = (this.status.totalProfit * this.config.autoWithdraw.withdrawPercentage) / 100;\n\n    if (withdrawAmount <= 0) return;\n\n    const transaction: Transaction = {\n      id: `wit_${Date.now()}`,\n      type: 'withdraw',\n      amount: withdrawAmount,\n      status: 'pending',\n      timestamp: new Date(),\n      description: `Auto withdrawal to ${this.config.autoWithdraw.destination}`\n    };\n\n    this.transactions.unshift(transaction);\n    this.saveTransactions();\n\n    // Simulate withdrawal processing\n    setTimeout(() => {\n      transaction.status = 'completed';\n      this.status.totalWithdrawn += transaction.amount;\n      this.status.currentBalance -= transaction.amount;\n      this.status.totalProfit -= transaction.amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Auto withdrawal of $${transaction.amount.toFixed(2)} completed`);\n    }, 4000);\n  }\n\n  public async manualDeposit(amount: number, source: string): Promise<void> {\n    try {\n      const transaction: Transaction = {\n        id: `man_dep_${Date.now()}`,\n        type: 'deposit',\n        amount,\n        status: 'pending',\n        timestamp: new Date(),\n        description: `Manual deposit from ${source}`\n      };\n\n      this.transactions.unshift(transaction);\n      this.saveTransactions();\n\n      // Process deposit with balance tracking\n      await balanceTrackingService.processDeposit(amount);\n      \n      transaction.status = 'completed';\n      this.status.totalDeposited += amount;\n      this.status.currentBalance += amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Deposit of $${amount} completed`);\n    } catch (error) {\n      toast.error('Deposit failed. Please try again.');\n      throw error;\n    }\n  }\n\n  public async manualWithdraw(amount: number, destination: string): Promise<void> {\n    try {\n      if (amount > this.status.currentBalance) {\n        toast.error('Insufficient balance for withdrawal');\n        throw new Error('Insufficient balance');\n      }\n\n      const transaction: Transaction = {\n        id: `man_wit_${Date.now()}`,\n        type: 'withdraw',\n        amount,\n        status: 'pending',\n        timestamp: new Date(),\n        description: `Manual withdrawal to ${destination}`\n      };\n\n      this.transactions.unshift(transaction);\n      this.saveTransactions();\n\n      // Process withdrawal with balance tracking\n      await balanceTrackingService.processWithdrawal(amount);\n      \n      transaction.status = 'completed';\n      this.status.totalWithdrawn += amount;\n      this.status.currentBalance -= amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Withdrawal of $${amount} completed`);\n    } catch (error) {\n      toast.error('Withdrawal failed. Please try again.');\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const automatedWorkflowService = new AutomatedWorkflowService();\nexport default automatedWorkflowService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/tradingService.ts"],"sourcesContent":["import axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { errorHandler, handleNetworkError, handleTradingError, handleValidationError } from '@/lib/errorHandler';\n\n// Market types supported by GainzAlgo integration\nexport type MarketType = 'STOCKS' | 'CRYPTO' | 'FOREX';\nexport type TimeFrame = '1m' | '5m' | '15m' | '30m' | '1h' | '4h' | '1d' | '1w';\nexport type SignalType = 'BUY' | 'SELL' | 'HOLD';\n\n// GainzAlgo Signal Interface\nexport interface TradingSignal {\n  id: string;\n  symbol: string;\n  marketType: MarketType;\n  signalType: SignalType;\n  confidence: number; // 0-100%\n  entryPrice: number;\n  stopLoss: number;\n  takeProfit: number;\n  timeFrame: TimeFrame;\n  timestamp: string;\n  riskRewardRatio: number;\n  profitFactor?: number;\n}\n\n// Enhanced Trade Request with GainzAlgo features\nexport interface CreateTradeRequest {\n  portfolioId: string;\n  symbol: string;\n  marketType: MarketType;\n  side: 'BUY' | 'SELL';\n  quantity: number;\n  price: number;\n  stopLoss?: number;\n  takeProfit?: number;\n  orderType?: 'MARKET' | 'LIMIT' | 'STOP';\n  signalId?: string; // Reference to GainzAlgo signal\n  timeFrame?: TimeFrame;\n  brokerAccountId?: string; // Selected broker account for execution\n  brokerConnectionId?: string; // Broker connection ID\n}\n\n// Enhanced Trade interface with GainzAlgo features\nexport interface Trade {\n  id: string;\n  symbol: string;\n  userId: string;\n  portfolioId: string;\n  marketType: MarketType;\n  side: 'BUY' | 'SELL';\n  quantity: number;\n  price: number;\n  stopLoss?: number;\n  takeProfit?: number;\n  totalValue: number;\n  status: 'PENDING' | 'EXECUTED' | 'CANCELLED' | 'FAILED';\n  executedAt?: string;\n  createdAt: string;\n  signalId?: string;\n  timeFrame?: TimeFrame;\n  actualPnL?: number;\n  winRate?: number;\n  profitFactor?: number;\n  portfolio?: {\n    id: string;\n    name: string;\n  };\n}\n\n// Performance Tracking Interfaces\nexport interface PerformanceMetrics {\n  totalTrades: number;\n  winningTrades: number;\n  losingTrades: number;\n  winRate: number; // percentage\n  profitFactor: number;\n  totalPnL: number;\n  maxDrawdown: number;\n  currentDrawdown: number;\n  averageWin: number;\n  averageLoss: number;\n  riskRewardRatio: number;\n}\n\nexport interface MarketPerformance {\n  marketType: MarketType;\n  metrics: PerformanceMetrics;\n  signals: TradingSignal[];\n  lastUpdated: string;\n}\n\nexport interface TradesResponse {\n  success: boolean;\n  data: {\n    trades: Trade[];\n    pagination: {\n      page: number;\n      limit: number;\n      total: number;\n      pages: number;\n    };\n  };\n}\n\nexport interface CreateTradeResponse {\n  success: boolean;\n  data: {\n    trade: Trade;\n  };\n}\n\nclass TradingService {\n  /**\n   * Create a new trade\n   */\n  async createTrade(tradeData: CreateTradeRequest): Promise<Trade> {\n    try {\n      const response = await axios.post<CreateTradeResponse>('/trades', tradeData);\n      \n      if (response.data.success) {\n        toast.success(`${tradeData.side} order for ${tradeData.symbol} placed successfully!`);\n        return response.data.data.trade;\n      } else {\n        throw new Error('Failed to create trade');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Create Trade');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Get user's trades with optional filters\n   */\n  async getTrades(params?: {\n    page?: number;\n    limit?: number;\n    portfolioId?: string;\n    symbol?: string;\n    side?: 'BUY' | 'SELL';\n    status?: 'PENDING' | 'EXECUTED' | 'CANCELLED' | 'FAILED';\n  }): Promise<TradesResponse['data']> {\n    try {\n      const response = await axios.get<TradesResponse>('/trades', { params });\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error('Failed to fetch trades');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Trades');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Get a specific trade by ID\n   */\n  async getTradeById(tradeId: string): Promise<Trade> {\n    try {\n      const response = await axios.get<CreateTradeResponse>(`/trades/${tradeId}`);\n      \n      if (response.data.success) {\n        return response.data.data.trade;\n      } else {\n        throw new Error('Failed to fetch trade');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Trade By ID');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Cancel a pending trade\n   */\n  async cancelTrade(tradeId: string): Promise<Trade> {\n    try {\n      const response = await axios.put<CreateTradeResponse>(`/trades/${tradeId}/cancel`);\n      \n      if (response.data.success) {\n        toast.success('Trade cancelled successfully!');\n        return response.data.data.trade;\n      } else {\n        throw new Error('Failed to cancel trade');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Cancel Trade');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Validate trade data before submission\n   */\n  validateTradeData(tradeData: CreateTradeRequest): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!tradeData.portfolioId) {\n      const error = handleValidationError('Portfolio is required', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    if (!tradeData.symbol) {\n      const error = handleValidationError('Symbol is required', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    if (!tradeData.side) {\n      const error = handleValidationError('Order side (BUY/SELL) is required', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    if (!tradeData.quantity || tradeData.quantity <= 0) {\n      const error = handleValidationError('Quantity must be greater than 0', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    if (!tradeData.price || tradeData.price <= 0) {\n      const error = handleValidationError('Price must be greater than 0', 'Trade Validation');\n      errors.push(error.message);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  // GainzAlgo Integration Methods\n\n  /**\n   * Generate trading signals using GainzAlgo algorithm\n   */\n  async generateSignals(marketType: MarketType, timeFrame: TimeFrame, symbols?: string[]): Promise<TradingSignal[]> {\n    try {\n      const response = await axios.post('/trading/signals/generate', {\n        marketType,\n        timeFrame,\n        symbols\n      });\n      \n      if (response.data.success) {\n        return response.data.data.signals;\n      } else {\n        throw new Error('Failed to generate signals');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Generate Signals');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Get active trading signals\n   */\n  async getActiveSignals(marketType?: MarketType): Promise<TradingSignal[]> {\n    try {\n      const params = marketType ? { marketType } : {};\n      const response = await axios.get('/trading/signals/active', { params });\n      \n      if (response.data.success) {\n        return response.data.data.signals;\n      } else {\n        throw new Error('Failed to fetch active signals');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Active Signals');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Calculate Stop Loss and Take Profit levels\n   */\n  calculateSLTP(entryPrice: number, signalType: SignalType, riskPercent: number = 2, rewardRatio: number = 2): { stopLoss: number; takeProfit: number } {\n    const riskAmount = entryPrice * (riskPercent / 100);\n    \n    if (signalType === 'BUY') {\n      const stopLoss = entryPrice - riskAmount;\n      const takeProfit = entryPrice + (riskAmount * rewardRatio);\n      return { stopLoss, takeProfit };\n    } else {\n      const stopLoss = entryPrice + riskAmount;\n      const takeProfit = entryPrice - (riskAmount * rewardRatio);\n      return { stopLoss, takeProfit };\n    }\n  }\n\n  /**\n   * Get performance metrics for a specific market or overall\n   */\n  async getPerformanceMetrics(marketType?: MarketType, timeRange?: string): Promise<PerformanceMetrics> {\n    try {\n      const params = { marketType, timeRange };\n      const response = await axios.get('/trading/performance/metrics', { params });\n      \n      if (response.data.success) {\n        return response.data.data.metrics;\n      } else {\n        throw new Error('Failed to fetch performance metrics');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Performance Metrics');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Get market-specific performance data\n   */\n  async getMarketPerformance(): Promise<MarketPerformance[]> {\n    try {\n      const response = await axios.get('/trading/performance/markets');\n      \n      if (response.data.success) {\n        return response.data.data.markets;\n      } else {\n        throw new Error('Failed to fetch market performance');\n      }\n    } catch (error: any) {\n      const handledError = handleNetworkError(error, 'Trading Service - Get Market Performance');\n      throw handledError;\n    }\n  }\n\n  /**\n   * Calculate win rate from trades\n   */\n  calculateWinRate(trades: Trade[]): number {\n    if (trades.length === 0) return 0;\n    \n    const executedTrades = trades.filter(trade => trade.status === 'EXECUTED' && trade.actualPnL !== undefined);\n    if (executedTrades.length === 0) return 0;\n    \n    const winningTrades = executedTrades.filter(trade => (trade.actualPnL || 0) > 0);\n    return (winningTrades.length / executedTrades.length) * 100;\n  }\n\n  /**\n   * Calculate profit factor from trades\n   */\n  calculateProfitFactor(trades: Trade[]): number {\n    const executedTrades = trades.filter(trade => trade.status === 'EXECUTED' && trade.actualPnL !== undefined);\n    if (executedTrades.length === 0) return 0;\n    \n    const grossProfit = executedTrades\n      .filter(trade => (trade.actualPnL || 0) > 0)\n      .reduce((sum, trade) => sum + (trade.actualPnL || 0), 0);\n    \n    const grossLoss = Math.abs(executedTrades\n      .filter(trade => (trade.actualPnL || 0) < 0)\n      .reduce((sum, trade) => sum + (trade.actualPnL || 0), 0));\n    \n    return grossLoss === 0 ? (grossProfit > 0 ? Infinity : 0) : grossProfit / grossLoss;\n  }\n\n  /**\n   * Calculate maximum drawdown\n   */\n  calculateMaxDrawdown(trades: Trade[]): number {\n    const executedTrades = trades\n      .filter(trade => trade.status === 'EXECUTED' && trade.actualPnL !== undefined)\n      .sort((a, b) => new Date(a.executedAt || a.createdAt).getTime() - new Date(b.executedAt || b.createdAt).getTime());\n    \n    if (executedTrades.length === 0) return 0;\n    \n    let peak = 0;\n    let maxDrawdown = 0;\n    let runningPnL = 0;\n    \n    for (const trade of executedTrades) {\n      runningPnL += trade.actualPnL || 0;\n      \n      if (runningPnL > peak) {\n        peak = runningPnL;\n      }\n      \n      const drawdown = peak - runningPnL;\n      if (drawdown > maxDrawdown) {\n        maxDrawdown = drawdown;\n      }\n    }\n    \n    return maxDrawdown;\n  }\n\n  /**\n   * Execute trade based on signal with automatic SL/TP\n   */\n  async executeSignalTrade(signal: TradingSignal, portfolioId: string, quantity: number, riskPercent: number = 2): Promise<Trade> {\n    const { stopLoss, takeProfit } = this.calculateSLTP(signal.entryPrice, signal.signalType, riskPercent);\n    \n    const tradeData: CreateTradeRequest = {\n      portfolioId,\n      symbol: signal.symbol,\n      marketType: signal.marketType,\n      side: signal.signalType === 'BUY' ? 'BUY' : 'SELL',\n      quantity,\n      price: signal.entryPrice,\n      stopLoss,\n      takeProfit,\n      signalId: signal.id,\n      timeFrame: signal.timeFrame,\n      orderType: 'MARKET'\n    };\n    \n    return this.createTrade(tradeData);\n  }\n}\n\nexport const tradingService = new TradingService();\nexport default tradingService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 744, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/liveMarketService.ts"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { logger } from '@/lib/logger';\n\n// Live Market Data Service for TradingView-style functionality\n\nexport interface MarketTicker {\n  symbol: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  high24h: number;\n  low24h: number;\n  marketCap?: number;\n  lastUpdate: number;\n}\n\nexport interface CandlestickData {\n  time: number;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n}\n\nexport interface OrderBookEntry {\n  price: number;\n  size: number;\n  total: number;\n}\n\nexport interface OrderBook {\n  symbol: string;\n  bids: OrderBookEntry[];\n  asks: OrderBookEntry[];\n  lastUpdate: number;\n}\n\nexport interface Trade {\n  id: string;\n  symbol: string;\n  price: number;\n  size: number;\n  side: 'buy' | 'sell';\n  timestamp: number;\n}\n\nexport interface MarketStats {\n  symbol: string;\n  volume24h: number;\n  volumeChange24h: number;\n  trades24h: number;\n  high24h: number;\n  low24h: number;\n  openPrice: number;\n  closePrice: number;\n  lastUpdate: number;\n}\n\nexport interface FuturesData {\n  symbol: string;\n  contractMonth: string;\n  expirationDate: string;\n  openInterest: number;\n  settlementPrice: number;\n  marginRequirement: number;\n  tickSize: number;\n  contractSize: number;\n  lastTradingDay: string;\n}\n\nexport interface OptionsData {\n  symbol: string;\n  underlying: string;\n  strike: number;\n  expiration: string;\n  optionType: 'call' | 'put';\n  impliedVolatility: number;\n  delta: number;\n  gamma: number;\n  theta: number;\n  vega: number;\n  rho: number;\n  openInterest: number;\n  timeToExpiration: number;\n  intrinsicValue: number;\n  timeValue: number;\n}\n\nexport interface DerivativeInstrument {\n  type: 'spot' | 'futures' | 'options';\n  symbol: string;\n  marketData: MarketTicker;\n  futuresData?: FuturesData;\n  optionsData?: OptionsData;\n}\n\nclass LiveMarketService {\n  private subscribers: Map<string, Set<(data: any) => void>> = new Map();\n  private marketData: Map<string, MarketTicker> = new Map();\n  private candlestickData: Map<string, CandlestickData[]> = new Map();\n  private orderBooks: Map<string, OrderBook> = new Map();\n  private recentTrades: Map<string, Trade[]> = new Map();\n  private updateIntervals: Map<string, NodeJS.Timeout> = new Map();\n  private isConnected = false;\n\n  // Supported trading pairs\n  private readonly SUPPORTED_SYMBOLS = [\n    // Cryptocurrencies\n    'BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOTUSDT', 'LINKUSDT',\n    'MATICUSDT', 'AVAXUSDT', 'ATOMUSDT', 'NEARUSDT', 'FTMUSDT', 'SANDUSDT',\n    'MANAUSDT', 'CHZUSDT', 'ENJUSDT', 'GALAUSDT',\n    // Major Indices\n    'SPY', 'QQQ', 'DJI', 'IXIC', 'RUT', 'VTI', 'IWM',\n    // Futures\n    'ES', 'NQ', 'YM', 'RTY', 'CL', 'GC', 'SI', 'NG', 'ZB', 'ZN', 'ZF', 'ZT',\n    'BTC-PERP', 'ETH-PERP', 'SOL-PERP', 'ADA-PERP',\n    // Options\n    'SPY-C-430-2024-03-15', 'SPY-P-430-2024-03-15', 'QQQ-C-370-2024-03-15', 'QQQ-P-370-2024-03-15',\n    'AAPL-C-180-2024-03-15', 'AAPL-P-180-2024-03-15', 'TSLA-C-200-2024-03-15', 'TSLA-P-200-2024-03-15',\n    'BTC-C-50000-2024-03-29', 'BTC-P-50000-2024-03-29', 'ETH-C-3000-2024-03-29', 'ETH-P-3000-2024-03-29'\n  ];\n\n  constructor() {\n    this.initializeMarketData();\n    this.startDataSimulation();\n  }\n\n  // Initialize mock market data\n  private initializeMarketData(): void {\n    const baseData = {\n      // Cryptocurrencies\n      BTCUSDT: { basePrice: 45000, volatility: 0.02 },\n      ETHUSDT: { basePrice: 2800, volatility: 0.025 },\n      ADAUSDT: { basePrice: 0.45, volatility: 0.03 },\n      SOLUSDT: { basePrice: 98, volatility: 0.035 },\n      DOTUSDT: { basePrice: 6.5, volatility: 0.03 },\n      LINKUSDT: { basePrice: 14.2, volatility: 0.028 },\n      MATICUSDT: { basePrice: 0.85, volatility: 0.032 },\n      AVAXUSDT: { basePrice: 35, volatility: 0.03 },\n      ATOMUSDT: { basePrice: 9.8, volatility: 0.029 },\n      NEARUSDT: { basePrice: 2.1, volatility: 0.034 },\n      FTMUSDT: { basePrice: 0.32, volatility: 0.036 },\n      SANDUSDT: { basePrice: 0.48, volatility: 0.038 },\n      MANAUSDT: { basePrice: 0.42, volatility: 0.037 },\n      CHZUSDT: { basePrice: 0.089, volatility: 0.04 },\n      ENJUSDT: { basePrice: 0.28, volatility: 0.035 },\n      GALAUSDT: { basePrice: 0.035, volatility: 0.042 },\n      // Major Indices\n      SPY: { basePrice: 428.50, volatility: 0.015 },\n      QQQ: { basePrice: 365.20, volatility: 0.018 },\n      DJI: { basePrice: 37689.54, volatility: 0.012 },\n      IXIC: { basePrice: 14845.73, volatility: 0.020 },\n      RUT: { basePrice: 2045.32, volatility: 0.025 },\n      VTI: { basePrice: 245.30, volatility: 0.014 },\n      IWM: { basePrice: 198.75, volatility: 0.022 },\n      // Futures\n      ES: { basePrice: 4285.50, volatility: 0.018 },\n      NQ: { basePrice: 14850.25, volatility: 0.022 },\n      YM: { basePrice: 37650.00, volatility: 0.015 },\n      RTY: { basePrice: 2045.80, volatility: 0.028 },\n      CL: { basePrice: 78.45, volatility: 0.035 },\n      GC: { basePrice: 2025.60, volatility: 0.025 },\n      SI: { basePrice: 24.85, volatility: 0.040 },\n      NG: { basePrice: 2.85, volatility: 0.055 },\n      ZB: { basePrice: 112.25, volatility: 0.012 },\n      ZN: { basePrice: 108.75, volatility: 0.015 },\n      ZF: { basePrice: 105.50, volatility: 0.010 },\n      ZT: { basePrice: 102.25, volatility: 0.008 },\n      'BTC-PERP': { basePrice: 45200.00, volatility: 0.025 },\n      'ETH-PERP': { basePrice: 2820.00, volatility: 0.030 },\n      'SOL-PERP': { basePrice: 99.50, volatility: 0.040 },\n      'ADA-PERP': { basePrice: 0.46, volatility: 0.035 },\n      // Options\n      'SPY-C-430-2024-03-15': { basePrice: 8.50, volatility: 0.45 },\n      'SPY-P-430-2024-03-15': { basePrice: 9.25, volatility: 0.42 },\n      'QQQ-C-370-2024-03-15': { basePrice: 12.75, volatility: 0.38 },\n      'QQQ-P-370-2024-03-15': { basePrice: 17.50, volatility: 0.40 },\n      'AAPL-C-180-2024-03-15': { basePrice: 5.25, volatility: 0.35 },\n      'AAPL-P-180-2024-03-15': { basePrice: 6.80, volatility: 0.37 },\n      'TSLA-C-200-2024-03-15': { basePrice: 15.60, volatility: 0.55 },\n      'TSLA-P-200-2024-03-15': { basePrice: 18.90, volatility: 0.52 },\n      'BTC-C-50000-2024-03-29': { basePrice: 2850.00, volatility: 0.65 },\n      'BTC-P-50000-2024-03-29': { basePrice: 7650.00, volatility: 0.68 },\n      'ETH-C-3000-2024-03-29': { basePrice: 285.50, volatility: 0.60 },\n      'ETH-P-3000-2024-03-29': { basePrice: 465.25, volatility: 0.62 }\n    };\n\n    this.SUPPORTED_SYMBOLS.forEach(symbol => {\n      const config = baseData[symbol as keyof typeof baseData];\n      if (config) {\n        const currentPrice = config.basePrice * (1 + (Math.random() - 0.5) * 0.1);\n        const change = (Math.random() - 0.5) * config.basePrice * 0.05;\n        const changePercent = (change / (currentPrice - change)) * 100;\n        \n        this.marketData.set(symbol, {\n          symbol,\n          price: currentPrice,\n          change,\n          changePercent,\n          volume: Math.random() * 10000000 + 1000000,\n          high24h: currentPrice * (1 + Math.random() * 0.05),\n          low24h: currentPrice * (1 - Math.random() * 0.05),\n          marketCap: currentPrice * (Math.random() * 1000000000 + 100000000),\n          lastUpdate: Date.now()\n        });\n\n        // Initialize candlestick data\n        this.initializeCandlestickData(symbol, currentPrice, config.volatility);\n        \n        // Initialize order book\n        this.initializeOrderBook(symbol, currentPrice);\n        \n        // Initialize recent trades\n        this.initializeRecentTrades(symbol, currentPrice);\n      }\n    });\n  }\n\n  private initializeCandlestickData(symbol: string, basePrice: number, volatility: number): void {\n    const candles: CandlestickData[] = [];\n    let currentPrice = basePrice;\n    const now = Date.now();\n    \n    // Generate 100 historical candles (1 minute each)\n    for (let i = 99; i >= 0; i--) {\n      const time = now - (i * 60 * 1000);\n      const open = currentPrice;\n      const priceChange = (Math.random() - 0.5) * basePrice * volatility;\n      const close = Math.max(0.01, open + priceChange);\n      const high = Math.max(open, close) * (1 + Math.random() * 0.01);\n      const low = Math.min(open, close) * (1 - Math.random() * 0.01);\n      const volume = Math.random() * 1000000 + 10000;\n      \n      candles.push({\n        time,\n        open,\n        high,\n        low,\n        close,\n        volume\n      });\n      \n      currentPrice = close;\n    }\n    \n    this.candlestickData.set(symbol, candles);\n  }\n\n  private initializeOrderBook(symbol: string, currentPrice: number): void {\n    const bids: OrderBookEntry[] = [];\n    const asks: OrderBookEntry[] = [];\n    \n    // Generate 20 bid levels\n    for (let i = 1; i <= 20; i++) {\n      const price = currentPrice - (i * currentPrice * 0.001);\n      const size = Math.random() * 10 + 0.1;\n      bids.push({\n        price,\n        size,\n        total: size * price\n      });\n    }\n    \n    // Generate 20 ask levels\n    for (let i = 1; i <= 20; i++) {\n      const price = currentPrice + (i * currentPrice * 0.001);\n      const size = Math.random() * 10 + 0.1;\n      asks.push({\n        price,\n        size,\n        total: size * price\n      });\n    }\n    \n    this.orderBooks.set(symbol, {\n      symbol,\n      bids,\n      asks,\n      lastUpdate: Date.now()\n    });\n  }\n\n  private initializeRecentTrades(symbol: string, currentPrice: number): void {\n    const trades: Trade[] = [];\n    const now = Date.now();\n    \n    // Generate 50 recent trades\n    for (let i = 0; i < 50; i++) {\n      trades.push({\n        id: `trade_${symbol}_${i}`,\n        symbol,\n        price: currentPrice * (1 + (Math.random() - 0.5) * 0.01),\n        size: Math.random() * 5 + 0.01,\n        side: Math.random() > 0.5 ? 'buy' : 'sell',\n        timestamp: now - (i * 1000)\n      });\n    }\n    \n    this.recentTrades.set(symbol, trades.reverse());\n  }\n\n  // Start real-time data simulation\n  private startDataSimulation(): void {\n    this.isConnected = true;\n    \n    // Update market data every 1 second\n    const marketUpdateInterval = setInterval(() => {\n      this.updateMarketData();\n    }, 1000);\n    \n    // Update candlestick data every 5 seconds\n    const candleUpdateInterval = setInterval(() => {\n      this.updateCandlestickData();\n    }, 5000);\n    \n    // Update order books every 500ms\n    const orderBookUpdateInterval = setInterval(() => {\n      this.updateOrderBooks();\n    }, 500);\n    \n    // Add new trades every 2 seconds\n    const tradesUpdateInterval = setInterval(() => {\n      this.updateRecentTrades();\n    }, 2000);\n    \n    this.updateIntervals.set('market', marketUpdateInterval);\n    this.updateIntervals.set('candles', candleUpdateInterval);\n    this.updateIntervals.set('orderbook', orderBookUpdateInterval);\n    this.updateIntervals.set('trades', tradesUpdateInterval);\n  }\n\n  private updateMarketData(): void {\n    this.marketData.forEach((ticker, symbol) => {\n      const volatility = this.getVolatilityForSymbol(symbol);\n      const priceChange = (Math.random() - 0.5) * ticker.price * volatility * 0.1;\n      const newPrice = Math.max(0.01, ticker.price + priceChange);\n      const change = newPrice - ticker.price;\n      const changePercent = (change / ticker.price) * 100;\n      \n      const updatedTicker: MarketTicker = {\n        ...ticker,\n        price: newPrice,\n        change: ticker.change + change,\n        changePercent: ticker.changePercent + changePercent,\n        volume: ticker.volume + Math.random() * 10000,\n        high24h: Math.max(ticker.high24h, newPrice),\n        low24h: Math.min(ticker.low24h, newPrice),\n        lastUpdate: Date.now()\n      };\n      \n      this.marketData.set(symbol, updatedTicker);\n      this.notifySubscribers(`ticker:${symbol}`, updatedTicker);\n    });\n  }\n\n  private updateCandlestickData(): void {\n    this.candlestickData.forEach((candles, symbol) => {\n      const ticker = this.marketData.get(symbol);\n      if (!ticker) return;\n      \n      const lastCandle = candles[candles.length - 1];\n      const now = Date.now();\n      \n      // If last candle is older than 1 minute, create a new one\n      if (now - lastCandle.time > 60000) {\n        const newCandle: CandlestickData = {\n          time: now,\n          open: lastCandle.close,\n          high: ticker.price,\n          low: ticker.price,\n          close: ticker.price,\n          volume: Math.random() * 100000 + 1000\n        };\n        \n        candles.push(newCandle);\n        \n        // Keep only last 200 candles\n        if (candles.length > 200) {\n          candles.shift();\n        }\n      } else {\n        // Update current candle\n        lastCandle.close = ticker.price;\n        lastCandle.high = Math.max(lastCandle.high, ticker.price);\n        lastCandle.low = Math.min(lastCandle.low, ticker.price);\n        lastCandle.volume += Math.random() * 1000;\n      }\n      \n      this.notifySubscribers(`candles:${symbol}`, candles.slice(-100));\n    });\n  }\n\n  private updateOrderBooks(): void {\n    this.orderBooks.forEach((orderBook, symbol) => {\n      const ticker = this.marketData.get(symbol);\n      if (!ticker) return;\n      \n      // Simulate order book changes\n      const updatedBids = orderBook.bids.map(bid => ({\n        ...bid,\n        size: Math.max(0.01, bid.size + (Math.random() - 0.5) * 0.5),\n        price: ticker.price * (1 - Math.random() * 0.01)\n      }));\n      \n      const updatedAsks = orderBook.asks.map(ask => ({\n        ...ask,\n        size: Math.max(0.01, ask.size + (Math.random() - 0.5) * 0.5),\n        price: ticker.price * (1 + Math.random() * 0.01)\n      }));\n      \n      const updatedOrderBook: OrderBook = {\n        symbol,\n        bids: updatedBids.sort((a, b) => b.price - a.price),\n        asks: updatedAsks.sort((a, b) => a.price - b.price),\n        lastUpdate: Date.now()\n      };\n      \n      this.orderBooks.set(symbol, updatedOrderBook);\n      this.notifySubscribers(`orderbook:${symbol}`, updatedOrderBook);\n    });\n  }\n\n  private updateRecentTrades(): void {\n    this.recentTrades.forEach((trades, symbol) => {\n      const ticker = this.marketData.get(symbol);\n      if (!ticker) return;\n      \n      // Add new trade\n      const newTrade: Trade = {\n        id: `trade_${symbol}_${Date.now()}`,\n        symbol,\n        price: ticker.price * (1 + (Math.random() - 0.5) * 0.005),\n        size: Math.random() * 2 + 0.01,\n        side: Math.random() > 0.5 ? 'buy' : 'sell',\n        timestamp: Date.now()\n      };\n      \n      trades.push(newTrade);\n      \n      // Keep only last 100 trades\n      if (trades.length > 100) {\n        trades.shift();\n      }\n      \n      this.notifySubscribers(`trades:${symbol}`, trades.slice(-20));\n    });\n  }\n\n  private getVolatilityForSymbol(symbol: string): number {\n    const volatilityMap: { [key: string]: number } = {\n      'BTCUSDT': 0.02,\n      'ETHUSDT': 0.025,\n      'ADAUSDT': 0.03,\n      'SOLUSDT': 0.035,\n      'DOTUSDT': 0.03,\n      'LINKUSDT': 0.028,\n      'MATICUSDT': 0.032,\n      'AVAXUSDT': 0.03,\n      'ATOMUSDT': 0.029,\n      'NEARUSDT': 0.034,\n      'FTMUSDT': 0.036,\n      'SANDUSDT': 0.038,\n      'MANAUSDT': 0.037,\n      'CHZUSDT': 0.04,\n      'ENJUSDT': 0.035,\n      'GALAUSDT': 0.042\n    };\n    \n    return volatilityMap[symbol] || 0.03;\n  }\n\n  private notifySubscribers(channel: string, data: any): void {\n    const subscribers = this.subscribers.get(channel);\n    if (subscribers) {\n      subscribers.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          logger.error('Failed to notify market data subscriber', error, 'LiveMarketService');\n        }\n      });\n    }\n  }\n\n  // Public API methods\n  public subscribe(channel: string, callback: (data: any) => void): () => void {\n    if (!this.subscribers.has(channel)) {\n      this.subscribers.set(channel, new Set());\n    }\n    \n    this.subscribers.get(channel)!.add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      const subscribers = this.subscribers.get(channel);\n      if (subscribers) {\n        subscribers.delete(callback);\n        if (subscribers.size === 0) {\n          this.subscribers.delete(channel);\n        }\n      }\n    };\n  }\n\n  public getMarketData(symbol?: string): MarketTicker | MarketTicker[] | null {\n    if (symbol) {\n      return this.marketData.get(symbol) || null;\n    }\n    return Array.from(this.marketData.values());\n  }\n\n  public getCandlestickData(symbol: string, limit = 100): CandlestickData[] {\n    const candles = this.candlestickData.get(symbol) || [];\n    return candles.slice(-limit);\n  }\n\n  public getOrderBook(symbol: string): OrderBook | null {\n    return this.orderBooks.get(symbol) || null;\n  }\n\n  public getRecentTrades(symbol: string, limit = 20): Trade[] {\n    const trades = this.recentTrades.get(symbol) || [];\n    return trades.slice(-limit);\n  }\n\n  public getSupportedSymbols(): string[] {\n    return [...this.SUPPORTED_SYMBOLS];\n  }\n\n  public isConnectedToMarket(): boolean {\n    return this.isConnected;\n  }\n\n  public connect(): void {\n    if (!this.isConnected) {\n      this.initializeMarketData();\n      this.startDataSimulation();\n      logger.info('Live market service connected', 'LiveMarketService');\n    }\n  }\n\n  public disconnect(): void {\n    this.isConnected = false;\n    this.updateIntervals.forEach(interval => clearInterval(interval));\n    this.updateIntervals.clear();\n    this.subscribers.clear();\n    logger.info('Live market service disconnected', 'LiveMarketService');\n  }\n\n  // Market analysis helpers\n  public getMarketStats(symbol: string): MarketStats | null {\n    const ticker = this.marketData.get(symbol);\n    const candles = this.candlestickData.get(symbol);\n    \n    if (!ticker || !candles || candles.length === 0) {\n      return null;\n    }\n    \n    const last24hCandles = candles.filter(c => Date.now() - c.time <= 24 * 60 * 60 * 1000);\n    const volume24h = last24hCandles.reduce((sum, c) => sum + c.volume, 0);\n    const trades24h = last24hCandles.length;\n    \n    return {\n      symbol,\n      volume24h,\n      volumeChange24h: Math.random() * 20 - 10, // Mock data\n      trades24h,\n      high24h: ticker.high24h,\n      low24h: ticker.low24h,\n      openPrice: last24hCandles[0]?.open || ticker.price,\n      closePrice: ticker.price,\n      lastUpdate: Date.now()\n    };\n  }\n\n  public calculateTechnicalIndicators(symbol: string): any {\n    const candles = this.getCandlestickData(symbol, 50);\n    if (candles.length < 20) return null;\n    \n    // Simple Moving Average (20 periods)\n    const sma20 = candles.slice(-20).reduce((sum, c) => sum + c.close, 0) / 20;\n    \n    // Exponential Moving Average (12 periods)\n    let ema12 = candles[0].close;\n    const multiplier = 2 / (12 + 1);\n    for (let i = 1; i < candles.length; i++) {\n      ema12 = (candles[i].close * multiplier) + (ema12 * (1 - multiplier));\n    }\n    \n    // RSI (14 periods)\n    const rsiPeriod = 14;\n    if (candles.length >= rsiPeriod + 1) {\n      let gains = 0;\n      let losses = 0;\n      \n      for (let i = candles.length - rsiPeriod; i < candles.length; i++) {\n        const change = candles[i].close - candles[i - 1].close;\n        if (change > 0) {\n          gains += change;\n        } else {\n          losses += Math.abs(change);\n        }\n      }\n      \n      const avgGain = gains / rsiPeriod;\n      const avgLoss = losses / rsiPeriod;\n      const rs = avgGain / avgLoss;\n      const rsi = 100 - (100 / (1 + rs));\n      \n      return {\n        sma20,\n        ema12,\n        rsi,\n        lastUpdate: Date.now()\n      };\n    }\n    \n    return {\n      sma20,\n      ema12,\n      rsi: null,\n      lastUpdate: Date.now()\n    };\n  }\n\n  // Futures-specific methods\n  public getFuturesData(symbol: string): FuturesData | null {\n    if (!this.isFuturesSymbol(symbol)) return null;\n    \n    const contractMonth = this.extractContractMonth(symbol);\n    const expirationDate = this.calculateExpirationDate(symbol);\n    \n    return {\n      symbol,\n      contractMonth,\n      expirationDate,\n      openInterest: Math.floor(Math.random() * 100000) + 50000,\n      settlementPrice: this.marketData.get(symbol)?.price || 0,\n      marginRequirement: this.calculateMarginRequirement(symbol),\n      tickSize: this.getTickSize(symbol),\n      contractSize: this.getContractSize(symbol),\n      lastTradingDay: this.calculateLastTradingDay(symbol)\n    };\n  }\n\n  // Options-specific methods\n  public getOptionsData(symbol: string): OptionsData | null {\n    if (!this.isOptionsSymbol(symbol)) return null;\n    \n    const { underlying, strike, expiration, optionType } = this.parseOptionsSymbol(symbol);\n    const currentPrice = this.marketData.get(symbol)?.price || 0;\n    const underlyingPrice = this.getUnderlyingPrice(underlying);\n    \n    const timeToExpiration = this.calculateTimeToExpiration(expiration);\n    const impliedVolatility = 0.2 + Math.random() * 0.6; // 20-80% IV\n    \n    const greeks = this.calculateGreeks(currentPrice, underlyingPrice, strike, timeToExpiration, impliedVolatility, optionType);\n    \n    return {\n      symbol,\n      underlying,\n      strike,\n      expiration,\n      optionType,\n      impliedVolatility,\n      ...greeks,\n      openInterest: Math.floor(Math.random() * 10000) + 1000,\n      timeToExpiration,\n      intrinsicValue: this.calculateIntrinsicValue(underlyingPrice, strike, optionType),\n      timeValue: currentPrice - this.calculateIntrinsicValue(underlyingPrice, strike, optionType)\n    };\n  }\n\n  public getDerivativeInstrument(symbol: string): DerivativeInstrument | null {\n    const marketData = this.marketData.get(symbol);\n    if (!marketData) return null;\n    \n    let type: 'spot' | 'futures' | 'options' = 'spot';\n    let futuresData: FuturesData | undefined;\n    let optionsData: OptionsData | undefined;\n    \n    if (this.isFuturesSymbol(symbol)) {\n      type = 'futures';\n      futuresData = this.getFuturesData(symbol) || undefined;\n    } else if (this.isOptionsSymbol(symbol)) {\n      type = 'options';\n      optionsData = this.getOptionsData(symbol) || undefined;\n    }\n    \n    return {\n      type,\n      symbol,\n      marketData,\n      futuresData,\n      optionsData\n    };\n  }\n\n  // Helper methods\n  private isFuturesSymbol(symbol: string): boolean {\n    return symbol.includes('-PERP') || ['ES', 'NQ', 'YM', 'RTY', 'CL', 'GC', 'SI', 'NG', 'ZB', 'ZN', 'ZF', 'ZT'].includes(symbol);\n  }\n\n  private isOptionsSymbol(symbol: string): boolean {\n    return symbol.includes('-C-') || symbol.includes('-P-');\n  }\n\n  private extractContractMonth(symbol: string): string {\n    if (symbol.includes('-PERP')) return 'Perpetual';\n    const date = new Date();\n    const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n    return `${months[date.getMonth()]}${date.getFullYear().toString().slice(-2)}`;\n  }\n\n  private calculateExpirationDate(symbol: string): string {\n    if (symbol.includes('-PERP')) return 'N/A';\n    const date = new Date();\n    date.setMonth(date.getMonth() + 1);\n    return date.toISOString().split('T')[0];\n  }\n\n  private calculateMarginRequirement(symbol: string): number {\n    const price = this.marketData.get(symbol)?.price || 0;\n    const marginRates: { [key: string]: number } = {\n      'ES': 0.05, 'NQ': 0.05, 'YM': 0.05, 'RTY': 0.06,\n      'CL': 0.08, 'GC': 0.04, 'SI': 0.06, 'NG': 0.10\n    };\n    return price * (marginRates[symbol] || 0.05);\n  }\n\n  private getTickSize(symbol: string): number {\n    const tickSizes: { [key: string]: number } = {\n      'ES': 0.25, 'NQ': 0.25, 'YM': 1.0, 'RTY': 0.10,\n      'CL': 0.01, 'GC': 0.10, 'SI': 0.005, 'NG': 0.001\n    };\n    return tickSizes[symbol] || 0.01;\n  }\n\n  private getContractSize(symbol: string): number {\n    const contractSizes: { [key: string]: number } = {\n      'ES': 50, 'NQ': 20, 'YM': 5, 'RTY': 50,\n      'CL': 1000, 'GC': 100, 'SI': 5000, 'NG': 10000\n    };\n    return contractSizes[symbol] || 1;\n  }\n\n  private calculateLastTradingDay(symbol: string): string {\n    const date = new Date();\n    date.setMonth(date.getMonth() + 1);\n    date.setDate(15); // Typically 3rd Friday, simplified to 15th\n    return date.toISOString().split('T')[0];\n  }\n\n  private parseOptionsSymbol(symbol: string): { underlying: string; strike: number; expiration: string; optionType: 'call' | 'put' } {\n    const parts = symbol.split('-');\n    return {\n      underlying: parts[0],\n      optionType: parts[1].toLowerCase() === 'c' ? 'call' : 'put',\n      strike: parseFloat(parts[2]),\n      expiration: parts[3]\n    };\n  }\n\n  private getUnderlyingPrice(underlying: string): number {\n    // Map options underlying to actual symbols\n    const underlyingMap: { [key: string]: string } = {\n      'SPY': 'SPY', 'QQQ': 'QQQ', 'AAPL': 'AAPL', 'TSLA': 'TSLA',\n      'BTC': 'BTCUSDT', 'ETH': 'ETHUSDT'\n    };\n    const actualSymbol = underlyingMap[underlying] || underlying;\n    return this.marketData.get(actualSymbol)?.price || 0;\n  }\n\n  private calculateTimeToExpiration(expiration: string): number {\n    const expirationDate = new Date(expiration);\n    const now = new Date();\n    const diffTime = expirationDate.getTime() - now.getTime();\n    return Math.max(0, diffTime / (1000 * 60 * 60 * 24 * 365)); // Years\n  }\n\n  private calculateGreeks(optionPrice: number, underlyingPrice: number, strike: number, timeToExpiration: number, iv: number, optionType: 'call' | 'put') {\n    // Simplified Black-Scholes Greeks calculation\n    const riskFreeRate = 0.05; // 5% risk-free rate\n    const d1 = (Math.log(underlyingPrice / strike) + (riskFreeRate + 0.5 * iv * iv) * timeToExpiration) / (iv * Math.sqrt(timeToExpiration));\n    const d2 = d1 - iv * Math.sqrt(timeToExpiration);\n    \n    const normalCDF = (x: number) => 0.5 * (1 + this.erf(x / Math.sqrt(2)));\n    const normalPDF = (x: number) => Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI);\n    \n    const delta = optionType === 'call' ? normalCDF(d1) : normalCDF(d1) - 1;\n    const gamma = normalPDF(d1) / (underlyingPrice * iv * Math.sqrt(timeToExpiration));\n    const theta = optionType === 'call' \n      ? -(underlyingPrice * normalPDF(d1) * iv) / (2 * Math.sqrt(timeToExpiration)) - riskFreeRate * strike * Math.exp(-riskFreeRate * timeToExpiration) * normalCDF(d2)\n      : -(underlyingPrice * normalPDF(d1) * iv) / (2 * Math.sqrt(timeToExpiration)) + riskFreeRate * strike * Math.exp(-riskFreeRate * timeToExpiration) * normalCDF(-d2);\n    const vega = underlyingPrice * normalPDF(d1) * Math.sqrt(timeToExpiration);\n    const rho = optionType === 'call'\n      ? strike * timeToExpiration * Math.exp(-riskFreeRate * timeToExpiration) * normalCDF(d2)\n      : -strike * timeToExpiration * Math.exp(-riskFreeRate * timeToExpiration) * normalCDF(-d2);\n    \n    return { delta, gamma, theta: theta / 365, vega: vega / 100, rho: rho / 100 };\n  }\n\n  private calculateIntrinsicValue(underlyingPrice: number, strike: number, optionType: 'call' | 'put'): number {\n    if (optionType === 'call') {\n      return Math.max(0, underlyingPrice - strike);\n    } else {\n      return Math.max(0, strike - underlyingPrice);\n    }\n  }\n\n  private erf(x: number): number {\n    // Approximation of error function\n    const a1 =  0.254829592;\n    const a2 = -0.284496736;\n    const a3 =  1.421413741;\n    const a4 = -1.453152027;\n    const a5 =  1.061405429;\n    const p  =  0.3275911;\n    \n    const sign = x >= 0 ? 1 : -1;\n    x = Math.abs(x);\n    \n    const t = 1.0 / (1.0 + p * x);\n    const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n    \n    return sign * y;\n  }\n}\n\n// Export singleton instance\nexport const liveMarketService = new LiveMarketService();\nexport default liveMarketService;\n\n// React hook for easy integration\nexport function useMarketData(symbol?: string) {\n  const [data, setData] = React.useState<MarketTicker | MarketTicker[] | null>(null);\n  \n  React.useEffect(() => {\n    const updateData = () => {\n      setData(liveMarketService.getMarketData(symbol));\n    };\n    \n    updateData();\n    \n    const channel = symbol ? `ticker:${symbol}` : 'ticker:all';\n    const unsubscribe = liveMarketService.subscribe(channel, updateData);\n    \n    return unsubscribe;\n  }, [symbol]);\n  \n  return data;\n}\n\nexport function useCandlestickData(symbol: string, limit = 100) {\n  const [data, setData] = React.useState<CandlestickData[]>([]);\n  \n  React.useEffect(() => {\n    const updateData = (newData: CandlestickData[]) => {\n      setData(newData);\n    };\n    \n    setData(liveMarketService.getCandlestickData(symbol, limit));\n    \n    const unsubscribe = liveMarketService.subscribe(`candles:${symbol}`, updateData);\n    \n    return unsubscribe;\n  }, [symbol, limit]);\n  \n  return data;\n}\n\nexport function useOrderBook(symbol: string) {\n  const [data, setData] = React.useState<OrderBook | null>(null);\n  \n  React.useEffect(() => {\n    const updateData = (newData: OrderBook) => {\n      setData(newData);\n    };\n    \n    setData(liveMarketService.getOrderBook(symbol));\n    \n    const unsubscribe = liveMarketService.subscribe(`orderbook:${symbol}`, updateData);\n    \n    return unsubscribe;\n  }, [symbol]);\n  \n  return data;\n}\n\nexport function useRecentTrades(symbol: string, limit = 20) {\n  const [data, setData] = React.useState<Trade[]>([]);\n  \n  React.useEffect(() => {\n    const updateData = (newData: Trade[]) => {\n      setData(newData);\n    };\n    \n    setData(liveMarketService.getRecentTrades(symbol, limit));\n    \n    const unsubscribe = liveMarketService.subscribe(`trades:${symbol}`, updateData);\n    \n    return unsubscribe;\n  }, [symbol, limit]);\n  \n  return data;\n}\n\n// Futures and Options hooks\nexport function useFuturesData(symbol: string) {\n  const [futuresData, setFuturesData] = React.useState<FuturesData | null>(null);\n\n  React.useEffect(() => {\n    const data = liveMarketService.getFuturesData(symbol);\n    setFuturesData(data);\n\n    const unsubscribe = liveMarketService.subscribe(`futures:${symbol}`, (newData: FuturesData) => {\n      setFuturesData(newData);\n    });\n\n    return unsubscribe;\n  }, [symbol]);\n\n  return futuresData;\n}\n\nexport function useOptionsData(symbol: string) {\n  const [optionsData, setOptionsData] = React.useState<OptionsData | null>(null);\n\n  React.useEffect(() => {\n    const data = liveMarketService.getOptionsData(symbol);\n    setOptionsData(data);\n\n    const unsubscribe = liveMarketService.subscribe(`options:${symbol}`, (newData: OptionsData) => {\n      setOptionsData(newData);\n    });\n\n    return unsubscribe;\n  }, [symbol]);\n\n  return optionsData;\n}\n\nexport function useDerivativeInstrument(symbol: string) {\n  const [instrument, setInstrument] = React.useState<DerivativeInstrument | null>(null);\n\n  React.useEffect(() => {\n    const data = liveMarketService.getDerivativeInstrument(symbol);\n    setInstrument(data);\n\n    const unsubscribe = liveMarketService.subscribe(`instrument:${symbol}`, (newData: DerivativeInstrument) => {\n      setInstrument(newData);\n    });\n\n    return unsubscribe;\n  }, [symbol]);\n\n  return instrument;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1752, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/marketDataService.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\n\n// Types\nexport interface MarketData {\n  symbol: string;\n  name: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  high24h: number;\n  low24h: number;\n  bid: number;\n  ask: number;\n  spread: number;\n  marketCap?: number;\n  sector?: string;\n  type: 'stock' | 'crypto' | 'forex' | 'commodity';\n}\n\nexport interface OrderBookEntry {\n  price: number;\n  quantity: number;\n  total: number;\n}\n\nexport interface OrderBook {\n  bids: OrderBookEntry[];\n  asks: OrderBookEntry[];\n  lastUpdate: number;\n}\n\nexport interface Trade {\n  price: number;\n  quantity: number;\n  time: string;\n  side: 'buy' | 'sell';\n  timestamp: number;\n}\n\nexport interface TickerData {\n  symbol: string;\n  price: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  timestamp: number;\n}\n\n// Market symbols configuration\nexport const MARKET_SYMBOLS = {\n  crypto: [\n    { symbol: 'BTCUSDT', name: 'Bitcoin', basePrice: 43000 },\n    { symbol: 'ETHUSDT', name: 'Ethereum', basePrice: 2600 },\n    { symbol: 'LINKUSDT', name: 'Chainlink', basePrice: 21.5 },\n    { symbol: 'ADAUSDT', name: 'Cardano', basePrice: 0.65 },\n    { symbol: 'DOTUSDT', name: 'Polkadot', basePrice: 8.5 },\n    { symbol: 'SOLUSDT', name: 'Solana', basePrice: 95 },\n    { symbol: 'MATICUSDT', name: 'Polygon', basePrice: 1.1 },\n    { symbol: 'AVAXUSDT', name: 'Avalanche', basePrice: 42 }\n  ],\n  stocks: [\n    { symbol: 'AAPL', name: 'Apple Inc.', basePrice: 185 },\n    { symbol: 'GOOGL', name: 'Alphabet Inc.', basePrice: 140 },\n    { symbol: 'MSFT', name: 'Microsoft Corp.', basePrice: 380 },\n    { symbol: 'AMZN', name: 'Amazon.com Inc.', basePrice: 155 },\n    { symbol: 'TSLA', name: 'Tesla Inc.', basePrice: 240 },\n    { symbol: 'NVDA', name: 'NVIDIA Corp.', basePrice: 480 },\n    { symbol: 'META', name: 'Meta Platforms', basePrice: 350 },\n    { symbol: 'NFLX', name: 'Netflix Inc.', basePrice: 450 }\n  ],\n  forex: [\n    { symbol: 'EURUSD', name: 'Euro/US Dollar', basePrice: 1.08 },\n    { symbol: 'GBPUSD', name: 'British Pound/US Dollar', basePrice: 1.27 },\n    { symbol: 'USDJPY', name: 'US Dollar/Japanese Yen', basePrice: 150 },\n    { symbol: 'AUDUSD', name: 'Australian Dollar/US Dollar', basePrice: 0.66 },\n    { symbol: 'USDCAD', name: 'US Dollar/Canadian Dollar', basePrice: 1.35 }\n  ]\n};\n\nclass MarketDataService {\n  private subscribers: Map<string, Set<(data: MarketData) => void>> = new Map();\n  private orderBookSubscribers: Map<string, Set<(data: OrderBook) => void>> = new Map();\n  private tradeSubscribers: Map<string, Set<(data: Trade[]) => void>> = new Map();\n  private marketData: Map<string, MarketData> = new Map();\n  private orderBooks: Map<string, OrderBook> = new Map();\n  private recentTrades: Map<string, Trade[]> = new Map();\n  private intervals: Map<string, NodeJS.Timeout> = new Map();\n  private isConnected = false;\n\n  constructor() {\n    this.initializeMarketData();\n  }\n\n  private initializeMarketData() {\n    // Initialize crypto data\n    MARKET_SYMBOLS.crypto.forEach(({ symbol, name, basePrice }) => {\n      this.marketData.set(symbol, {\n        symbol,\n        name,\n        price: basePrice + (Math.random() - 0.5) * basePrice * 0.1,\n        change: (Math.random() - 0.5) * basePrice * 0.05,\n        changePercent: (Math.random() - 0.5) * 10,\n        volume: Math.random() * 10000000 + 1000000,\n        high24h: basePrice * (1 + Math.random() * 0.1),\n        low24h: basePrice * (1 - Math.random() * 0.1),\n        bid: basePrice * (1 - Math.random() * 0.001),\n        ask: basePrice * (1 + Math.random() * 0.001),\n        spread: basePrice * Math.random() * 0.002,\n        type: 'crypto'\n      });\n      \n      this.initializeOrderBook(symbol);\n      this.initializeRecentTrades(symbol);\n    });\n\n    // Initialize stock data\n    MARKET_SYMBOLS.stocks.forEach(({ symbol, name, basePrice }) => {\n      this.marketData.set(symbol, {\n        symbol,\n        name,\n        price: basePrice + (Math.random() - 0.5) * basePrice * 0.05,\n        change: (Math.random() - 0.5) * basePrice * 0.03,\n        changePercent: (Math.random() - 0.5) * 5,\n        volume: Math.random() * 50000000 + 5000000,\n        high24h: basePrice * (1 + Math.random() * 0.05),\n        low24h: basePrice * (1 - Math.random() * 0.05),\n        bid: basePrice * (1 - Math.random() * 0.0005),\n        ask: basePrice * (1 + Math.random() * 0.0005),\n        spread: basePrice * Math.random() * 0.001,\n        marketCap: basePrice * Math.random() * 1000000000 + 100000000000,\n        sector: ['Technology', 'Consumer', 'Healthcare', 'Finance'][Math.floor(Math.random() * 4)],\n        type: 'stock'\n      });\n      \n      this.initializeOrderBook(symbol);\n      this.initializeRecentTrades(symbol);\n    });\n\n    // Initialize forex data\n    MARKET_SYMBOLS.forex.forEach(({ symbol, name, basePrice }) => {\n      this.marketData.set(symbol, {\n        symbol,\n        name,\n        price: basePrice + (Math.random() - 0.5) * basePrice * 0.02,\n        change: (Math.random() - 0.5) * basePrice * 0.01,\n        changePercent: (Math.random() - 0.5) * 2,\n        volume: Math.random() * 100000000 + 10000000,\n        high24h: basePrice * (1 + Math.random() * 0.02),\n        low24h: basePrice * (1 - Math.random() * 0.02),\n        bid: basePrice * (1 - Math.random() * 0.0001),\n        ask: basePrice * (1 + Math.random() * 0.0001),\n        spread: basePrice * Math.random() * 0.0002,\n        type: 'forex'\n      });\n      \n      this.initializeOrderBook(symbol);\n      this.initializeRecentTrades(symbol);\n    });\n  }\n\n  private initializeOrderBook(symbol: string) {\n    const marketData = this.marketData.get(symbol);\n    if (!marketData) return;\n\n    const bids: OrderBookEntry[] = [];\n    const asks: OrderBookEntry[] = [];\n    \n    // Generate order book data\n    for (let i = 0; i < 10; i++) {\n      const bidPrice = marketData.price * (1 - (i + 1) * 0.001);\n      const askPrice = marketData.price * (1 + (i + 1) * 0.001);\n      const bidQuantity = Math.random() * 1000 + 100;\n      const askQuantity = Math.random() * 1000 + 100;\n      \n      bids.push({\n        price: bidPrice,\n        quantity: bidQuantity,\n        total: bidPrice * bidQuantity\n      });\n      \n      asks.push({\n        price: askPrice,\n        quantity: askQuantity,\n        total: askPrice * askQuantity\n      });\n    }\n\n    this.orderBooks.set(symbol, {\n      bids: bids.sort((a, b) => b.price - a.price),\n      asks: asks.sort((a, b) => a.price - b.price),\n      lastUpdate: Date.now()\n    });\n  }\n\n  private initializeRecentTrades(symbol: string) {\n    const marketData = this.marketData.get(symbol);\n    if (!marketData) return;\n\n    const trades: Trade[] = [];\n    const now = Date.now();\n    \n    for (let i = 0; i < 20; i++) {\n      const timestamp = now - i * 1000 * Math.random() * 60;\n      const price = marketData.price * (1 + (Math.random() - 0.5) * 0.01);\n      const quantity = Math.random() * 100 + 10;\n      const side = Math.random() > 0.5 ? 'buy' : 'sell';\n      \n      trades.push({\n        price,\n        quantity,\n        time: new Date(timestamp).toLocaleTimeString(),\n        side,\n        timestamp\n      });\n    }\n\n    this.recentTrades.set(symbol, trades.sort((a, b) => b.timestamp - a.timestamp));\n  }\n\n  connect() {\n    if (this.isConnected) return;\n    \n    this.isConnected = true;\n    \n    // Start real-time updates for all symbols\n    Array.from(this.marketData.keys()).forEach(symbol => {\n      this.startRealTimeUpdates(symbol);\n    });\n  }\n\n  disconnect() {\n    this.isConnected = false;\n    \n    // Clear all intervals\n    this.intervals.forEach(interval => clearInterval(interval));\n    this.intervals.clear();\n  }\n\n  private startRealTimeUpdates(symbol: string) {\n    // Price updates every 1-3 seconds\n    const priceInterval = setInterval(() => {\n      this.updateMarketData(symbol);\n    }, 1000 + Math.random() * 2000);\n    \n    // Order book updates every 2-5 seconds\n    const orderBookInterval = setInterval(() => {\n      this.updateOrderBook(symbol);\n    }, 2000 + Math.random() * 3000);\n    \n    // Trade updates every 3-8 seconds\n    const tradeInterval = setInterval(() => {\n      this.addNewTrade(symbol);\n    }, 3000 + Math.random() * 5000);\n    \n    this.intervals.set(`${symbol}_price`, priceInterval);\n    this.intervals.set(`${symbol}_orderbook`, orderBookInterval);\n    this.intervals.set(`${symbol}_trades`, tradeInterval);\n  }\n\n  private updateMarketData(symbol: string) {\n    const data = this.marketData.get(symbol);\n    if (!data) return;\n\n    const volatility = data.type === 'crypto' ? 0.02 : data.type === 'stock' ? 0.01 : 0.005;\n    const priceChange = (Math.random() - 0.5) * data.price * volatility;\n    const newPrice = Math.max(0.001, data.price + priceChange);\n    \n    const updatedData: MarketData = {\n      ...data,\n      price: newPrice,\n      change: data.change + priceChange * 0.1,\n      changePercent: ((newPrice - (data.price - data.change)) / (data.price - data.change)) * 100,\n      volume: data.volume + Math.random() * 100000,\n      bid: newPrice * (1 - Math.random() * 0.001),\n      ask: newPrice * (1 + Math.random() * 0.001)\n    };\n    \n    updatedData.spread = updatedData.ask - updatedData.bid;\n    \n    this.marketData.set(symbol, updatedData);\n    \n    // Notify subscribers\n    const symbolSubscribers = this.subscribers.get(symbol);\n    if (symbolSubscribers) {\n      symbolSubscribers.forEach(callback => callback(updatedData));\n    }\n  }\n\n  private updateOrderBook(symbol: string) {\n    const orderBook = this.orderBooks.get(symbol);\n    const marketData = this.marketData.get(symbol);\n    if (!orderBook || !marketData) return;\n\n    // Update a few random entries\n    const updateCount = Math.floor(Math.random() * 3) + 1;\n    \n    for (let i = 0; i < updateCount; i++) {\n      // Update bids\n      const bidIndex = Math.floor(Math.random() * orderBook.bids.length);\n      if (orderBook.bids[bidIndex]) {\n        orderBook.bids[bidIndex].quantity += (Math.random() - 0.5) * 100;\n        orderBook.bids[bidIndex].quantity = Math.max(1, orderBook.bids[bidIndex].quantity);\n        orderBook.bids[bidIndex].total = orderBook.bids[bidIndex].price * orderBook.bids[bidIndex].quantity;\n      }\n      \n      // Update asks\n      const askIndex = Math.floor(Math.random() * orderBook.asks.length);\n      if (orderBook.asks[askIndex]) {\n        orderBook.asks[askIndex].quantity += (Math.random() - 0.5) * 100;\n        orderBook.asks[askIndex].quantity = Math.max(1, orderBook.asks[askIndex].quantity);\n        orderBook.asks[askIndex].total = orderBook.asks[askIndex].price * orderBook.asks[askIndex].quantity;\n      }\n    }\n\n    orderBook.lastUpdate = Date.now();\n    \n    // Notify subscribers\n    const subscribers = this.orderBookSubscribers.get(symbol);\n    if (subscribers) {\n      subscribers.forEach(callback => callback(orderBook));\n    }\n  }\n\n  private addNewTrade(symbol: string) {\n    const trades = this.recentTrades.get(symbol);\n    const marketData = this.marketData.get(symbol);\n    if (!trades || !marketData) return;\n\n    const newTrade: Trade = {\n      price: marketData.price * (1 + (Math.random() - 0.5) * 0.005),\n      quantity: Math.random() * 100 + 10,\n      time: new Date().toLocaleTimeString(),\n      side: Math.random() > 0.5 ? 'buy' : 'sell',\n      timestamp: Date.now()\n    };\n\n    trades.unshift(newTrade);\n    if (trades.length > 50) {\n      trades.pop();\n    }\n\n    // Notify subscribers\n    const subscribers = this.tradeSubscribers.get(symbol);\n    if (subscribers) {\n      subscribers.forEach(callback => callback([...trades]));\n    }\n  }\n\n  // Public API\n  subscribe(symbol: string, callback: (data: MarketData) => void) {\n    if (!this.subscribers.has(symbol)) {\n      this.subscribers.set(symbol, new Set());\n    }\n    this.subscribers.get(symbol)!.add(callback);\n    \n    // Send initial data\n    const data = this.marketData.get(symbol);\n    if (data) {\n      callback(data);\n    }\n    \n    return () => {\n      const symbolSubscribers = this.subscribers.get(symbol);\n      if (symbolSubscribers) {\n        symbolSubscribers.delete(callback);\n      }\n    };\n  }\n\n  subscribeOrderBook(symbol: string, callback: (data: OrderBook) => void) {\n    if (!this.orderBookSubscribers.has(symbol)) {\n      this.orderBookSubscribers.set(symbol, new Set());\n    }\n    this.orderBookSubscribers.get(symbol)!.add(callback);\n    \n    // Send initial data\n    const data = this.orderBooks.get(symbol);\n    if (data) {\n      callback(data);\n    }\n    \n    return () => {\n      const subscribers = this.orderBookSubscribers.get(symbol);\n      if (subscribers) {\n        subscribers.delete(callback);\n      }\n    };\n  }\n\n  subscribeTrades(symbol: string, callback: (data: Trade[]) => void) {\n    if (!this.tradeSubscribers.has(symbol)) {\n      this.tradeSubscribers.set(symbol, new Set());\n    }\n    this.tradeSubscribers.get(symbol)!.add(callback);\n    \n    // Send initial data\n    const data = this.recentTrades.get(symbol);\n    if (data) {\n      callback([...data]);\n    }\n    \n    return () => {\n      const subscribers = this.tradeSubscribers.get(symbol);\n      if (subscribers) {\n        subscribers.delete(callback);\n      }\n    };\n  }\n\n  getMarketData(symbol: string): MarketData | undefined {\n    return this.marketData.get(symbol);\n  }\n\n  getOrderBook(symbol: string): OrderBook | undefined {\n    return this.orderBooks.get(symbol);\n  }\n\n  getRecentTrades(symbol: string): Trade[] {\n    return this.recentTrades.get(symbol) || [];\n  }\n\n  getAllSymbols(): string[] {\n    return Array.from(this.marketData.keys());\n  }\n\n  searchSymbols(query: string): MarketData[] {\n    const results: MarketData[] = [];\n    const lowerQuery = query.toLowerCase();\n    \n    this.marketData.forEach(data => {\n      if (data.symbol.toLowerCase().includes(lowerQuery) || \n          data.name.toLowerCase().includes(lowerQuery)) {\n        results.push(data);\n      }\n    });\n    \n    return results;\n  }\n}\n\n// Singleton instance\nconst marketDataService = new MarketDataService();\n\n// React hooks\nexport const useMarketData = (symbol: string) => {\n  const [data, setData] = useState<MarketData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const unsubscribe = marketDataService.subscribe(symbol, (newData) => {\n      setData(newData);\n      setIsLoading(false);\n    });\n\n    return unsubscribe;\n  }, [symbol]);\n\n  return { data, isLoading };\n};\n\nexport const useOrderBook = (symbol: string) => {\n  const [orderBook, setOrderBook] = useState<OrderBook | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const unsubscribe = marketDataService.subscribeOrderBook(symbol, (newData) => {\n      setOrderBook(newData);\n      setIsLoading(false);\n    });\n\n    return unsubscribe;\n  }, [symbol]);\n\n  return { orderBook, isLoading };\n};\n\nexport const useTrades = (symbol: string) => {\n  const [trades, setTrades] = useState<Trade[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const unsubscribe = marketDataService.subscribeTrades(symbol, (newTrades) => {\n      setTrades(newTrades);\n      setIsLoading(false);\n    });\n\n    return unsubscribe;\n  }, [symbol]);\n\n  return { trades, isLoading };\n};\n\nexport const useMarketConnection = () => {\n  const [isConnected, setIsConnected] = useState(false);\n\n  const connect = useCallback(() => {\n    marketDataService.connect();\n    setIsConnected(true);\n  }, []);\n\n  const disconnect = useCallback(() => {\n    marketDataService.disconnect();\n    setIsConnected(false);\n  }, []);\n\n  useEffect(() => {\n    // Auto-connect on mount\n    connect();\n    \n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  return { isConnected, connect, disconnect };\n};\n\nexport default marketDataService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2278, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/riskManagementSystem.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport toast from 'react-hot-toast';\n\n// Risk Management Types\nexport interface RiskParameters {\n  maxPositionSize: number; // Maximum position size as percentage of account\n  maxDailyLoss: number; // Maximum daily loss as percentage\n  maxDrawdown: number; // Maximum drawdown as percentage\n  stopLossPercentage: number; // Default stop loss percentage\n  takeProfitRatio: number; // Take profit to stop loss ratio\n  maxOpenPositions: number; // Maximum number of open positions\n  riskPerTrade: number; // Risk per trade as percentage of account\n  correlationLimit: number; // Maximum correlation between positions\n}\n\nexport interface RiskAlert {\n  id: string;\n  type: 'warning' | 'critical' | 'info';\n  message: string;\n  timestamp: Date;\n  symbol?: string;\n  action?: 'reduce_position' | 'close_position' | 'stop_trading' | 'review_risk';\n  acknowledged: boolean;\n}\n\nexport interface PositionRisk {\n  symbol: string;\n  currentRisk: number; // Current risk as percentage of account\n  maxRisk: number; // Maximum allowed risk\n  stopLoss: number;\n  takeProfit: number;\n  riskRewardRatio: number;\n  correlationRisk: number;\n  liquidationPrice?: number;\n}\n\nexport interface AccountRisk {\n  totalRisk: number; // Total risk across all positions\n  dailyPnL: number;\n  dailyPnLPercentage: number;\n  currentDrawdown: number;\n  maxDrawdownReached: number;\n  marginUsed: number;\n  marginAvailable: number;\n  riskScore: number; // 0-100 risk score\n}\n\nexport interface RiskRule {\n  id: string;\n  name: string;\n  description: string;\n  condition: (account: AccountRisk, positions: PositionRisk[]) => boolean;\n  action: 'alert' | 'reduce_positions' | 'stop_trading' | 'close_all';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  enabled: boolean;\n}\n\nclass RiskManagementSystem {\n  private parameters: RiskParameters;\n  private alerts: RiskAlert[];\n  private rules: RiskRule[] = [];\n  private subscribers: ((alerts: RiskAlert[]) => void)[];\n  private accountBalance: number;\n  private dailyStartBalance: number;\n  private maxDrawdownValue: number;\n\n  constructor() {\n    this.parameters = {\n      maxPositionSize: 10, // 10% of account\n      maxDailyLoss: 5, // 5% daily loss limit\n      maxDrawdown: 15, // 15% maximum drawdown\n      stopLossPercentage: 2, // 2% stop loss\n      takeProfitRatio: 2, // 2:1 risk reward ratio\n      maxOpenPositions: 5,\n      riskPerTrade: 1, // 1% risk per trade\n      correlationLimit: 0.7 // 70% correlation limit\n    };\n    \n    this.alerts = [];\n    this.subscribers = [];\n    this.accountBalance = 10000; // Default balance\n    this.dailyStartBalance = 10000;\n    this.maxDrawdownValue = 0;\n    \n    this.initializeRiskRules();\n    this.startDailyReset();\n  }\n\n  private initializeRiskRules(): void {\n    this.rules = [\n      {\n        id: 'daily_loss_limit',\n        name: 'Daily Loss Limit',\n        description: 'Triggers when daily loss exceeds the maximum allowed percentage',\n        condition: (account) => Math.abs(account.dailyPnLPercentage) > this.parameters.maxDailyLoss,\n        action: 'stop_trading',\n        severity: 'critical',\n        enabled: true\n      },\n      {\n        id: 'max_drawdown',\n        name: 'Maximum Drawdown',\n        description: 'Triggers when account drawdown exceeds the maximum allowed',\n        condition: (account) => account.currentDrawdown > this.parameters.maxDrawdown,\n        action: 'reduce_positions',\n        severity: 'critical',\n        enabled: true\n      },\n      {\n        id: 'position_size_limit',\n        name: 'Position Size Limit',\n        description: 'Triggers when a single position exceeds maximum size',\n        condition: (account, positions) => positions.some(p => p.currentRisk > this.parameters.maxPositionSize),\n        action: 'reduce_positions',\n        severity: 'high',\n        enabled: true\n      },\n      {\n        id: 'correlation_risk',\n        name: 'High Correlation Risk',\n        description: 'Triggers when positions have high correlation',\n        condition: (account, positions) => positions.some(p => p.correlationRisk > this.parameters.correlationLimit),\n        action: 'alert',\n        severity: 'medium',\n        enabled: true\n      },\n      {\n        id: 'margin_warning',\n        name: 'High Margin Usage',\n        description: 'Triggers when margin usage exceeds 80%',\n        condition: (account) => account.marginUsed / (account.marginUsed + account.marginAvailable) > 0.8,\n        action: 'alert',\n        severity: 'medium',\n        enabled: true\n      },\n      {\n        id: 'max_positions',\n        name: 'Maximum Positions',\n        description: 'Triggers when number of open positions exceeds limit',\n        condition: (account, positions) => positions.length > this.parameters.maxOpenPositions,\n        action: 'alert',\n        severity: 'medium',\n        enabled: true\n      }\n    ];\n  }\n\n  private startDailyReset(): void {\n    // Reset daily tracking at midnight\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n    \n    const msUntilMidnight = tomorrow.getTime() - now.getTime();\n    \n    setTimeout(() => {\n      this.resetDailyTracking();\n      // Set up daily interval\n      setInterval(() => this.resetDailyTracking(), 24 * 60 * 60 * 1000);\n    }, msUntilMidnight);\n  }\n\n  private resetDailyTracking(): void {\n    this.dailyStartBalance = this.accountBalance;\n    this.createAlert({\n      type: 'info',\n      message: 'Daily risk tracking reset',\n      action: 'review_risk'\n    });\n  }\n\n  private createAlert(alertData: Partial<RiskAlert>): void {\n    const alert: RiskAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: alertData.type || 'info',\n      message: alertData.message || 'Risk alert triggered',\n      timestamp: new Date(),\n      symbol: alertData.symbol,\n      action: alertData.action,\n      acknowledged: false\n    };\n\n    this.alerts.unshift(alert);\n    \n    // Keep only last 100 alerts\n    if (this.alerts.length > 100) {\n      this.alerts = this.alerts.slice(0, 100);\n    }\n\n    // Show toast notification\n    const toastMessage = alertData.symbol \n      ? `${alertData.symbol}: ${alert.message}`\n      : alert.message;\n\n    switch (alert.type) {\n      case 'critical':\n        toast.error(toastMessage, { duration: 10000 });\n        break;\n      case 'warning':\n        toast.error(toastMessage, { duration: 5000 });\n        break;\n      default:\n        toast(toastMessage, { duration: 3000 });\n    }\n\n    this.notifySubscribers();\n  }\n\n  private notifySubscribers(): void {\n    this.subscribers.forEach(callback => callback(this.alerts));\n  }\n\n  // Public Methods\n  public updateAccountBalance(balance: number): void {\n    this.accountBalance = balance;\n    \n    // Update max drawdown\n    const currentDrawdown = ((this.dailyStartBalance - balance) / this.dailyStartBalance) * 100;\n    if (currentDrawdown > this.maxDrawdownValue) {\n      this.maxDrawdownValue = currentDrawdown;\n    }\n  }\n\n  public calculatePositionRisk(symbol: string, entryPrice: number, size: number, stopLoss?: number): PositionRisk {\n    const positionValue = entryPrice * size;\n    const currentRisk = (positionValue / this.accountBalance) * 100;\n    \n    const defaultStopLoss = stopLoss || entryPrice * (1 - this.parameters.stopLossPercentage / 100);\n    const defaultTakeProfit = entryPrice + (entryPrice - defaultStopLoss) * this.parameters.takeProfitRatio;\n    \n    const riskAmount = Math.abs(entryPrice - defaultStopLoss) * size;\n    const rewardAmount = Math.abs(defaultTakeProfit - entryPrice) * size;\n    const riskRewardRatio = rewardAmount / riskAmount;\n    \n    // Calculate correlation risk (simplified)\n    const correlationRisk = this.calculateCorrelationRisk(symbol);\n    \n    return {\n      symbol,\n      currentRisk,\n      maxRisk: this.parameters.maxPositionSize,\n      stopLoss: defaultStopLoss,\n      takeProfit: defaultTakeProfit,\n      riskRewardRatio,\n      correlationRisk\n    };\n  }\n\n  private calculateCorrelationRisk(symbol: string): number {\n    // Simplified correlation calculation\n    // In a real implementation, this would use historical price data\n    const correlationMap: { [key: string]: { [key: string]: number } } = {\n      'BTCUSDT': { 'ETHUSDT': 0.8, 'ADAUSDT': 0.7 },\n      'ETHUSDT': { 'BTCUSDT': 0.8, 'ADAUSDT': 0.6 },\n      'AAPL': { 'MSFT': 0.6, 'GOOGL': 0.5 },\n      'TSLA': { 'AAPL': 0.3, 'MSFT': 0.2 }\n    };\n    \n    const correlations = correlationMap[symbol] || {};\n    return Math.max(...Object.values(correlations), 0);\n  }\n\n  public calculateAccountRisk(positions: PositionRisk[]): AccountRisk {\n    const totalRisk = positions.reduce((sum, pos) => sum + pos.currentRisk, 0);\n    const dailyPnL = this.accountBalance - this.dailyStartBalance;\n    const dailyPnLPercentage = (dailyPnL / this.dailyStartBalance) * 100;\n    const currentDrawdown = this.maxDrawdownValue;\n    \n    // Calculate risk score (0-100)\n    let riskScore = 0;\n    riskScore += Math.min(totalRisk / this.parameters.maxPositionSize * 20, 20); // Position size risk\n    riskScore += Math.min(Math.abs(dailyPnLPercentage) / this.parameters.maxDailyLoss * 30, 30); // Daily loss risk\n    riskScore += Math.min(currentDrawdown / this.parameters.maxDrawdown * 30, 30); // Drawdown risk\n    riskScore += Math.min(positions.length / this.parameters.maxOpenPositions * 20, 20); // Position count risk\n    \n    return {\n      totalRisk,\n      dailyPnL,\n      dailyPnLPercentage,\n      currentDrawdown,\n      maxDrawdownReached: this.maxDrawdownValue,\n      marginUsed: totalRisk * this.accountBalance / 100, // Simplified\n      marginAvailable: this.accountBalance - (totalRisk * this.accountBalance / 100),\n      riskScore: Math.min(riskScore, 100)\n    };\n  }\n\n  public checkRiskRules(accountRisk: AccountRisk, positionRisks: PositionRisk[]): void {\n    this.rules.forEach(rule => {\n      if (!rule.enabled) return;\n      \n      if (rule.condition(accountRisk, positionRisks)) {\n        this.createAlert({\n          type: rule.severity === 'critical' ? 'critical' : 'warning',\n          message: `${rule.name}: ${rule.description}`,\n          action: rule.action as any\n        });\n      }\n    });\n  }\n\n  public validateOrder(symbol: string, size: number, price: number, stopLoss?: number): {\n    valid: boolean;\n    reason?: string;\n    suggestedSize?: number;\n  } {\n    const positionRisk = this.calculatePositionRisk(symbol, price, size, stopLoss);\n    \n    // Check position size\n    if (positionRisk.currentRisk > this.parameters.maxPositionSize) {\n      const maxSize = (this.parameters.maxPositionSize / 100) * this.accountBalance / price;\n      return {\n        valid: false,\n        reason: `Position size exceeds maximum allowed (${this.parameters.maxPositionSize}%)`,\n        suggestedSize: Math.floor(maxSize * 100) / 100\n      };\n    }\n    \n    // Check risk per trade\n    const riskAmount = Math.abs(price - (stopLoss || price * 0.98)) * size;\n    const riskPercentage = (riskAmount / this.accountBalance) * 100;\n    \n    if (riskPercentage > this.parameters.riskPerTrade) {\n      const maxSize = (this.parameters.riskPerTrade / 100) * this.accountBalance / Math.abs(price - (stopLoss || price * 0.98));\n      return {\n        valid: false,\n        reason: `Risk per trade exceeds maximum allowed (${this.parameters.riskPerTrade}%)`,\n        suggestedSize: Math.floor(maxSize * 100) / 100\n      };\n    }\n    \n    return { valid: true };\n  }\n\n  public getOptimalPositionSize(symbol: string, entryPrice: number, stopLoss: number): number {\n    const riskAmount = (this.parameters.riskPerTrade / 100) * this.accountBalance;\n    const priceRisk = Math.abs(entryPrice - stopLoss);\n    return riskAmount / priceRisk;\n  }\n\n  public acknowledgeAlert(alertId: string): void {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n      this.notifySubscribers();\n    }\n  }\n\n  public updateRiskParameters(newParameters: Partial<RiskParameters>): void {\n    this.parameters = { ...this.parameters, ...newParameters };\n    this.createAlert({\n      type: 'info',\n      message: 'Risk parameters updated',\n      action: 'review_risk'\n    });\n  }\n\n  public getRiskParameters(): RiskParameters {\n    return { ...this.parameters };\n  }\n\n  public getAlerts(): RiskAlert[] {\n    return [...this.alerts];\n  }\n\n  public getUnacknowledgedAlerts(): RiskAlert[] {\n    return this.alerts.filter(alert => !alert.acknowledged);\n  }\n\n  public subscribe(callback: (alerts: RiskAlert[]) => void): () => void {\n    this.subscribers.push(callback);\n    return () => {\n      const index = this.subscribers.indexOf(callback);\n      if (index > -1) {\n        this.subscribers.splice(index, 1);\n      }\n    };\n  }\n\n  public clearAlerts(): void {\n    this.alerts = [];\n    this.notifySubscribers();\n  }\n\n  public exportRiskReport(): {\n    parameters: RiskParameters;\n    alerts: RiskAlert[];\n    timestamp: Date;\n  } {\n    return {\n      parameters: this.parameters,\n      alerts: this.alerts,\n      timestamp: new Date()\n    };\n  }\n}\n\n// Singleton instance\nexport const riskManagementSystem = new RiskManagementSystem();\n\n// React Hooks\nexport function useRiskManagement() {\n  const [alerts, setAlerts] = useState<RiskAlert[]>([]);\n  const [parameters, setParameters] = useState<RiskParameters>(riskManagementSystem.getRiskParameters());\n\n  useEffect(() => {\n    const unsubscribe = riskManagementSystem.subscribe(setAlerts);\n    setAlerts(riskManagementSystem.getAlerts());\n    return unsubscribe;\n  }, []);\n\n  const updateParameters = useCallback((newParams: Partial<RiskParameters>) => {\n    riskManagementSystem.updateRiskParameters(newParams);\n    setParameters(riskManagementSystem.getRiskParameters());\n  }, []);\n\n  const acknowledgeAlert = useCallback((alertId: string) => {\n    riskManagementSystem.acknowledgeAlert(alertId);\n  }, []);\n\n  const validateOrder = useCallback((symbol: string, size: number, price: number, stopLoss?: number) => {\n    return riskManagementSystem.validateOrder(symbol, size, price, stopLoss);\n  }, []);\n\n  const calculatePositionRisk = useCallback((symbol: string, entryPrice: number, size: number, stopLoss?: number) => {\n    return riskManagementSystem.calculatePositionRisk(symbol, entryPrice, size, stopLoss);\n  }, []);\n\n  const getOptimalPositionSize = useCallback((symbol: string, entryPrice: number, stopLoss: number) => {\n    return riskManagementSystem.getOptimalPositionSize(symbol, entryPrice, stopLoss);\n  }, []);\n\n  return {\n    alerts,\n    parameters,\n    updateParameters,\n    acknowledgeAlert,\n    validateOrder,\n    calculatePositionRisk,\n    getOptimalPositionSize,\n    unacknowledgedAlerts: alerts.filter(a => !a.acknowledged),\n    clearAlerts: () => riskManagementSystem.clearAlerts()\n  };\n}\n\nexport default riskManagementSystem;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2647, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/liveTradingService.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { errorHandler, handleTradingError, handleNetworkError } from '@/lib/errorHandler';\n\n// Trading interfaces\nexport interface TradingAccount {\n  id: string;\n  balance: number;\n  equity: number;\n  margin: number;\n  freeMargin: number;\n  marginLevel: number;\n  currency: string;\n  leverage: number;\n}\n\nexport interface TradingPosition {\n  id: string;\n  symbol: string;\n  side: 'long' | 'short';\n  size: number;\n  entryPrice: number;\n  currentPrice: number;\n  pnl: number;\n  pnlPercent: number;\n  margin: number;\n  swap: number;\n  commission: number;\n  openTime: Date;\n  stopLoss?: number;\n  takeProfit?: number;\n}\n\nexport interface TradingOrder {\n  id: string;\n  symbol: string;\n  type: 'market' | 'limit' | 'stop' | 'stop_limit';\n  side: 'buy' | 'sell';\n  size: number;\n  price?: number;\n  stopPrice?: number;\n  status: 'pending' | 'filled' | 'cancelled' | 'rejected';\n  timestamp: Date;\n  fillPrice?: number;\n  commission?: number;\n}\n\nexport interface OrderRequest {\n  symbol: string;\n  type: 'market' | 'limit' | 'stop';\n  side: 'buy' | 'sell';\n  size: number;\n  price?: number;\n  stopLoss?: number;\n  takeProfit?: number;\n  leverage?: number;\n}\n\nexport interface TradingSignal {\n  id: string;\n  symbol: string;\n  action: 'buy' | 'sell' | 'close';\n  confidence: number;\n  entryPrice: number;\n  stopLoss?: number;\n  takeProfit?: number;\n  reasoning: string;\n  timestamp: Date;\n}\n\nclass LiveTradingService {\n  private account: TradingAccount;\n  private positions: Map<string, TradingPosition> = new Map();\n  private orders: Map<string, TradingOrder> = new Map();\n  private signals: TradingSignal[] = [];\n  private subscribers: Set<() => void> = new Set();\n  private priceSubscribers: Map<string, Set<(price: number) => void>> = new Map();\n  private isConnected = false;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n\n  constructor() {\n    // Initialize demo account\n    this.account = {\n      id: 'demo-account-001',\n      balance: 10000,\n      equity: 10000,\n      margin: 0,\n      freeMargin: 10000,\n      marginLevel: 0,\n      currency: 'USD',\n      leverage: 100\n    };\n\n    this.initializeConnection();\n    this.startPriceUpdates();\n    this.generateTradingSignals();\n  }\n\n  private initializeConnection() {\n    // Simulate connection to trading server\n    setTimeout(() => {\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.notifySubscribers();\n    }, 1000);\n  }\n\n  private startPriceUpdates() {\n    // Simulate real-time price updates\n    setInterval(() => {\n      if (!this.isConnected) return;\n\n      // Update position prices and PnL\n      this.positions.forEach(position => {\n        const priceChange = (Math.random() - 0.5) * 0.01; // Â±0.5% change\n        position.currentPrice = position.currentPrice * (1 + priceChange);\n        \n        // Calculate PnL\n        const priceDiff = position.currentPrice - position.entryPrice;\n        const multiplier = position.side === 'long' ? 1 : -1;\n        position.pnl = priceDiff * multiplier * position.size;\n        position.pnlPercent = (priceDiff / position.entryPrice) * multiplier * 100;\n\n        // Update account equity\n        this.updateAccountEquity();\n\n        // Notify price subscribers\n        const symbolSubscribers = this.priceSubscribers.get(position.symbol);\n        if (symbolSubscribers) {\n          symbolSubscribers.forEach(callback => callback(position.currentPrice));\n        }\n      });\n\n      this.notifySubscribers();\n    }, 1000);\n  }\n\n  private updateAccountEquity() {\n    let totalPnL = 0;\n    this.positions.forEach(position => {\n      totalPnL += position.pnl;\n    });\n    \n    this.account.equity = this.account.balance + totalPnL;\n    this.account.freeMargin = this.account.equity - this.account.margin;\n    \n    if (this.account.margin > 0) {\n      this.account.marginLevel = (this.account.equity / this.account.margin) * 100;\n    }\n  }\n\n  private generateTradingSignals() {\n    const symbols = ['BTCUSD', 'ETHUSD', 'EURUSD', 'GBPUSD', 'USDJPY'];\n    \n    setInterval(() => {\n      if (Math.random() < 0.3) { // 30% chance to generate signal\n        const symbol = symbols[Math.floor(Math.random() * symbols.length)];\n        const action = Math.random() > 0.5 ? 'buy' : 'sell';\n        const confidence = 60 + Math.random() * 35; // 60-95% confidence\n        const basePrice = this.getMarketPrice(symbol);\n        \n        const signal: TradingSignal = {\n          id: `signal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          symbol,\n          action,\n          confidence,\n          entryPrice: basePrice,\n          stopLoss: action === 'buy' ? basePrice * 0.98 : basePrice * 1.02,\n          takeProfit: action === 'buy' ? basePrice * 1.04 : basePrice * 0.96,\n          reasoning: this.generateSignalReasoning(symbol, action, confidence),\n          timestamp: new Date()\n        };\n        \n        this.signals.unshift(signal);\n        if (this.signals.length > 20) {\n          this.signals = this.signals.slice(0, 20);\n        }\n        \n        this.notifySubscribers();\n      }\n    }, 5000); // Check every 5 seconds\n  }\n\n  private generateSignalReasoning(symbol: string, action: string, confidence: number): string {\n    const reasons = [\n      `Technical analysis shows strong ${action === 'buy' ? 'bullish' : 'bearish'} momentum on ${symbol}`,\n      `RSI indicates ${action === 'buy' ? 'oversold' : 'overbought'} conditions for ${symbol}`,\n      `Moving average crossover suggests ${action === 'buy' ? 'upward' : 'downward'} trend for ${symbol}`,\n      `Support/resistance levels favor ${action === 'buy' ? 'long' : 'short'} position on ${symbol}`,\n      `Volume analysis confirms ${action === 'buy' ? 'buying' : 'selling'} pressure on ${symbol}`\n    ];\n    \n    return reasons[Math.floor(Math.random() * reasons.length)];\n  }\n\n  private getMarketPrice(symbol: string): number {\n    // Simulate market prices\n    const basePrices: { [key: string]: number } = {\n      'BTCUSD': 45000,\n      'ETHUSD': 2800,\n      'EURUSD': 1.0850,\n      'GBPUSD': 1.2650,\n      'USDJPY': 148.50\n    };\n    \n    const basePrice = basePrices[symbol] || 1.0000;\n    const variation = (Math.random() - 0.5) * 0.02; // Â±1% variation\n    return basePrice * (1 + variation);\n  }\n\n  private notifySubscribers() {\n    this.subscribers.forEach(callback => callback());\n  }\n\n  // Public API methods\n  async placeOrder(orderRequest: OrderRequest): Promise<{ success: boolean; orderId?: string; error?: string }> {\n    try {\n      if (!this.isConnected) {\n        throw new Error('Not connected to trading server');\n      }\n\n      // Validate order\n      const validation = this.validateOrder(orderRequest);\n      if (!validation.valid) {\n        throw new Error(validation.error);\n      }\n\n      const orderId = `order-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      const currentPrice = this.getMarketPrice(orderRequest.symbol);\n      \n      const order: TradingOrder = {\n        id: orderId,\n        symbol: orderRequest.symbol,\n        type: orderRequest.type,\n        side: orderRequest.side,\n        size: orderRequest.size,\n        price: orderRequest.price,\n        status: 'pending',\n        timestamp: new Date()\n      };\n\n      this.orders.set(orderId, order);\n\n      // Simulate order execution\n      setTimeout(() => {\n        this.executeOrder(orderId, orderRequest);\n      }, Math.random() * 2000 + 500); // 0.5-2.5 seconds\n\n      this.notifySubscribers();\n      return { success: true, orderId };\n    } catch (error) {\n      const handledError = handleTradingError((error as Error).message, { orderRequest }, 'Live Trading - Place Order');\n      return { success: false, error: handledError.message };\n    }\n  }\n\n  private validateOrder(orderRequest: OrderRequest): { valid: boolean; error?: string } {\n    // Check account balance\n    const requiredMargin = this.calculateRequiredMargin(orderRequest);\n    if (requiredMargin > this.account.freeMargin) {\n      const error = handleTradingError('Insufficient margin', { requiredMargin, freeMargin: this.account.freeMargin }, 'Order Validation');\n      return { valid: false, error: error.message };\n    }\n\n    // Check minimum size\n    if (orderRequest.size < 0.01) {\n      const error = handleTradingError('Minimum order size is 0.01', { size: orderRequest.size }, 'Order Validation');\n      return { valid: false, error: error.message };\n    }\n\n    // Check maximum size\n    if (orderRequest.size > 100) {\n      const error = handleTradingError('Maximum order size is 100', { size: orderRequest.size }, 'Order Validation');\n      return { valid: false, error: error.message };\n    }\n\n    return { valid: true };\n  }\n\n  private calculateRequiredMargin(orderRequest: OrderRequest): number {\n    const currentPrice = this.getMarketPrice(orderRequest.symbol);\n    const notionalValue = orderRequest.size * currentPrice;\n    const leverage = orderRequest.leverage || this.account.leverage;\n    return notionalValue / leverage;\n  }\n\n  private executeOrder(orderId: string, orderRequest: OrderRequest) {\n    const order = this.orders.get(orderId);\n    if (!order) return;\n\n    const currentPrice = this.getMarketPrice(orderRequest.symbol);\n    const executionPrice = orderRequest.type === 'market' ? currentPrice : (orderRequest.price || currentPrice);\n    \n    // Update order status\n    order.status = 'filled';\n    order.fillPrice = executionPrice;\n    order.commission = orderRequest.size * executionPrice * 0.0001; // 0.01% commission\n\n    // Create position\n    const positionId = `pos-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const side = orderRequest.side === 'buy' ? 'long' : 'short';\n    \n    const position: TradingPosition = {\n      id: positionId,\n      symbol: orderRequest.symbol,\n      side,\n      size: orderRequest.size,\n      entryPrice: executionPrice,\n      currentPrice: executionPrice,\n      pnl: 0,\n      pnlPercent: 0,\n      margin: this.calculateRequiredMargin(orderRequest),\n      swap: 0,\n      commission: order.commission,\n      openTime: new Date(),\n      stopLoss: orderRequest.stopLoss,\n      takeProfit: orderRequest.takeProfit\n    };\n\n    this.positions.set(positionId, position);\n    \n    // Update account\n    this.account.margin += position.margin;\n    this.account.balance -= order.commission;\n    this.updateAccountEquity();\n    \n    this.notifySubscribers();\n  }\n\n  async closePosition(positionId: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const position = this.positions.get(positionId);\n      if (!position) {\n        throw new Error('Position not found');\n      }\n\n      // Create closing order\n      const closingSide = position.side === 'long' ? 'sell' : 'buy';\n      const currentPrice = this.getMarketPrice(position.symbol);\n      const commission = position.size * currentPrice * 0.0001;\n      \n      // Update account\n      this.account.balance += position.pnl - commission;\n      this.account.margin -= position.margin;\n      this.updateAccountEquity();\n      \n      // Remove position\n      this.positions.delete(positionId);\n      \n      this.notifySubscribers();\n      return { success: true };\n    } catch (error) {\n      const handledError = handleTradingError((error as Error).message, { positionId }, 'Live Trading - Close Position');\n      return { success: false, error: handledError.message };\n    }\n  }\n\n  async modifyPosition(positionId: string, stopLoss?: number, takeProfit?: number): Promise<{ success: boolean; error?: string }> {\n    try {\n      const position = this.positions.get(positionId);\n      if (!position) {\n        throw new Error('Position not found');\n      }\n\n      if (stopLoss !== undefined) {\n        position.stopLoss = stopLoss;\n      }\n      if (takeProfit !== undefined) {\n        position.takeProfit = takeProfit;\n      }\n      \n      this.notifySubscribers();\n      return { success: true };\n    } catch (error) {\n      const handledError = handleTradingError((error as Error).message, { positionId, stopLoss, takeProfit }, 'Live Trading - Modify Position');\n      return { success: false, error: handledError.message };\n    }\n  }\n\n  // Getters\n  getAccount(): TradingAccount {\n    return { ...this.account };\n  }\n\n  getPositions(): TradingPosition[] {\n    return Array.from(this.positions.values());\n  }\n\n  getOrders(): TradingOrder[] {\n    return Array.from(this.orders.values()).sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  getSignals(): TradingSignal[] {\n    return [...this.signals];\n  }\n\n  isConnectedToServer(): boolean {\n    return this.isConnected;\n  }\n\n  // Subscription methods\n  subscribe(callback: () => void): () => void {\n    this.subscribers.add(callback);\n    return () => this.subscribers.delete(callback);\n  }\n\n  subscribeToPrices(symbol: string, callback: (price: number) => void): () => void {\n    if (!this.priceSubscribers.has(symbol)) {\n      this.priceSubscribers.set(symbol, new Set());\n    }\n    this.priceSubscribers.get(symbol)!.add(callback);\n    \n    return () => {\n      const symbolSubscribers = this.priceSubscribers.get(symbol);\n      if (symbolSubscribers) {\n        symbolSubscribers.delete(callback);\n        if (symbolSubscribers.size === 0) {\n          this.priceSubscribers.delete(symbol);\n        }\n      }\n    };\n  }\n}\n\n// Singleton instance\nconst liveTradingService = new LiveTradingService();\nexport default liveTradingService;\n\n// React hooks\nexport function useLiveTrading() {\n  const [account, setAccount] = useState<TradingAccount>(liveTradingService.getAccount());\n  const [positions, setPositions] = useState<TradingPosition[]>(liveTradingService.getPositions());\n  const [orders, setOrders] = useState<TradingOrder[]>(liveTradingService.getOrders());\n  const [signals, setSignals] = useState<TradingSignal[]>(liveTradingService.getSignals());\n  const [isConnected, setIsConnected] = useState<boolean>(liveTradingService.isConnectedToServer());\n\n  useEffect(() => {\n    const unsubscribe = liveTradingService.subscribe(() => {\n      setAccount(liveTradingService.getAccount());\n      setPositions(liveTradingService.getPositions());\n      setOrders(liveTradingService.getOrders());\n      setSignals(liveTradingService.getSignals());\n      setIsConnected(liveTradingService.isConnectedToServer());\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const placeOrder = useCallback(async (orderRequest: OrderRequest) => {\n    return await liveTradingService.placeOrder(orderRequest);\n  }, []);\n\n  const closePosition = useCallback(async (positionId: string) => {\n    return await liveTradingService.closePosition(positionId);\n  }, []);\n\n  const modifyPosition = useCallback(async (positionId: string, stopLoss?: number, takeProfit?: number) => {\n    return await liveTradingService.modifyPosition(positionId, stopLoss, takeProfit);\n  }, []);\n\n  return {\n    account,\n    positions,\n    orders,\n    signals,\n    isConnected,\n    placeOrder,\n    closePosition,\n    modifyPosition\n  };\n}\n\nexport function useLivePrice(symbol: string) {\n  const [price, setPrice] = useState<number>(0);\n\n  useEffect(() => {\n    const unsubscribe = liveTradingService.subscribeToPrices(symbol, setPrice);\n    return unsubscribe;\n  }, [symbol]);\n\n  return price;\n}"],"names":[],"mappings":"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","debugId":null}}]
}