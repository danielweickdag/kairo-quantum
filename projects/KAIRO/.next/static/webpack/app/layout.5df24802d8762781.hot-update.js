"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"d3eec9b86b4c\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvYmx2Y2tkbHBobi9wcm9qZWN0cy9LQUlSTy9zcmMvYXBwL2dsb2JhbHMuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiZDNlZWM5Yjg2YjRjXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: () => (/* binding */ AuthProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useAuth: () => (/* binding */ useAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var _services_alertService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/alertService */ \"(app-pages-browser)/./src/services/alertService.ts\");\n/* __next_internal_client_entry_do_not_use__ AuthProvider,useAuth,default auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Configure axios defaults - use frontend API routes\naxios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].defaults.baseURL = '/api';\n// Add request interceptor to include auth token\naxios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].interceptors.request.use((config)=>{\n    const token =  true ? localStorage.getItem('token') : 0;\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    }\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Add response interceptor to handle token refresh\naxios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].interceptors.response.use((response)=>response, async (error)=>{\n    var _error_response;\n    const originalRequest = error.config;\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401 && !originalRequest._retry && \"object\" !== 'undefined') {\n        originalRequest._retry = true;\n        try {\n            const refreshToken = localStorage.getItem('refreshToken');\n            if (refreshToken) {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].post('/auth/refresh', {\n                    refreshToken\n                });\n                const { token } = response.data.data;\n                localStorage.setItem('token', token);\n                // Retry the original request\n                originalRequest.headers.Authorization = \"Bearer \".concat(token);\n                return (0,axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(originalRequest);\n            }\n        } catch (refreshError) {\n            // Refresh failed, redirect to login\n            localStorage.removeItem('token');\n            localStorage.removeItem('refreshToken');\n            if (true) {\n                window.location.href = '/login';\n            }\n        }\n    }\n    return Promise.reject(error);\n});\nconst AuthProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            const initializeAuth = {\n                \"AuthProvider.useEffect.initializeAuth\": async ()=>{\n                    if (false) {}\n                    const token = localStorage.getItem('token');\n                    if (token) {\n                        try {\n                            const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get('/auth/me');\n                            setUser(response.data.data.user);\n                        } catch (error) {\n                            localStorage.removeItem('token');\n                            localStorage.removeItem('refreshToken');\n                        }\n                    }\n                    setLoading(false);\n                }\n            }[\"AuthProvider.useEffect.initializeAuth\"];\n            initializeAuth();\n        }\n    }[\"AuthProvider.useEffect\"], []);\n    const login = async (email, password)=>{\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].post('/auth/login', {\n                email,\n                password\n            });\n            const { user, accessToken, refreshToken } = response.data.data;\n            if (true) {\n                localStorage.setItem('token', accessToken);\n                localStorage.setItem('refreshToken', refreshToken);\n            }\n            setUser(user);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success('Login successful!');\n        } catch (error) {\n            var _error_response_data, _error_response;\n            const message = ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Login failed';\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(message);\n            throw error;\n        }\n    };\n    const register = async (data)=>{\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].post('/auth/register', data);\n            const { user, accessToken, refreshToken } = response.data.data;\n            if (true) {\n                localStorage.setItem('token', accessToken);\n                localStorage.setItem('refreshToken', refreshToken);\n            }\n            setUser(user);\n            // Automatically enable alerts for new users\n            try {\n                await _services_alertService__WEBPACK_IMPORTED_MODULE_3__.alertService.enableAlerts();\n                console.log('Alerts automatically enabled for new user');\n            } catch (error) {\n                console.warn('Failed to auto-enable alerts for new user:', error);\n            }\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success('Registration successful!');\n        } catch (error) {\n            var _error_response_data, _error_response;\n            const message = ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Registration failed';\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(message);\n            throw error;\n        }\n    };\n    const logout = ()=>{\n        if (true) {\n            localStorage.removeItem('token');\n            localStorage.removeItem('refreshToken');\n        }\n        setUser(null);\n        react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success('Logged out successfully');\n    };\n    const updateProfile = async (data)=>{\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].put('/auth/profile', data);\n            setUser(response.data.data.user);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.success('Profile updated successfully!');\n        } catch (error) {\n            var _error_response_data, _error_response;\n            const message = ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Profile update failed';\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__.toast.error(message);\n            throw error;\n        }\n    };\n    const refreshToken = async ()=>{\n        try {\n            if (false) {}\n            const refreshToken = localStorage.getItem('refreshToken');\n            if (!refreshToken) throw new Error('No refresh token');\n            const response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].post('/auth/refresh', {\n                refreshToken\n            });\n            const { token } = response.data.data;\n            localStorage.setItem('token', token);\n        } catch (error) {\n            logout();\n            throw error;\n        }\n    };\n    const value = {\n        user,\n        loading,\n        login,\n        register,\n        logout,\n        updateProfile,\n        refreshToken\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/blvckdlphn/projects/KAIRO/src/contexts/AuthContext.tsx\",\n        lineNumber: 228,\n        columnNumber: 5\n    }, undefined);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nconst useAuth = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n_s1(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuthContext);\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/AuthContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/alertService.ts":
/*!**************************************!*\
  !*** ./src/services/alertService.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alertService: () => (/* binding */ alertService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ alertService,default auto */ class AlertService {\n    // Initialize default alert templates\n    initializeDefaultTemplates() {\n        this.templates = [\n            // Price Alerts\n            {\n                id: 'price-breakout',\n                name: 'Price Breakout Alert',\n                description: 'Alert when price breaks above or below a key level',\n                type: 'price',\n                category: 'price',\n                defaultConditions: [\n                    {\n                        type: 'price_above',\n                        value: 0,\n                        operator: '>',\n                        timeframe: '1m'\n                    }\n                ],\n                isCustom: false,\n                priority: 'medium',\n                isPopular: true\n            },\n            {\n                id: 'price-below-target',\n                name: 'Price Below Target',\n                description: 'Alert when price goes below a specific value',\n                type: 'price',\n                category: 'price',\n                defaultConditions: [\n                    {\n                        type: 'price_below',\n                        value: 0,\n                        operator: '<',\n                        timeframe: '1m'\n                    }\n                ],\n                isCustom: false,\n                priority: 'high',\n                isPopular: true\n            },\n            {\n                id: 'price-change-percent',\n                name: 'Price Change %',\n                description: 'Alert when price changes by a percentage',\n                type: 'price',\n                category: 'price',\n                defaultConditions: [\n                    {\n                        type: 'percentage_change',\n                        value: 5,\n                        operator: '>',\n                        timeframe: '5m'\n                    }\n                ],\n                isCustom: false,\n                priority: 'medium'\n            },\n            // Portfolio Alerts\n            {\n                id: 'portfolio-loss',\n                name: 'Portfolio Loss Alert',\n                description: 'Alert when portfolio value drops by a certain percentage',\n                type: 'portfolio',\n                category: 'portfolio',\n                defaultConditions: [\n                    {\n                        type: 'percentage_change',\n                        value: -5,\n                        operator: '<=',\n                        timeframe: '1d'\n                    }\n                ],\n                isCustom: false,\n                priority: 'critical',\n                isPopular: true\n            },\n            {\n                id: 'profit-loss-threshold',\n                name: 'Profit/Loss Threshold',\n                description: 'Alert when profit or loss reaches a threshold',\n                type: 'portfolio',\n                category: 'portfolio',\n                defaultConditions: [\n                    {\n                        type: 'profit_loss',\n                        value: -500,\n                        operator: '<',\n                        timeframe: '1h'\n                    }\n                ],\n                isCustom: false,\n                priority: 'critical'\n            },\n            // Technical Analysis Alerts\n            {\n                id: 'rsi-overbought',\n                name: 'RSI Overbought',\n                description: 'Alert when RSI indicates overbought conditions',\n                type: 'trading',\n                category: 'technical',\n                defaultConditions: [\n                    {\n                        type: 'rsi',\n                        value: 70,\n                        operator: '>',\n                        timeframe: '1h'\n                    }\n                ],\n                isCustom: false,\n                priority: 'medium'\n            },\n            {\n                id: 'rsi-oversold',\n                name: 'RSI Oversold',\n                description: 'Alert when RSI indicates oversold conditions',\n                type: 'trading',\n                category: 'technical',\n                defaultConditions: [\n                    {\n                        type: 'rsi',\n                        value: 30,\n                        operator: '<',\n                        timeframe: '1h'\n                    }\n                ],\n                isCustom: false,\n                priority: 'medium'\n            },\n            // Volume and Trading Alerts\n            {\n                id: 'volume-spike',\n                name: 'Volume Spike Alert',\n                description: 'Alert when trading volume increases significantly',\n                type: 'trading',\n                category: 'trading',\n                defaultConditions: [\n                    {\n                        type: 'volume_spike',\n                        value: 200,\n                        operator: '>',\n                        timeframe: '5m'\n                    }\n                ],\n                isCustom: false,\n                priority: 'medium',\n                isPopular: true\n            },\n            // Risk Management Alerts\n            {\n                id: 'risk-threshold',\n                name: 'Risk Threshold Alert',\n                description: 'Alert when risk exposure exceeds safe limits',\n                type: 'risk',\n                category: 'risk',\n                defaultConditions: [\n                    {\n                        type: 'portfolio_value',\n                        value: 10000,\n                        operator: '>',\n                        timeframe: '1h'\n                    }\n                ],\n                isCustom: false,\n                priority: 'critical'\n            },\n            {\n                id: 'stop-loss-trigger',\n                name: 'Stop Loss Trigger',\n                description: 'Alert when stop loss conditions are met',\n                type: 'risk',\n                category: 'risk',\n                defaultConditions: [\n                    {\n                        type: 'price_below',\n                        value: 0,\n                        operator: '<',\n                        timeframe: '1m'\n                    }\n                ],\n                isCustom: false,\n                priority: 'critical'\n            },\n            // News Alerts\n            {\n                id: 'market-news',\n                name: 'Market News Alert',\n                description: 'Alert for important market news',\n                type: 'news',\n                category: 'news',\n                defaultConditions: [\n                    {\n                        type: 'percentage_change',\n                        value: 0,\n                        operator: '>',\n                        timeframe: '1d'\n                    }\n                ],\n                isCustom: false,\n                priority: 'low'\n            }\n        ];\n    }\n    // Load user preferences from storage\n    loadUserPreferences() {\n        try {\n            const stored = localStorage.getItem('alertPreferences');\n            if (stored) {\n                this.preferences = JSON.parse(stored);\n            } else {\n                this.preferences = this.getDefaultPreferences();\n                this.savePreferences();\n            }\n        } catch (error) {\n            console.error('Failed to load alert preferences:', error);\n            this.preferences = this.getDefaultPreferences();\n        }\n    }\n    // Get default preferences\n    getDefaultPreferences() {\n        return {\n            id: 'default',\n            userId: 'current-user',\n            emailNotifications: true,\n            pushNotifications: true,\n            smsNotifications: false,\n            tradingAlerts: true,\n            priceAlerts: true,\n            portfolioAlerts: true,\n            newsAlerts: false,\n            systemAlerts: true,\n            soundEnabled: true,\n            alertFrequency: 'immediate',\n            quietHours: {\n                enabled: false,\n                startTime: '22:00',\n                endTime: '08:00'\n            }\n        };\n    }\n    // Save preferences to storage\n    savePreferences() {\n        if (this.preferences) {\n            localStorage.setItem('alertPreferences', JSON.stringify(this.preferences));\n        }\n    }\n    // Subscribe to alert updates\n    subscribe(callback) {\n        this.listeners.push(callback);\n        return ()=>{\n            this.listeners = this.listeners.filter((listener)=>listener !== callback);\n        };\n    }\n    // Notify all listeners\n    notifyListeners() {\n        this.listeners.forEach((listener)=>listener(this.alerts));\n    }\n    // Get user preferences\n    getPreferences() {\n        return this.preferences;\n    }\n    // Update user preferences\n    updatePreferences(updates) {\n        if (this.preferences) {\n            this.preferences = {\n                ...this.preferences,\n                ...updates\n            };\n            this.savePreferences();\n        }\n    }\n    // Create a new alert\n    createAlert(alertData) {\n        const alert = {\n            ...alertData,\n            id: \"alert_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9)),\n            createdAt: new Date(),\n            isActive: true,\n            category: alertData.category || 'trading',\n            recurring: alertData.recurring || false,\n            cooldownMinutes: alertData.cooldownMinutes || 0\n        };\n        this.alerts.push(alert);\n        this.notifyListeners();\n        return alert;\n    }\n    // Get all alerts\n    getAlerts() {\n        return this.alerts;\n    }\n    // Get active alerts\n    getActiveAlerts() {\n        return this.alerts.filter((alert)=>alert.isActive);\n    }\n    // Get alerts by type\n    getAlertsByType(type) {\n        return this.alerts.filter((alert)=>alert.type === type);\n    }\n    // Update alert\n    updateAlert(id, updates) {\n        const index = this.alerts.findIndex((alert)=>alert.id === id);\n        if (index !== -1) {\n            this.alerts[index] = {\n                ...this.alerts[index],\n                ...updates\n            };\n            this.notifyListeners();\n        }\n    }\n    // Delete alert\n    deleteAlert(id) {\n        this.alerts = this.alerts.filter((alert)=>alert.id !== id);\n        this.notifyListeners();\n    }\n    // Toggle alert active state\n    toggleAlert(id) {\n        const alert = this.alerts.find((alert)=>alert.id === id);\n        if (alert) {\n            alert.isActive = !alert.isActive;\n            this.notifyListeners();\n        }\n    }\n    // Check if alerts should be triggered (mock implementation)\n    checkAlertConditions(marketData) {\n        const activeAlerts = this.getActiveAlerts();\n        activeAlerts.forEach((alert)=>{\n            if (alert.symbol === marketData.symbol) {\n                alert.conditions.forEach((condition)=>{\n                    let shouldTrigger = false;\n                    switch(condition.type){\n                        case 'price_above':\n                            shouldTrigger = marketData.price > condition.value;\n                            break;\n                        case 'price_below':\n                            shouldTrigger = marketData.price < condition.value;\n                            break;\n                        case 'volume_spike':\n                            shouldTrigger = marketData.volume > condition.value;\n                            break;\n                    }\n                    if (shouldTrigger && !alert.triggeredAt) {\n                        this.triggerAlert(alert);\n                    }\n                });\n            }\n        });\n    }\n    // Trigger an alert\n    triggerAlert(alert) {\n        if (!alert.isActive) return;\n        // Check cooldown period\n        if (alert.triggeredAt && alert.cooldownMinutes) {\n            const timeSinceLastTrigger = Date.now() - alert.triggeredAt.getTime();\n            const cooldownMs = alert.cooldownMinutes * 60 * 1000;\n            if (timeSinceLastTrigger < cooldownMs) {\n                return; // Still in cooldown period\n            }\n        }\n        alert.triggeredAt = new Date();\n        // Send notification based on user preferences and alert priority\n        if (this.preferences) {\n            if (this.preferences.pushNotifications) {\n                this.sendPushNotification(alert);\n            }\n            if (this.preferences.emailNotifications && (alert.priority === 'high' || alert.priority === 'critical')) {\n                this.sendEmailNotification(alert);\n            }\n            if (this.preferences.soundEnabled) {\n                this.playAlertSound(alert.priority);\n            }\n        }\n        // Deactivate non-recurring alerts after triggering\n        if (!alert.recurring) {\n            alert.isActive = false;\n        }\n        this.notifyListeners();\n    }\n    // Send push notification\n    sendPushNotification(alert) {\n        if ('Notification' in window && Notification.permission === 'granted') {\n            new Notification(alert.title, {\n                body: alert.message,\n                icon: '/favicon.ico',\n                tag: alert.id\n            });\n        }\n    }\n    // Send email notification (mock)\n    sendEmailNotification(alert) {\n        console.log('Email notification sent:', alert.title);\n    // In a real implementation, this would call an API endpoint\n    }\n    // Play alert sound\n    playAlertSound(priority) {\n        try {\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n            // Different frequencies for different priorities\n            const frequencies = {\n                low: 440,\n                medium: 554,\n                high: 659,\n                critical: 880\n            };\n            oscillator.frequency.setValueAtTime(frequencies[priority], audioContext.currentTime);\n            oscillator.type = 'sine';\n            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n            oscillator.start(audioContext.currentTime);\n            oscillator.stop(audioContext.currentTime + 0.5);\n        } catch (error) {\n            console.error('Failed to play alert sound:', error);\n        }\n    }\n    // Get alert templates\n    getTemplates() {\n        return this.templates;\n    }\n    getTemplatesByCategory(category) {\n        return this.templates.filter((template)=>template.type === category);\n    }\n    getTemplatesByAlertCategory(category) {\n        return this.templates.filter((template)=>template.category === category);\n    }\n    getPopularTemplates() {\n        return this.templates.filter((template)=>template.isPopular === true);\n    }\n    getAlertsByCategory(category) {\n        return this.alerts.filter((alert)=>alert.category === category);\n    }\n    getAlertsByPriority(priority) {\n        return this.alerts.filter((alert)=>alert.priority === priority);\n    }\n    getCriticalAlerts() {\n        return this.getAlertsByPriority('critical').filter((alert)=>alert.isActive);\n    }\n    // Create alert from template\n    createAlertFromTemplate(templateId, symbol, customValues) {\n        const template = this.templates.find((t)=>t.id === templateId);\n        if (!template) return null;\n        const conditions = template.defaultConditions.map((condition)=>({\n                ...condition,\n                id: \"condition_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9)),\n                value: customValues[condition.type] || condition.value\n            }));\n        return this.createAlert({\n            type: template.type,\n            priority: 'medium',\n            title: \"\".concat(template.name, \" - \").concat(symbol),\n            message: \"\".concat(template.description, \" for \").concat(symbol),\n            symbol,\n            userId: 'current-user',\n            conditions\n        });\n    }\n    // Request notification permission\n    async requestNotificationPermission() {\n        if ('Notification' in window) {\n            const permission = await Notification.requestPermission();\n            return permission === 'granted';\n        }\n        return false;\n    }\n    // Enable alerts (main function for the button)\n    async enableAlerts() {\n        try {\n            // Request notification permission\n            const hasPermission = await this.requestNotificationPermission();\n            if (hasPermission) {\n                // Update preferences to enable notifications\n                this.updatePreferences({\n                    pushNotifications: true,\n                    tradingAlerts: true,\n                    priceAlerts: true,\n                    portfolioAlerts: true,\n                    systemAlerts: true\n                });\n                // Show success notification\n                this.sendPushNotification({\n                    id: 'welcome',\n                    type: 'system',\n                    priority: 'medium',\n                    title: 'Alerts Enabled!',\n                    message: 'You will now receive real-time trading alerts and notifications.',\n                    userId: 'current-user',\n                    conditions: [],\n                    isActive: true,\n                    createdAt: new Date()\n                });\n                return true;\n            } else {\n                console.warn('Notification permission denied');\n                return false;\n            }\n        } catch (error) {\n            console.error('Failed to enable alerts:', error);\n            return false;\n        }\n    }\n    constructor(){\n        this.alerts = [];\n        this.preferences = null;\n        this.templates = [];\n        this.listeners = [];\n        this.initializeDefaultTemplates();\n        this.loadUserPreferences();\n    }\n}\n// Export singleton instance\nconst alertService = new AlertService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (alertService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/alertService.ts\n"));

/***/ })

});