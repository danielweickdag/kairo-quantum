{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/dashboard/PerformanceAnalytics.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { BarChart3, TrendingUp, TrendingDown, Calendar, Download, Filter, RefreshCw, Target, DollarSign, Activity, Award } from 'lucide-react';\n\ninterface PerformanceData {\n  id: string;\n  strategyName: string;\n  type: 'manual' | 'automated' | 'copy-trading' | 'ai-signals';\n  period: '7d' | '30d' | '90d' | '1y' | 'all';\n  metrics: {\n    totalReturn: number;\n    annualizedReturn: number;\n    volatility: number;\n    sharpeRatio: number;\n    maxDrawdown: number;\n    winRate: number;\n    profitFactor: number;\n    totalTrades: number;\n    avgWin: number;\n    avgLoss: number;\n    calmarRatio: number;\n    sortinoRatio: number;\n  };\n  dailyReturns: { date: string; return: number; cumulative: number }[];\n  monthlyReturns: { month: string; return: number }[];\n  trades: {\n    date: string;\n    symbol: string;\n    side: 'buy' | 'sell';\n    quantity: number;\n    price: number;\n    pnl: number;\n  }[];\n}\n\ninterface BenchmarkData {\n  name: string;\n  returns: { date: string; return: number }[];\n}\n\nconst PerformanceAnalytics: React.FC = () => {\n  const [performanceData, setPerformanceData] = useState<PerformanceData[]>([]);\n  const [selectedStrategy, setSelectedStrategy] = useState<string>('all');\n  const [selectedPeriod, setPeriod] = useState<'7d' | '30d' | '90d' | '1y' | 'all'>('30d');\n  const [viewMode, setViewMode] = useState<'overview' | 'detailed' | 'comparison'>('overview');\n  const [benchmarks] = useState<BenchmarkData[]>([\n    { name: 'S&P 500', returns: [] },\n    { name: 'Bitcoin', returns: [] },\n    { name: 'Portfolio Benchmark', returns: [] }\n  ]);\n\n  // Mock performance data\n  useEffect(() => {\n    const generateDailyReturns = (days: number, volatility: number = 0.02) => {\n      const returns = [];\n      let cumulative = 100;\n      \n      for (let i = 0; i < days; i++) {\n        const dailyReturn = (Math.random() - 0.48) * volatility;\n        cumulative *= (1 + dailyReturn);\n        returns.push({\n          date: new Date(Date.now() - (days - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          return: dailyReturn * 100,\n          cumulative: cumulative\n        });\n      }\n      return returns;\n    };\n\n    const generateTrades = (count: number) => {\n      const symbols = ['BTC/USD', 'ETH/USD', 'AAPL', 'TSLA', 'GOOGL'];\n      const trades = [];\n      \n      for (let i = 0; i < count; i++) {\n        const isWin = Math.random() > 0.35;\n        trades.push({\n          date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          symbol: symbols[Math.floor(Math.random() * symbols.length)],\n          side: Math.random() > 0.5 ? 'buy' as const : 'sell' as const,\n          quantity: Math.random() * 10 + 1,\n          price: Math.random() * 50000 + 1000,\n          pnl: isWin ? Math.random() * 500 + 50 : -(Math.random() * 300 + 25)\n        });\n      }\n      return trades.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    };\n\n    const mockData: PerformanceData[] = [\n      {\n        id: 'ma-crossover',\n        strategyName: 'MA Crossover Strategy',\n        type: 'automated',\n        period: '30d',\n        metrics: {\n          totalReturn: 12.5,\n          annualizedReturn: 18.3,\n          volatility: 15.2,\n          sharpeRatio: 1.85,\n          maxDrawdown: -8.2,\n          winRate: 68.5,\n          profitFactor: 2.34,\n          totalTrades: 147,\n          avgWin: 245.30,\n          avgLoss: -128.75,\n          calmarRatio: 2.23,\n          sortinoRatio: 2.67\n        },\n        dailyReturns: generateDailyReturns(30, 0.015),\n        monthlyReturns: [\n          { month: 'Jan', return: 8.2 },\n          { month: 'Feb', return: -2.1 },\n          { month: 'Mar', return: 6.4 }\n        ],\n        trades: generateTrades(147)\n      },\n      {\n        id: 'ai-signals',\n        strategyName: 'AI Signal Strategy',\n        type: 'ai-signals',\n        period: '30d',\n        metrics: {\n          totalReturn: 18.7,\n          annualizedReturn: 28.4,\n          volatility: 22.1,\n          sharpeRatio: 1.92,\n          maxDrawdown: -12.3,\n          winRate: 72.1,\n          profitFactor: 2.89,\n          totalTrades: 89,\n          avgWin: 298.45,\n          avgLoss: -95.20,\n          calmarRatio: 2.31,\n          sortinoRatio: 2.84\n        },\n        dailyReturns: generateDailyReturns(30, 0.022),\n        monthlyReturns: [\n          { month: 'Jan', return: 12.1 },\n          { month: 'Feb', return: 3.2 },\n          { month: 'Mar', return: 3.4 }\n        ],\n        trades: generateTrades(89)\n      },\n      {\n        id: 'copy-trading',\n        strategyName: 'Copy Trading Portfolio',\n        type: 'copy-trading',\n        period: '30d',\n        metrics: {\n          totalReturn: 9.3,\n          annualizedReturn: 14.2,\n          volatility: 12.8,\n          sharpeRatio: 1.67,\n          maxDrawdown: -6.1,\n          winRate: 74.2,\n          profitFactor: 2.12,\n          totalTrades: 203,\n          avgWin: 156.80,\n          avgLoss: -73.90,\n          calmarRatio: 2.33,\n          sortinoRatio: 2.45\n        },\n        dailyReturns: generateDailyReturns(30, 0.013),\n        monthlyReturns: [\n          { month: 'Jan', return: 4.1 },\n          { month: 'Feb', return: 2.8 },\n          { month: 'Mar', return: 2.4 }\n        ],\n        trades: generateTrades(203)\n      }\n    ];\n\n    setPerformanceData(mockData);\n  }, []);\n\n  const filteredData = selectedStrategy === 'all' \n    ? performanceData \n    : performanceData.filter(d => d.id === selectedStrategy);\n\n  const aggregatedMetrics = filteredData.reduce((acc, strategy) => {\n    const weight = 1 / filteredData.length;\n    return {\n      totalReturn: acc.totalReturn + (strategy.metrics.totalReturn * weight),\n      annualizedReturn: acc.annualizedReturn + (strategy.metrics.annualizedReturn * weight),\n      volatility: acc.volatility + (strategy.metrics.volatility * weight),\n      sharpeRatio: acc.sharpeRatio + (strategy.metrics.sharpeRatio * weight),\n      maxDrawdown: Math.min(acc.maxDrawdown, strategy.metrics.maxDrawdown),\n      winRate: acc.winRate + (strategy.metrics.winRate * weight),\n      profitFactor: acc.profitFactor + (strategy.metrics.profitFactor * weight),\n      totalTrades: acc.totalTrades + strategy.metrics.totalTrades\n    };\n  }, {\n    totalReturn: 0,\n    annualizedReturn: 0,\n    volatility: 0,\n    sharpeRatio: 0,\n    maxDrawdown: 0,\n    winRate: 0,\n    profitFactor: 0,\n    totalTrades: 0\n  });\n\n  const exportReport = () => {\n    const report = {\n      generatedAt: new Date().toISOString(),\n      period: selectedPeriod,\n      strategies: filteredData.map(strategy => ({\n        name: strategy.strategyName,\n        type: strategy.type,\n        metrics: strategy.metrics,\n        recentTrades: strategy.trades.slice(0, 10)\n      })),\n      aggregatedMetrics,\n      summary: {\n        totalStrategies: filteredData.length,\n        bestPerformer: filteredData.reduce((best, current) => \n          current.metrics.totalReturn > best.metrics.totalReturn ? current : best\n        ).strategyName,\n        totalTrades: aggregatedMetrics.totalTrades\n      }\n    };\n\n    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `performance-report-${selectedPeriod}-${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const getMetricColor = (value: number, type: 'return' | 'ratio' | 'drawdown' | 'percentage') => {\n    switch (type) {\n      case 'return':\n        return value >= 0 ? 'text-green-600' : 'text-red-600';\n      case 'ratio':\n        return value >= 1.5 ? 'text-green-600' : value >= 1 ? 'text-yellow-600' : 'text-red-600';\n      case 'drawdown':\n        return value >= -5 ? 'text-green-600' : value >= -15 ? 'text-yellow-600' : 'text-red-600';\n      case 'percentage':\n        return value >= 70 ? 'text-green-600' : value >= 50 ? 'text-yellow-600' : 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'automated': return <Target className=\"h-4 w-4\" />;\n      case 'ai-signals': return <Activity className=\"h-4 w-4\" />;\n      case 'copy-trading': return <TrendingUp className=\"h-4 w-4\" />;\n      case 'manual': return <BarChart3 className=\"h-4 w-4\" />;\n      default: return <BarChart3 className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-indigo-100 dark:bg-indigo-900/30 rounded-lg\">\n            <BarChart3 className=\"h-6 w-6 text-indigo-600 dark:text-indigo-400\" />\n          </div>\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Performance Analytics</h2>\n            <p className=\"text-gray-600 dark:text-gray-400\">Comprehensive strategy performance analysis</p>\n          </div>\n        </div>\n        <div className=\"flex space-x-3\">\n          <button\n            onClick={exportReport}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <Download className=\"h-4 w-4\" />\n            <span>Export Report</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-wrap items-center gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n        <div className=\"flex items-center space-x-2\">\n          <Filter className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n          <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Filters:</span>\n        </div>\n        \n        <select\n          value={selectedStrategy}\n          onChange={(e) => setSelectedStrategy(e.target.value)}\n          className=\"px-3 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm\"\n        >\n          <option value=\"all\">All Strategies</option>\n          {performanceData.map(strategy => (\n            <option key={strategy.id} value={strategy.id}>{strategy.strategyName}</option>\n          ))}\n        </select>\n        \n        <select\n          value={selectedPeriod}\n          onChange={(e) => setPeriod(e.target.value as any)}\n          className=\"px-3 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm\"\n        >\n          <option value=\"7d\">Last 7 Days</option>\n          <option value=\"30d\">Last 30 Days</option>\n          <option value=\"90d\">Last 90 Days</option>\n          <option value=\"1y\">Last Year</option>\n          <option value=\"all\">All Time</option>\n        </select>\n        \n        <div className=\"flex bg-white dark:bg-gray-700 rounded-lg border border-gray-300 dark:border-gray-600\">\n          {['overview', 'detailed', 'comparison'].map(mode => (\n            <button\n              key={mode}\n              onClick={() => setViewMode(mode as any)}\n              className={`px-3 py-1 text-sm capitalize transition-colors ${\n                viewMode === mode\n                  ? 'bg-blue-600 text-white'\n                  : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\n              } ${mode === 'overview' ? 'rounded-l-lg' : mode === 'comparison' ? 'rounded-r-lg' : ''}`}\n            >\n              {mode}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <TrendingUp className=\"h-5 w-5 text-green-600\" />\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Return</span>\n          </div>\n          <div className={`text-2xl font-bold ${getMetricColor(aggregatedMetrics.totalReturn, 'return')}`}>\n            {aggregatedMetrics.totalReturn >= 0 ? '+' : ''}{aggregatedMetrics.totalReturn.toFixed(1)}%\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            {aggregatedMetrics.annualizedReturn.toFixed(1)}% annualized\n          </div>\n        </div>\n        \n        <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Award className=\"h-5 w-5 text-blue-600\" />\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Sharpe Ratio</span>\n          </div>\n          <div className={`text-2xl font-bold ${getMetricColor(aggregatedMetrics.sharpeRatio, 'ratio')}`}>\n            {aggregatedMetrics.sharpeRatio.toFixed(2)}\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            Risk-adjusted return\n          </div>\n        </div>\n        \n        <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <TrendingDown className=\"h-5 w-5 text-red-600\" />\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Max Drawdown</span>\n          </div>\n          <div className={`text-2xl font-bold ${getMetricColor(aggregatedMetrics.maxDrawdown, 'drawdown')}`}>\n            {aggregatedMetrics.maxDrawdown.toFixed(1)}%\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            Worst decline\n          </div>\n        </div>\n        \n        <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Target className=\"h-5 w-5 text-purple-600\" />\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Win Rate</span>\n          </div>\n          <div className={`text-2xl font-bold ${getMetricColor(aggregatedMetrics.winRate, 'percentage')}`}>\n            {aggregatedMetrics.winRate.toFixed(1)}%\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            {aggregatedMetrics.totalTrades} total trades\n          </div>\n        </div>\n      </div>\n\n      {/* Strategy Performance Table */}\n      {viewMode === 'overview' && (\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700\">\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Strategy Performance</h3>\n          </div>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50 dark:bg-gray-700\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Strategy\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Type\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Return\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Sharpe\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Drawdown\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Win Rate\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Trades\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                {filteredData.map(strategy => (\n                  <tr key={strategy.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                        {strategy.strategyName}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getTypeIcon(strategy.type)}\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400 capitalize\">\n                          {strategy.type.replace('-', ' ')}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className={`text-sm font-medium ${getMetricColor(strategy.metrics.totalReturn, 'return')}`}>\n                        {strategy.metrics.totalReturn >= 0 ? '+' : ''}{strategy.metrics.totalReturn.toFixed(1)}%\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className={`text-sm ${getMetricColor(strategy.metrics.sharpeRatio, 'ratio')}`}>\n                        {strategy.metrics.sharpeRatio.toFixed(2)}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className={`text-sm ${getMetricColor(strategy.metrics.maxDrawdown, 'drawdown')}`}>\n                        {strategy.metrics.maxDrawdown.toFixed(1)}%\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className={`text-sm ${getMetricColor(strategy.metrics.winRate, 'percentage')}`}>\n                        {strategy.metrics.winRate.toFixed(1)}%\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900 dark:text-white\">\n                        {strategy.metrics.totalTrades}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n\n      {/* Detailed Metrics */}\n      {viewMode === 'detailed' && filteredData.length > 0 && (\n        <div className=\"space-y-6\">\n          {filteredData.map(strategy => (\n            <div key={strategy.id} className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700\">\n              <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">{strategy.strategyName}</h3>\n                  <div className=\"flex items-center space-x-2\">\n                    {getTypeIcon(strategy.type)}\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400 capitalize\">\n                      {strategy.type.replace('-', ' ')}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"p-6\">\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n                  <div className=\"text-center\">\n                    <div className={`text-lg font-bold ${getMetricColor(strategy.metrics.totalReturn, 'return')}`}>\n                      {strategy.metrics.totalReturn >= 0 ? '+' : ''}{strategy.metrics.totalReturn.toFixed(1)}%\n                    </div>\n                    <div className=\"text-xs text-gray-500\">Total Return</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                      {strategy.metrics.volatility.toFixed(1)}%\n                    </div>\n                    <div className=\"text-xs text-gray-500\">Volatility</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className={`text-lg font-bold ${getMetricColor(strategy.metrics.sharpeRatio, 'ratio')}`}>\n                      {strategy.metrics.sharpeRatio.toFixed(2)}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">Sharpe Ratio</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                      {strategy.metrics.calmarRatio.toFixed(2)}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">Calmar Ratio</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                      {strategy.metrics.sortinoRatio.toFixed(2)}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">Sortino Ratio</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\n                      {strategy.metrics.profitFactor.toFixed(2)}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">Profit Factor</div>\n                  </div>\n                </div>\n                \n                {/* Recent Trades */}\n                <div className=\"mt-6\">\n                  <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">Recent Trades</h4>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full text-sm\">\n                      <thead>\n                        <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                          <th className=\"text-left py-2\">Date</th>\n                          <th className=\"text-left py-2\">Symbol</th>\n                          <th className=\"text-left py-2\">Side</th>\n                          <th className=\"text-left py-2\">Quantity</th>\n                          <th className=\"text-left py-2\">Price</th>\n                          <th className=\"text-left py-2\">P&L</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {strategy.trades.slice(0, 5).map((trade, index) => (\n                          <tr key={index} className=\"border-b border-gray-100 dark:border-gray-800\">\n                            <td className=\"py-2 text-gray-600 dark:text-gray-400\">{trade.date}</td>\n                            <td className=\"py-2 text-gray-900 dark:text-white\">{trade.symbol}</td>\n                            <td className=\"py-2\">\n                              <span className={`px-2 py-1 text-xs rounded ${\n                                trade.side === 'buy' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                              }`}>\n                                {trade.side.toUpperCase()}\n                              </span>\n                            </td>\n                            <td className=\"py-2 text-gray-900 dark:text-white\">{trade.quantity.toFixed(2)}</td>\n                            <td className=\"py-2 text-gray-900 dark:text-white\">${trade.price.toFixed(2)}</td>\n                            <td className={`py-2 font-medium ${\n                              trade.pnl >= 0 ? 'text-green-600' : 'text-red-600'\n                            }`}>\n                              {trade.pnl >= 0 ? '+' : ''}${trade.pnl.toFixed(2)}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Comparison View */}\n      {viewMode === 'comparison' && (\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-6\">Strategy Comparison</h3>\n          <div className=\"space-y-6\">\n            {/* Performance Comparison Chart */}\n            <div className=\"h-64 bg-gray-50 dark:bg-gray-700 rounded-lg flex items-center justify-center\">\n              <div className=\"text-center\">\n                <BarChart3 className=\"h-12 w-12 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-gray-500 dark:text-gray-400\">Performance comparison chart would be rendered here</p>\n                <p className=\"text-sm text-gray-400\">Integration with charting library required</p>\n              </div>\n            </div>\n            \n            {/* Metrics Comparison Table */}\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                    <th className=\"text-left py-3 text-sm font-medium text-gray-900 dark:text-white\">Metric</th>\n                    {filteredData.map(strategy => (\n                      <th key={strategy.id} className=\"text-left py-3 text-sm font-medium text-gray-900 dark:text-white\">\n                        {strategy.strategyName}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {[\n                    { key: 'totalReturn', label: 'Total Return', format: (v: number) => `${v >= 0 ? '+' : ''}${v.toFixed(1)}%` },\n                    { key: 'sharpeRatio', label: 'Sharpe Ratio', format: (v: number) => v.toFixed(2) },\n                    { key: 'maxDrawdown', label: 'Max Drawdown', format: (v: number) => `${v.toFixed(1)}%` },\n                    { key: 'winRate', label: 'Win Rate', format: (v: number) => `${v.toFixed(1)}%` },\n                    { key: 'profitFactor', label: 'Profit Factor', format: (v: number) => v.toFixed(2) }\n                  ].map(metric => (\n                    <tr key={metric.key} className=\"border-b border-gray-100 dark:border-gray-800\">\n                      <td className=\"py-3 text-sm text-gray-600 dark:text-gray-400\">{metric.label}</td>\n                      {filteredData.map(strategy => (\n                        <td key={strategy.id} className=\"py-3 text-sm text-gray-900 dark:text-white\">\n                          {metric.format((strategy.metrics as any)[metric.key])}\n                        </td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PerformanceAnalytics;"],"names":[],"mappings":"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","debugId":null}}]
}