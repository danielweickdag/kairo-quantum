{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/profitFactorTrackingSystem.ts"],"sourcesContent":["import { TradeEntry, ExecutionMetrics } from './tradeLoggingSystem';\nimport { TradingSignal } from './multiMarketTradingEngine';\n\nexport interface ProfitFactorMetrics {\n  profitFactor: number;\n  grossProfit: number;\n  grossLoss: number;\n  totalTrades: number;\n  winningTrades: number;\n  losingTrades: number;\n  winRate: number;\n  averageWin: number;\n  averageLoss: number;\n  largestWin: number;\n  largestLoss: number;\n  consecutiveWins: number;\n  consecutiveLosses: number;\n  maxConsecutiveWins: number;\n  maxConsecutiveLosses: number;\n  expectancy: number;\n  kelly: number; // Kelly Criterion percentage\n  sharpeRatio: number;\n  calmarRatio: number;\n  maxDrawdown: number;\n  recoveryFactor: number;\n  profitToMaxDrawdownRatio: number;\n  timeframe: string;\n  lastUpdated: Date;\n}\n\nexport interface PerformanceBreakdown {\n  byMarket: Record<string, ProfitFactorMetrics>;\n  bySymbol: Record<string, ProfitFactorMetrics>;\n  byTimeframe: Record<string, ProfitFactorMetrics>;\n  bySignalType: Record<string, ProfitFactorMetrics>;\n  byConfidenceRange: Record<string, ProfitFactorMetrics>;\n  monthly: Record<string, ProfitFactorMetrics>;\n  weekly: Record<string, ProfitFactorMetrics>;\n  daily: Record<string, ProfitFactorMetrics>;\n}\n\nexport interface PerformanceAlert {\n  id: string;\n  type: 'PROFIT_FACTOR_LOW' | 'DRAWDOWN_HIGH' | 'WIN_RATE_LOW' | 'CONSECUTIVE_LOSSES';\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  message: string;\n  value: number;\n  threshold: number;\n  timestamp: Date;\n  acknowledged: boolean;\n}\n\nexport interface PerformanceTarget {\n  profitFactor: number;\n  winRate: number;\n  maxDrawdown: number;\n  minSharpeRatio: number;\n  minCalmarRatio: number;\n  maxConsecutiveLosses: number;\n}\n\nexport interface RollingMetrics {\n  period: '1D' | '1W' | '1M' | '3M' | '6M' | '1Y';\n  profitFactor: number[];\n  winRate: number[];\n  drawdown: number[];\n  timestamps: Date[];\n}\n\nexport class ProfitFactorTrackingSystem {\n  private trades: Map<string, TradeEntry> = new Map();\n  private userMetrics: Map<string, ProfitFactorMetrics> = new Map();\n  private performanceBreakdowns: Map<string, PerformanceBreakdown> = new Map();\n  private performanceAlerts: Map<string, PerformanceAlert[]> = new Map();\n  private rollingMetrics: Map<string, Map<string, RollingMetrics>> = new Map();\n  private performanceTargets: Map<string, PerformanceTarget> = new Map();\n  private updateInterval: NodeJS.Timeout | null = null;\n\n  constructor(\n    private defaultTargets: PerformanceTarget = {\n      profitFactor: 1.6,\n      winRate: 60,\n      maxDrawdown: 5,\n      minSharpeRatio: 1.5,\n      minCalmarRatio: 2.0,\n      maxConsecutiveLosses: 5\n    }\n  ) {\n    this.startPeriodicUpdates();\n  }\n\n  /**\n   * Start periodic metric updates\n   */\n  private startPeriodicUpdates(): void {\n    this.updateInterval = setInterval(() => {\n      this.updateAllUserMetrics();\n      this.checkPerformanceAlerts();\n      this.updateRollingMetrics();\n    }, 60000); // Update every minute\n  }\n\n  /**\n   * Add or update a trade for profit factor calculation\n   */\n  addTrade(trade: TradeEntry): void {\n    this.trades.set(trade.id, trade);\n    \n    // Update metrics for the user\n    this.updateUserMetrics(trade.userId);\n    \n    // Update performance breakdown\n    this.updatePerformanceBreakdown(trade.userId);\n    \n    console.log(`Trade ${trade.id} added to profit factor tracking`);\n  }\n\n  /**\n   * Update trade (when trade is closed or modified)\n   */\n  updateTrade(trade: TradeEntry): void {\n    if (this.trades.has(trade.id)) {\n      this.trades.set(trade.id, trade);\n      this.updateUserMetrics(trade.userId);\n      this.updatePerformanceBreakdown(trade.userId);\n      console.log(`Trade ${trade.id} updated in profit factor tracking`);\n    }\n  }\n\n  /**\n   * Calculate profit factor metrics for a user\n   */\n  calculateProfitFactorMetrics(userId: string): ProfitFactorMetrics {\n    const userTrades = this.getUserTrades(userId);\n    const closedTrades = userTrades.filter(trade => trade.status === 'CLOSED' && trade.pnl !== undefined);\n    \n    if (closedTrades.length === 0) {\n      return this.getEmptyMetrics();\n    }\n\n    // Separate winning and losing trades\n    const winningTrades = closedTrades.filter(trade => trade.pnl! > 0);\n    const losingTrades = closedTrades.filter(trade => trade.pnl! < 0);\n    \n    // Calculate basic metrics\n    const grossProfit = winningTrades.reduce((sum, trade) => sum + trade.pnl!, 0);\n    const grossLoss = Math.abs(losingTrades.reduce((sum, trade) => sum + trade.pnl!, 0));\n    const profitFactor = grossLoss > 0 ? grossProfit / grossLoss : grossProfit > 0 ? Infinity : 0;\n    \n    const winRate = (winningTrades.length / closedTrades.length) * 100;\n    const averageWin = winningTrades.length > 0 ? grossProfit / winningTrades.length : 0;\n    const averageLoss = losingTrades.length > 0 ? grossLoss / losingTrades.length : 0;\n    \n    const largestWin = winningTrades.length > 0 ? Math.max(...winningTrades.map(t => t.pnl!)) : 0;\n    const largestLoss = losingTrades.length > 0 ? Math.abs(Math.min(...losingTrades.map(t => t.pnl!))) : 0;\n    \n    // Calculate consecutive wins/losses\n    const { consecutiveWins, consecutiveLosses, maxConsecutiveWins, maxConsecutiveLosses } = \n      this.calculateConsecutiveStats(closedTrades);\n    \n    // Calculate expectancy\n    const expectancy = (winRate / 100) * averageWin - ((100 - winRate) / 100) * averageLoss;\n    \n    // Calculate Kelly Criterion\n    const kelly = averageLoss > 0 ? ((winRate / 100) - ((100 - winRate) / 100) / (averageWin / averageLoss)) * 100 : 0;\n    \n    // Calculate Sharpe Ratio\n    const returns = closedTrades.map(trade => (trade.pnlPercentage || 0) / 100);\n    const sharpeRatio = this.calculateSharpeRatio(returns);\n    \n    // Calculate drawdown metrics\n    const { maxDrawdown, recoveryFactor } = this.calculateDrawdownMetrics(closedTrades);\n    \n    // Calculate Calmar Ratio\n    const totalReturn = closedTrades.reduce((sum, trade) => sum + (trade.pnlPercentage || 0), 0);\n    const calmarRatio = maxDrawdown > 0 ? (totalReturn / 100) / (maxDrawdown / 100) : 0;\n    \n    const profitToMaxDrawdownRatio = maxDrawdown > 0 ? (grossProfit - grossLoss) / (maxDrawdown / 100) : 0;\n\n    return {\n      profitFactor,\n      grossProfit,\n      grossLoss,\n      totalTrades: closedTrades.length,\n      winningTrades: winningTrades.length,\n      losingTrades: losingTrades.length,\n      winRate,\n      averageWin,\n      averageLoss,\n      largestWin,\n      largestLoss,\n      consecutiveWins,\n      consecutiveLosses,\n      maxConsecutiveWins,\n      maxConsecutiveLosses,\n      expectancy,\n      kelly,\n      sharpeRatio,\n      calmarRatio,\n      maxDrawdown,\n      recoveryFactor,\n      profitToMaxDrawdownRatio,\n      timeframe: 'ALL',\n      lastUpdated: new Date()\n    };\n  }\n\n  /**\n   * Calculate consecutive wins/losses statistics\n   */\n  private calculateConsecutiveStats(trades: TradeEntry[]): {\n    consecutiveWins: number;\n    consecutiveLosses: number;\n    maxConsecutiveWins: number;\n    maxConsecutiveLosses: number;\n  } {\n    if (trades.length === 0) {\n      return { consecutiveWins: 0, consecutiveLosses: 0, maxConsecutiveWins: 0, maxConsecutiveLosses: 0 };\n    }\n\n    // Sort trades by exit time\n    const sortedTrades = trades\n      .filter(trade => trade.exitTime)\n      .sort((a, b) => a.exitTime!.getTime() - b.exitTime!.getTime());\n\n    let consecutiveWins = 0;\n    let consecutiveLosses = 0;\n    let maxConsecutiveWins = 0;\n    let maxConsecutiveLosses = 0;\n    let currentWinStreak = 0;\n    let currentLossStreak = 0;\n\n    for (const trade of sortedTrades) {\n      if (trade.pnl! > 0) {\n        currentWinStreak++;\n        currentLossStreak = 0;\n        maxConsecutiveWins = Math.max(maxConsecutiveWins, currentWinStreak);\n      } else {\n        currentLossStreak++;\n        currentWinStreak = 0;\n        maxConsecutiveLosses = Math.max(maxConsecutiveLosses, currentLossStreak);\n      }\n    }\n\n    // Current streaks are the last streaks\n    consecutiveWins = currentWinStreak;\n    consecutiveLosses = currentLossStreak;\n\n    return { consecutiveWins, consecutiveLosses, maxConsecutiveWins, maxConsecutiveLosses };\n  }\n\n  /**\n   * Calculate Sharpe Ratio\n   */\n  private calculateSharpeRatio(returns: number[], riskFreeRate: number = 0.02): number {\n    if (returns.length === 0) return 0;\n\n    const avgReturn = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;\n    const excessReturn = avgReturn - (riskFreeRate / 252); // Daily risk-free rate\n    \n    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n    const stdDev = Math.sqrt(variance);\n    \n    return stdDev > 0 ? excessReturn / stdDev : 0;\n  }\n\n  /**\n   * Calculate drawdown metrics\n   */\n  private calculateDrawdownMetrics(trades: TradeEntry[]): {\n    maxDrawdown: number;\n    recoveryFactor: number;\n  } {\n    if (trades.length === 0) {\n      return { maxDrawdown: 0, recoveryFactor: 0 };\n    }\n\n    // Sort trades by exit time\n    const sortedTrades = trades\n      .filter(trade => trade.exitTime && trade.pnl !== undefined)\n      .sort((a, b) => a.exitTime!.getTime() - b.exitTime!.getTime());\n\n    let peak = 0;\n    let maxDrawdown = 0;\n    let currentBalance = 0;\n    let totalProfit = 0;\n\n    for (const trade of sortedTrades) {\n      currentBalance += trade.pnl!;\n      totalProfit += trade.pnl!;\n      \n      if (currentBalance > peak) {\n        peak = currentBalance;\n      }\n      \n      const drawdown = peak > 0 ? ((peak - currentBalance) / peak) * 100 : 0;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n\n    const recoveryFactor = maxDrawdown > 0 ? totalProfit / (maxDrawdown / 100) : 0;\n\n    return { maxDrawdown, recoveryFactor };\n  }\n\n  /**\n   * Get empty metrics structure\n   */\n  private getEmptyMetrics(): ProfitFactorMetrics {\n    return {\n      profitFactor: 0,\n      grossProfit: 0,\n      grossLoss: 0,\n      totalTrades: 0,\n      winningTrades: 0,\n      losingTrades: 0,\n      winRate: 0,\n      averageWin: 0,\n      averageLoss: 0,\n      largestWin: 0,\n      largestLoss: 0,\n      consecutiveWins: 0,\n      consecutiveLosses: 0,\n      maxConsecutiveWins: 0,\n      maxConsecutiveLosses: 0,\n      expectancy: 0,\n      kelly: 0,\n      sharpeRatio: 0,\n      calmarRatio: 0,\n      maxDrawdown: 0,\n      recoveryFactor: 0,\n      profitToMaxDrawdownRatio: 0,\n      timeframe: 'ALL',\n      lastUpdated: new Date()\n    };\n  }\n\n  /**\n   * Update metrics for a specific user\n   */\n  private updateUserMetrics(userId: string): void {\n    const metrics = this.calculateProfitFactorMetrics(userId);\n    this.userMetrics.set(userId, metrics);\n  }\n\n  /**\n   * Update all user metrics\n   */\n  private updateAllUserMetrics(): void {\n    const userIds = new Set(Array.from(this.trades.values()).map(trade => trade.userId));\n    \n    Array.from(userIds).forEach(userId => {\n      this.updateUserMetrics(userId);\n    });\n  }\n\n  /**\n   * Update performance breakdown by various categories\n   */\n  private updatePerformanceBreakdown(userId: string): void {\n    const userTrades = this.getUserTrades(userId);\n    const breakdown: PerformanceBreakdown = {\n      byMarket: {},\n      bySymbol: {},\n      byTimeframe: {},\n      bySignalType: {},\n      byConfidenceRange: {},\n      monthly: {},\n      weekly: {},\n      daily: {}\n    };\n\n    // Group trades by market\n    const tradesByMarket = this.groupTradesBy(userTrades, 'market');\n    for (const [market, trades] of Object.entries(tradesByMarket)) {\n      breakdown.byMarket[market] = this.calculateMetricsForTrades(trades);\n    }\n\n    // Group trades by symbol\n    const tradesBySymbol = this.groupTradesBy(userTrades, 'symbol');\n    for (const [symbol, trades] of Object.entries(tradesBySymbol)) {\n      breakdown.bySymbol[symbol] = this.calculateMetricsForTrades(trades);\n    }\n\n    // Group trades by signal type\n    const tradesByType = this.groupTradesBy(userTrades, 'type');\n    for (const [type, trades] of Object.entries(tradesByType)) {\n      breakdown.bySignalType[type] = this.calculateMetricsForTrades(trades);\n    }\n\n    // Group trades by confidence range\n    const tradesByConfidence = this.groupTradesByConfidenceRange(userTrades);\n    for (const [range, trades] of Object.entries(tradesByConfidence)) {\n      breakdown.byConfidenceRange[range] = this.calculateMetricsForTrades(trades);\n    }\n\n    // Group trades by time periods\n    breakdown.monthly = this.groupTradesByTimePeriod(userTrades, 'month');\n    breakdown.weekly = this.groupTradesByTimePeriod(userTrades, 'week');\n    breakdown.daily = this.groupTradesByTimePeriod(userTrades, 'day');\n\n    this.performanceBreakdowns.set(userId, breakdown);\n  }\n\n  /**\n   * Group trades by a specific property\n   */\n  private groupTradesBy(trades: TradeEntry[], property: keyof TradeEntry): Record<string, TradeEntry[]> {\n    return trades.reduce((groups, trade) => {\n      const key = String(trade[property]);\n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key].push(trade);\n      return groups;\n    }, {} as Record<string, TradeEntry[]>);\n  }\n\n  /**\n   * Group trades by confidence range\n   */\n  private groupTradesByConfidenceRange(trades: TradeEntry[]): Record<string, TradeEntry[]> {\n    const ranges = {\n      '90-100%': [] as TradeEntry[],\n      '80-89%': [] as TradeEntry[],\n      '70-79%': [] as TradeEntry[],\n      '60-69%': [] as TradeEntry[],\n      '50-59%': [] as TradeEntry[],\n      '<50%': [] as TradeEntry[]\n    };\n\n    for (const trade of trades) {\n      const confidence = trade.confidence;\n      if (confidence >= 90) ranges['90-100%'].push(trade);\n      else if (confidence >= 80) ranges['80-89%'].push(trade);\n      else if (confidence >= 70) ranges['70-79%'].push(trade);\n      else if (confidence >= 60) ranges['60-69%'].push(trade);\n      else if (confidence >= 50) ranges['50-59%'].push(trade);\n      else ranges['<50%'].push(trade);\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Group trades by time period\n   */\n  private groupTradesByTimePeriod(\n    trades: TradeEntry[],\n    period: 'day' | 'week' | 'month'\n  ): Record<string, ProfitFactorMetrics> {\n    const groups: Record<string, TradeEntry[]> = {};\n    \n    for (const trade of trades.filter(t => t.exitTime)) {\n      let key: string;\n      const date = trade.exitTime!;\n      \n      switch (period) {\n        case 'day':\n          key = date.toISOString().split('T')[0];\n          break;\n        case 'week':\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          key = weekStart.toISOString().split('T')[0];\n          break;\n        case 'month':\n          key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          break;\n      }\n      \n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key].push(trade);\n    }\n\n    const result: Record<string, ProfitFactorMetrics> = {};\n    for (const [key, groupTrades] of Object.entries(groups)) {\n      result[key] = this.calculateMetricsForTrades(groupTrades);\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate metrics for a specific set of trades\n   */\n  private calculateMetricsForTrades(trades: TradeEntry[]): ProfitFactorMetrics {\n    const closedTrades = trades.filter(trade => trade.status === 'CLOSED' && trade.pnl !== undefined);\n    \n    if (closedTrades.length === 0) {\n      return this.getEmptyMetrics();\n    }\n\n    // Use the same calculation logic as the main method\n    const winningTrades = closedTrades.filter(trade => trade.pnl! > 0);\n    const losingTrades = closedTrades.filter(trade => trade.pnl! < 0);\n    \n    const grossProfit = winningTrades.reduce((sum, trade) => sum + trade.pnl!, 0);\n    const grossLoss = Math.abs(losingTrades.reduce((sum, trade) => sum + trade.pnl!, 0));\n    const profitFactor = grossLoss > 0 ? grossProfit / grossLoss : grossProfit > 0 ? Infinity : 0;\n    \n    const winRate = (winningTrades.length / closedTrades.length) * 100;\n    const averageWin = winningTrades.length > 0 ? grossProfit / winningTrades.length : 0;\n    const averageLoss = losingTrades.length > 0 ? grossLoss / losingTrades.length : 0;\n    \n    const largestWin = winningTrades.length > 0 ? Math.max(...winningTrades.map(t => t.pnl!)) : 0;\n    const largestLoss = losingTrades.length > 0 ? Math.abs(Math.min(...losingTrades.map(t => t.pnl!))) : 0;\n    \n    const { consecutiveWins, consecutiveLosses, maxConsecutiveWins, maxConsecutiveLosses } = \n      this.calculateConsecutiveStats(closedTrades);\n    \n    const expectancy = (winRate / 100) * averageWin - ((100 - winRate) / 100) * averageLoss;\n    const kelly = averageLoss > 0 ? ((winRate / 100) - ((100 - winRate) / 100) / (averageWin / averageLoss)) * 100 : 0;\n    \n    const returns = closedTrades.map(trade => (trade.pnlPercentage || 0) / 100);\n    const sharpeRatio = this.calculateSharpeRatio(returns);\n    \n    const { maxDrawdown, recoveryFactor } = this.calculateDrawdownMetrics(closedTrades);\n    \n    const totalReturn = closedTrades.reduce((sum, trade) => sum + (trade.pnlPercentage || 0), 0);\n    const calmarRatio = maxDrawdown > 0 ? (totalReturn / 100) / (maxDrawdown / 100) : 0;\n    \n    const profitToMaxDrawdownRatio = maxDrawdown > 0 ? (grossProfit - grossLoss) / (maxDrawdown / 100) : 0;\n\n    return {\n      profitFactor,\n      grossProfit,\n      grossLoss,\n      totalTrades: closedTrades.length,\n      winningTrades: winningTrades.length,\n      losingTrades: losingTrades.length,\n      winRate,\n      averageWin,\n      averageLoss,\n      largestWin,\n      largestLoss,\n      consecutiveWins,\n      consecutiveLosses,\n      maxConsecutiveWins,\n      maxConsecutiveLosses,\n      expectancy,\n      kelly,\n      sharpeRatio,\n      calmarRatio,\n      maxDrawdown,\n      recoveryFactor,\n      profitToMaxDrawdownRatio,\n      timeframe: 'SUBSET',\n      lastUpdated: new Date()\n    };\n  }\n\n  /**\n   * Check for performance alerts\n   */\n  private checkPerformanceAlerts(): void {\n    Array.from(this.userMetrics.entries()).forEach(([userId, metrics]) => {\n      const targets = this.performanceTargets.get(userId) || this.defaultTargets;\n      const alerts: PerformanceAlert[] = [];\n\n      // Check profit factor\n      if (metrics.profitFactor < targets.profitFactor) {\n        alerts.push({\n          id: `pf_${userId}_${Date.now()}`,\n          type: 'PROFIT_FACTOR_LOW',\n          severity: metrics.profitFactor < targets.profitFactor * 0.5 ? 'CRITICAL' : 'HIGH',\n          message: `Profit factor (${metrics.profitFactor.toFixed(2)}) is below target (${targets.profitFactor})`,\n          value: metrics.profitFactor,\n          threshold: targets.profitFactor,\n          timestamp: new Date(),\n          acknowledged: false\n        });\n      }\n\n      // Check drawdown\n      if (metrics.maxDrawdown > targets.maxDrawdown) {\n        alerts.push({\n          id: `dd_${userId}_${Date.now()}`,\n          type: 'DRAWDOWN_HIGH',\n          severity: metrics.maxDrawdown > targets.maxDrawdown * 2 ? 'CRITICAL' : 'HIGH',\n          message: `Max drawdown (${metrics.maxDrawdown.toFixed(2)}%) exceeds target (${targets.maxDrawdown}%)`,\n          value: metrics.maxDrawdown,\n          threshold: targets.maxDrawdown,\n          timestamp: new Date(),\n          acknowledged: false\n        });\n      }\n\n      // Check win rate\n      if (metrics.winRate < targets.winRate) {\n        alerts.push({\n          id: `wr_${userId}_${Date.now()}`,\n          type: 'WIN_RATE_LOW',\n          severity: metrics.winRate < targets.winRate * 0.7 ? 'HIGH' : 'MEDIUM',\n          message: `Win rate (${metrics.winRate.toFixed(1)}%) is below target (${targets.winRate}%)`,\n          value: metrics.winRate,\n          threshold: targets.winRate,\n          timestamp: new Date(),\n          acknowledged: false\n        });\n      }\n\n      // Check consecutive losses\n      if (metrics.consecutiveLosses >= targets.maxConsecutiveLosses) {\n        alerts.push({\n          id: `cl_${userId}_${Date.now()}`,\n          type: 'CONSECUTIVE_LOSSES',\n          severity: metrics.consecutiveLosses >= targets.maxConsecutiveLosses * 1.5 ? 'CRITICAL' : 'HIGH',\n          message: `Consecutive losses (${metrics.consecutiveLosses}) reached threshold (${targets.maxConsecutiveLosses})`,\n          value: metrics.consecutiveLosses,\n          threshold: targets.maxConsecutiveLosses,\n          timestamp: new Date(),\n          acknowledged: false\n        });\n      }\n\n      if (alerts.length > 0) {\n        const existingAlerts = this.performanceAlerts.get(userId) || [];\n        this.performanceAlerts.set(userId, [...existingAlerts, ...alerts]);\n      }\n    });\n  }\n\n  /**\n   * Update rolling metrics\n   */\n  private updateRollingMetrics(): void {\n    const periods: RollingMetrics['period'][] = ['1D', '1W', '1M', '3M', '6M', '1Y'];\n    \n    Array.from(this.userMetrics.entries()).forEach(([userId]) => {\n      const userRollingMetrics = this.rollingMetrics.get(userId) || new Map();\n      \n      for (const period of periods) {\n        const metrics = this.calculateRollingMetrics(userId, period);\n        userRollingMetrics.set(period, metrics);\n      }\n      \n      this.rollingMetrics.set(userId, userRollingMetrics);\n    });\n  }\n\n  /**\n   * Calculate rolling metrics for a specific period\n   */\n  private calculateRollingMetrics(userId: string, period: RollingMetrics['period']): RollingMetrics {\n    const now = new Date();\n    const periodMs = this.getPeriodMilliseconds(period);\n    const startDate = new Date(now.getTime() - periodMs);\n    \n    const userTrades = this.getUserTrades(userId)\n      .filter(trade => trade.exitTime && trade.exitTime >= startDate)\n      .sort((a, b) => a.exitTime!.getTime() - b.exitTime!.getTime());\n    \n    const rollingMetrics: RollingMetrics = {\n      period,\n      profitFactor: [],\n      winRate: [],\n      drawdown: [],\n      timestamps: []\n    };\n    \n    // Calculate metrics for rolling windows\n    const windowSize = Math.max(1, Math.floor(userTrades.length / 20)); // 20 data points\n    \n    for (let i = windowSize; i <= userTrades.length; i += windowSize) {\n      const windowTrades = userTrades.slice(Math.max(0, i - windowSize), i);\n      const metrics = this.calculateMetricsForTrades(windowTrades);\n      \n      rollingMetrics.profitFactor.push(metrics.profitFactor);\n      rollingMetrics.winRate.push(metrics.winRate);\n      rollingMetrics.drawdown.push(metrics.maxDrawdown);\n      rollingMetrics.timestamps.push(windowTrades[windowTrades.length - 1].exitTime!);\n    }\n    \n    return rollingMetrics;\n  }\n\n  /**\n   * Get period in milliseconds\n   */\n  private getPeriodMilliseconds(period: RollingMetrics['period']): number {\n    switch (period) {\n      case '1D': return 24 * 60 * 60 * 1000;\n      case '1W': return 7 * 24 * 60 * 60 * 1000;\n      case '1M': return 30 * 24 * 60 * 60 * 1000;\n      case '3M': return 90 * 24 * 60 * 60 * 1000;\n      case '6M': return 180 * 24 * 60 * 60 * 1000;\n      case '1Y': return 365 * 24 * 60 * 60 * 1000;\n      default: return 24 * 60 * 60 * 1000;\n    }\n  }\n\n  /**\n   * Get user trades\n   */\n  private getUserTrades(userId: string): TradeEntry[] {\n    return Array.from(this.trades.values()).filter(trade => trade.userId === userId);\n  }\n\n  /**\n   * Get profit factor metrics for a user\n   */\n  getProfitFactorMetrics(userId: string): ProfitFactorMetrics | null {\n    return this.userMetrics.get(userId) || null;\n  }\n\n  /**\n   * Get performance breakdown for a user\n   */\n  getPerformanceBreakdown(userId: string): PerformanceBreakdown | null {\n    return this.performanceBreakdowns.get(userId) || null;\n  }\n\n  /**\n   * Get performance alerts for a user\n   */\n  getPerformanceAlerts(userId: string): PerformanceAlert[] {\n    return this.performanceAlerts.get(userId) || [];\n  }\n\n  /**\n   * Get rolling metrics for a user\n   */\n  getRollingMetrics(userId: string, period: RollingMetrics['period']): RollingMetrics | null {\n    const userMetrics = this.rollingMetrics.get(userId);\n    return userMetrics?.get(period) || null;\n  }\n\n  /**\n   * Set performance targets for a user\n   */\n  setPerformanceTargets(userId: string, targets: PerformanceTarget): void {\n    this.performanceTargets.set(userId, targets);\n    console.log(`Performance targets set for user ${userId}`);\n  }\n\n  /**\n   * Acknowledge performance alert\n   */\n  acknowledgeAlert(userId: string, alertId: string): void {\n    const alerts = this.performanceAlerts.get(userId) || [];\n    const alert = alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n      console.log(`Alert ${alertId} acknowledged for user ${userId}`);\n    }\n  }\n\n  /**\n   * Get system-wide statistics\n   */\n  getSystemStats(): {\n    totalUsers: number;\n    averageProfitFactor: number;\n    averageWinRate: number;\n    totalTrades: number;\n    totalAlerts: number;\n    topPerformers: { userId: string; profitFactor: number }[];\n  } {\n    const allMetrics = Array.from(this.userMetrics.values());\n    const totalUsers = allMetrics.length;\n    \n    const averageProfitFactor = totalUsers > 0 ? \n      allMetrics.reduce((sum, m) => sum + m.profitFactor, 0) / totalUsers : 0;\n    \n    const averageWinRate = totalUsers > 0 ? \n      allMetrics.reduce((sum, m) => sum + m.winRate, 0) / totalUsers : 0;\n    \n    const totalTrades = allMetrics.reduce((sum, m) => sum + m.totalTrades, 0);\n    \n    const totalAlerts = Array.from(this.performanceAlerts.values())\n      .reduce((sum, alerts) => sum + alerts.filter(a => !a.acknowledged).length, 0);\n    \n    const topPerformers = Array.from(this.userMetrics.entries())\n      .map(([userId, metrics]) => ({ userId, profitFactor: metrics.profitFactor }))\n      .sort((a, b) => b.profitFactor - a.profitFactor)\n      .slice(0, 10);\n    \n    return {\n      totalUsers,\n      averageProfitFactor,\n      averageWinRate,\n      totalTrades,\n      totalAlerts,\n      topPerformers\n    };\n  }\n\n  /**\n   * Export performance data\n   */\n  exportPerformanceData(userId: string, format: 'JSON' | 'CSV' = 'JSON'): string {\n    const metrics = this.userMetrics.get(userId);\n    const breakdown = this.performanceBreakdowns.get(userId);\n    const alerts = this.performanceAlerts.get(userId) || [];\n    \n    const data = {\n      metrics,\n      breakdown,\n      alerts,\n      exportedAt: new Date().toISOString()\n    };\n    \n    if (format === 'CSV') {\n      // Convert to CSV format (simplified)\n      const csvData = [\n        ['Metric', 'Value'],\n        ['Profit Factor', metrics?.profitFactor.toString() || '0'],\n        ['Win Rate', `${metrics?.winRate.toFixed(1) || '0'}%`],\n        ['Total Trades', metrics?.totalTrades.toString() || '0'],\n        ['Gross Profit', metrics?.grossProfit.toString() || '0'],\n        ['Gross Loss', metrics?.grossLoss.toString() || '0'],\n        ['Max Drawdown', `${metrics?.maxDrawdown.toFixed(2) || '0'}%`],\n        ['Sharpe Ratio', metrics?.sharpeRatio.toFixed(2) || '0'],\n        ['Calmar Ratio', metrics?.calmarRatio.toFixed(2) || '0']\n      ];\n      \n      return csvData.map(row => row.join(',')).join('\\n');\n    }\n    \n    return JSON.stringify(data, null, 2);\n  }\n\n  /**\n   * Stop the tracking system\n   */\n  stop(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n    console.log('Profit factor tracking system stopped');\n  }\n}\n\nexport default ProfitFactorTrackingSystem;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 691, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/BalanceTrackingService.ts"],"sourcesContent":["'use client'\n\ninterface BalanceData {\n  totalBalance: number\n  availableBalance: number\n  investedAmount: number\n  pendingDeposits: number\n  pendingWithdrawals: number\n  lastUpdated: Date\n}\n\ninterface BalanceUpdateListener {\n  (balance: BalanceData): void\n}\n\nclass BalanceTrackingService {\n  private balance: BalanceData = {\n    totalBalance: 125000,\n    availableBalance: 45000,\n    investedAmount: 80000,\n    pendingDeposits: 0,\n    pendingWithdrawals: 0,\n    lastUpdated: new Date()\n  }\n\n  private listeners: Set<BalanceUpdateListener> = new Set()\n  private updateInterval: NodeJS.Timeout | null = null\n\n  constructor() {\n    // Start real-time updates\n    this.startRealTimeUpdates()\n  }\n\n  /**\n   * Subscribe to balance updates\n   */\n  subscribe(listener: BalanceUpdateListener): () => void {\n    this.listeners.add(listener)\n    \n    // Immediately send current balance\n    listener(this.balance)\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(listener)\n    }\n  }\n\n  /**\n   * Get current balance\n   */\n  getCurrentBalance(): BalanceData {\n    return { ...this.balance }\n  }\n\n  /**\n   * Update balance after deposit\n   */\n  async processDeposit(amount: number): Promise<void> {\n    // Add to pending deposits first\n    this.balance.pendingDeposits += amount\n    this.notifyListeners()\n\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 2000))\n\n    // Move from pending to available balance\n    this.balance.pendingDeposits -= amount\n    this.balance.availableBalance += amount\n    this.balance.totalBalance += amount\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Update balance after withdrawal\n   */\n  async processWithdrawal(amount: number): Promise<void> {\n    // Check if sufficient funds\n    if (this.balance.availableBalance < amount) {\n      throw new Error('Insufficient funds for withdrawal')\n    }\n\n    // Add to pending withdrawals\n    this.balance.pendingWithdrawals += amount\n    this.balance.availableBalance -= amount\n    this.notifyListeners()\n\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 2000))\n\n    // Complete withdrawal\n    this.balance.pendingWithdrawals -= amount\n    this.balance.totalBalance -= amount\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Update invested amount\n   */\n  updateInvestedAmount(amount: number): void {\n    const difference = amount - this.balance.investedAmount\n    \n    // Adjust available balance\n    this.balance.availableBalance -= difference\n    this.balance.investedAmount = amount\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Add profit from trading\n   */\n  addTradingProfit(profit: number): void {\n    this.balance.availableBalance += profit\n    this.balance.totalBalance += profit\n    this.balance.lastUpdated = new Date()\n    \n    this.notifyListeners()\n  }\n\n  /**\n   * Start real-time balance updates (simulate market changes)\n   */\n  private startRealTimeUpdates(): void {\n    this.updateInterval = setInterval(() => {\n      // Simulate small market fluctuations in invested amount\n      const fluctuation = (Math.random() - 0.5) * 100 // ±$50\n      const newInvestedValue = Math.max(0, this.balance.investedAmount + fluctuation)\n      const difference = newInvestedValue - this.balance.investedAmount\n      \n      this.balance.investedAmount = newInvestedValue\n      this.balance.totalBalance += difference\n      this.balance.lastUpdated = new Date()\n      \n      this.notifyListeners()\n    }, 5000) // Update every 5 seconds\n  }\n\n  /**\n   * Stop real-time updates\n   */\n  stopRealTimeUpdates(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval)\n      this.updateInterval = null\n    }\n  }\n\n  /**\n   * Notify all listeners of balance changes\n   */\n  private notifyListeners(): void {\n    const balanceCopy = { ...this.balance }\n    this.listeners.forEach(listener => {\n      try {\n        listener(balanceCopy)\n      } catch (error) {\n        console.error('Error in balance listener:', error)\n      }\n    })\n  }\n\n  /**\n   * Format currency for display\n   */\n  formatCurrency(amount: number): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(amount)\n  }\n\n  /**\n   * Get balance summary for display\n   */\n  getBalanceSummary(): {\n    total: string\n    available: string\n    invested: string\n    pending: string\n  } {\n    return {\n      total: this.formatCurrency(this.balance.totalBalance),\n      available: this.formatCurrency(this.balance.availableBalance),\n      invested: this.formatCurrency(this.balance.investedAmount),\n      pending: this.formatCurrency(this.balance.pendingDeposits + this.balance.pendingWithdrawals)\n    }\n  }\n}\n\n// Create singleton instance\nconst balanceTrackingService = new BalanceTrackingService()\n\nexport default balanceTrackingService\nexport type { BalanceData, BalanceUpdateListener }"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 851, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/services/AutomatedWorkflowService.ts"],"sourcesContent":["'use client';\n\nimport { toast } from 'react-hot-toast';\nimport balanceTrackingService from './BalanceTrackingService';\n\n// Types for the automated workflow\nexport interface WorkflowConfig {\n  autoDeposit: {\n    enabled: boolean;\n    amount: number;\n    frequency: 'daily' | 'weekly' | 'monthly';\n    source: 'bank' | 'card' | 'crypto';\n  };\n  autoInvest: {\n    enabled: boolean;\n    strategy: 'conservative' | 'moderate' | 'aggressive' | 'custom';\n    allocation: {\n      stocks: number;\n      crypto: number;\n      forex: number;\n      commodities: number;\n    };\n    minBalance: number;\n  };\n  autoWithdraw: {\n    enabled: boolean;\n    profitThreshold: number;\n    withdrawPercentage: number;\n    destination: 'bank' | 'card' | 'crypto';\n  };\n}\n\nexport interface WorkflowStatus {\n  isRunning: boolean;\n  lastExecution: Date | null;\n  nextExecution: Date | null;\n  totalDeposited: number;\n  totalInvested: number;\n  totalWithdrawn: number;\n  currentBalance: number;\n  totalProfit: number;\n}\n\nexport interface Transaction {\n  id: string;\n  type: 'deposit' | 'invest' | 'withdraw';\n  amount: number;\n  status: 'pending' | 'completed' | 'failed';\n  timestamp: Date;\n  description: string;\n}\n\nclass AutomatedWorkflowService {\n  private config: WorkflowConfig;\n  private status: WorkflowStatus;\n  private transactions: Transaction[];\n  private intervalId: NodeJS.Timeout | null = null;\n\n  constructor() {\n    // Load configuration from localStorage or use defaults\n    this.config = this.loadConfig();\n    this.status = this.loadStatus();\n    this.transactions = this.loadTransactions();\n    \n    // Start the workflow if enabled\n    if (this.isAnyWorkflowEnabled()) {\n      this.startWorkflow();\n    }\n  }\n\n  private loadConfig(): WorkflowConfig {\n    if (typeof window === 'undefined') {\n      return this.getDefaultConfig();\n    }\n    \n    const saved = localStorage.getItem('automatedWorkflowConfig');\n    return saved ? JSON.parse(saved) : this.getDefaultConfig();\n  }\n\n  private loadStatus(): WorkflowStatus {\n    if (typeof window === 'undefined') {\n      return this.getDefaultStatus();\n    }\n    \n    const saved = localStorage.getItem('automatedWorkflowStatus');\n    return saved ? JSON.parse(saved) : this.getDefaultStatus();\n  }\n\n  private loadTransactions(): Transaction[] {\n    if (typeof window === 'undefined') {\n      return [];\n    }\n    \n    const saved = localStorage.getItem('automatedWorkflowTransactions');\n    return saved ? JSON.parse(saved) : [];\n  }\n\n  private getDefaultConfig(): WorkflowConfig {\n    return {\n      autoDeposit: {\n        enabled: false,\n        amount: 100,\n        frequency: 'weekly',\n        source: 'bank'\n      },\n      autoInvest: {\n        enabled: false,\n        strategy: 'moderate',\n        allocation: {\n          stocks: 40,\n          crypto: 30,\n          forex: 20,\n          commodities: 10\n        },\n        minBalance: 50\n      },\n      autoWithdraw: {\n        enabled: false,\n        profitThreshold: 500,\n        withdrawPercentage: 50,\n        destination: 'bank'\n      }\n    };\n  }\n\n  private getDefaultStatus(): WorkflowStatus {\n    return {\n      isRunning: false,\n      lastExecution: null,\n      nextExecution: null,\n      totalDeposited: 0,\n      totalInvested: 0,\n      totalWithdrawn: 0,\n      currentBalance: 1250.75, // Mock current balance\n      totalProfit: 250.75 // Mock profit\n    };\n  }\n\n  private saveConfig(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('automatedWorkflowConfig', JSON.stringify(this.config));\n    }\n  }\n\n  private saveStatus(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('automatedWorkflowStatus', JSON.stringify(this.status));\n    }\n  }\n\n  private saveTransactions(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('automatedWorkflowTransactions', JSON.stringify(this.transactions));\n    }\n  }\n\n  private isAnyWorkflowEnabled(): boolean {\n    return this.config.autoDeposit.enabled || \n           this.config.autoInvest.enabled || \n           this.config.autoWithdraw.enabled;\n  }\n\n  public updateConfig(newConfig: Partial<WorkflowConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.saveConfig();\n    \n    // Restart workflow with new config\n    this.stopWorkflow();\n    if (this.isAnyWorkflowEnabled()) {\n      this.startWorkflow();\n    }\n    \n    toast.success('Automated workflow configuration updated');\n  }\n\n  public getConfig(): WorkflowConfig {\n    return { ...this.config };\n  }\n\n  public getStatus(): WorkflowStatus {\n    return { ...this.status };\n  }\n\n  public getTransactions(): Transaction[] {\n    return [...this.transactions];\n  }\n\n  public startWorkflow(): void {\n    if (this.intervalId) {\n      this.stopWorkflow();\n    }\n\n    this.status.isRunning = true;\n    this.status.nextExecution = this.calculateNextExecution();\n    this.saveStatus();\n\n    // Run workflow every minute (in production, this would be less frequent)\n    this.intervalId = setInterval(() => {\n      this.executeWorkflow();\n    }, 60000); // 1 minute\n\n    toast.success('Automated workflow started');\n  }\n\n  public stopWorkflow(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n\n    this.status.isRunning = false;\n    this.status.nextExecution = null;\n    this.saveStatus();\n\n    toast.success('Automated workflow stopped');\n  }\n\n  private calculateNextExecution(): Date {\n    const now = new Date();\n    const next = new Date(now);\n    \n    // For demo purposes, set next execution to 1 minute from now\n    next.setMinutes(next.getMinutes() + 1);\n    \n    return next;\n  }\n\n  private async executeWorkflow(): Promise<void> {\n    try {\n      this.status.lastExecution = new Date();\n      \n      // Execute auto deposit\n      if (this.config.autoDeposit.enabled) {\n        await this.executeAutoDeposit();\n      }\n\n      // Execute auto invest\n      if (this.config.autoInvest.enabled && this.status.currentBalance >= this.config.autoInvest.minBalance) {\n        await this.executeAutoInvest();\n      }\n\n      // Execute auto withdraw\n      if (this.config.autoWithdraw.enabled && this.status.totalProfit >= this.config.autoWithdraw.profitThreshold) {\n        await this.executeAutoWithdraw();\n      }\n\n      this.status.nextExecution = this.calculateNextExecution();\n      this.saveStatus();\n      \n    } catch (error) {\n      console.error('Workflow execution failed:', error);\n      toast.error('Automated workflow execution failed');\n    }\n  }\n\n  private async executeAutoDeposit(): Promise<void> {\n    const transaction: Transaction = {\n      id: `dep_${Date.now()}`,\n      type: 'deposit',\n      amount: this.config.autoDeposit.amount,\n      status: 'pending',\n      timestamp: new Date(),\n      description: `Auto deposit from ${this.config.autoDeposit.source}`\n    };\n\n    this.transactions.unshift(transaction);\n    this.saveTransactions();\n\n    // Simulate deposit processing\n    setTimeout(() => {\n      transaction.status = 'completed';\n      this.status.totalDeposited += transaction.amount;\n      this.status.currentBalance += transaction.amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Auto deposit of $${transaction.amount} completed`);\n    }, 2000);\n  }\n\n  private async executeAutoInvest(): Promise<void> {\n    const investAmount = Math.min(\n      this.status.currentBalance - this.config.autoInvest.minBalance,\n      this.status.currentBalance * 0.8 // Invest max 80% of available balance\n    );\n\n    if (investAmount <= 0) return;\n\n    const transaction: Transaction = {\n      id: `inv_${Date.now()}`,\n      type: 'invest',\n      amount: investAmount,\n      status: 'pending',\n      timestamp: new Date(),\n      description: `Auto investment using ${this.config.autoInvest.strategy} strategy`\n    };\n\n    this.transactions.unshift(transaction);\n    this.saveTransactions();\n\n    // Simulate investment processing\n    setTimeout(() => {\n      transaction.status = 'completed';\n      this.status.totalInvested += transaction.amount;\n      this.status.currentBalance -= transaction.amount;\n      \n      // Simulate profit generation (random between 1-5%)\n      const profitRate = (Math.random() * 4 + 1) / 100;\n      const profit = transaction.amount * profitRate;\n      this.status.totalProfit += profit;\n      this.status.currentBalance += profit;\n      \n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Auto investment of $${transaction.amount.toFixed(2)} completed`);\n    }, 3000);\n  }\n\n  private async executeAutoWithdraw(): Promise<void> {\n    const withdrawAmount = (this.status.totalProfit * this.config.autoWithdraw.withdrawPercentage) / 100;\n\n    if (withdrawAmount <= 0) return;\n\n    const transaction: Transaction = {\n      id: `wit_${Date.now()}`,\n      type: 'withdraw',\n      amount: withdrawAmount,\n      status: 'pending',\n      timestamp: new Date(),\n      description: `Auto withdrawal to ${this.config.autoWithdraw.destination}`\n    };\n\n    this.transactions.unshift(transaction);\n    this.saveTransactions();\n\n    // Simulate withdrawal processing\n    setTimeout(() => {\n      transaction.status = 'completed';\n      this.status.totalWithdrawn += transaction.amount;\n      this.status.currentBalance -= transaction.amount;\n      this.status.totalProfit -= transaction.amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Auto withdrawal of $${transaction.amount.toFixed(2)} completed`);\n    }, 4000);\n  }\n\n  public async manualDeposit(amount: number, source: string): Promise<void> {\n    try {\n      const transaction: Transaction = {\n        id: `man_dep_${Date.now()}`,\n        type: 'deposit',\n        amount,\n        status: 'pending',\n        timestamp: new Date(),\n        description: `Manual deposit from ${source}`\n      };\n\n      this.transactions.unshift(transaction);\n      this.saveTransactions();\n\n      // Process deposit with balance tracking\n      await balanceTrackingService.processDeposit(amount);\n      \n      transaction.status = 'completed';\n      this.status.totalDeposited += amount;\n      this.status.currentBalance += amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Deposit of $${amount} completed`);\n    } catch (error) {\n      toast.error('Deposit failed. Please try again.');\n      throw error;\n    }\n  }\n\n  public async manualWithdraw(amount: number, destination: string): Promise<void> {\n    try {\n      if (amount > this.status.currentBalance) {\n        toast.error('Insufficient balance for withdrawal');\n        throw new Error('Insufficient balance');\n      }\n\n      const transaction: Transaction = {\n        id: `man_wit_${Date.now()}`,\n        type: 'withdraw',\n        amount,\n        status: 'pending',\n        timestamp: new Date(),\n        description: `Manual withdrawal to ${destination}`\n      };\n\n      this.transactions.unshift(transaction);\n      this.saveTransactions();\n\n      // Process withdrawal with balance tracking\n      await balanceTrackingService.processWithdrawal(amount);\n      \n      transaction.status = 'completed';\n      this.status.totalWithdrawn += amount;\n      this.status.currentBalance -= amount;\n      this.saveStatus();\n      this.saveTransactions();\n      \n      toast.success(`Withdrawal of $${amount} completed`);\n    } catch (error) {\n      toast.error('Withdrawal failed. Please try again.');\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const automatedWorkflowService = new AutomatedWorkflowService();\nexport default automatedWorkflowService;"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAHA;;;;AAoDA,MAAM;IAkBI,aAA6B;QACnC;;QAIA,MAAM,QAAQ,aAAa,OAAO,CAAC;QACnC,OAAO,QAAQ,KAAK,KAAK,CAAC,SAAS,IAAI,CAAC,gBAAgB;IAC1D;IAEQ,aAA6B;QACnC;;QAIA,MAAM,QAAQ,aAAa,OAAO,CAAC;QACnC,OAAO,QAAQ,KAAK,KAAK,CAAC,SAAS,IAAI,CAAC,gBAAgB;IAC1D;IAEQ,mBAAkC;QACxC;;QAIA,MAAM,QAAQ,aAAa,OAAO,CAAC;QACnC,OAAO,QAAQ,KAAK,KAAK,CAAC,SAAS,EAAE;IACvC;IAEQ,mBAAmC;QACzC,OAAO;YACL,aAAa;gBACX,SAAS;gBACT,QAAQ;gBACR,WAAW;gBACX,QAAQ;YACV;YACA,YAAY;gBACV,SAAS;gBACT,UAAU;gBACV,YAAY;oBACV,QAAQ;oBACR,QAAQ;oBACR,OAAO;oBACP,aAAa;gBACf;gBACA,YAAY;YACd;YACA,cAAc;gBACZ,SAAS;gBACT,iBAAiB;gBACjB,oBAAoB;gBACpB,aAAa;YACf;QACF;IACF;IAEQ,mBAAmC;QACzC,OAAO;YACL,WAAW;YACX,eAAe;YACf,eAAe;YACf,gBAAgB;YAChB,eAAe;YACf,gBAAgB;YAChB,gBAAgB;YAChB,aAAa,OAAO,cAAc;QACpC;IACF;IAEQ,aAAmB;QACzB,wCAAmC;YACjC,aAAa,OAAO,CAAC,2BAA2B,KAAK,SAAS,CAAC,IAAI,CAAC,MAAM;QAC5E;IACF;IAEQ,aAAmB;QACzB,wCAAmC;YACjC,aAAa,OAAO,CAAC,2BAA2B,KAAK,SAAS,CAAC,IAAI,CAAC,MAAM;QAC5E;IACF;IAEQ,mBAAyB;QAC/B,wCAAmC;YACjC,aAAa,OAAO,CAAC,iCAAiC,KAAK,SAAS,CAAC,IAAI,CAAC,YAAY;QACxF;IACF;IAEQ,uBAAgC;QACtC,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,IAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAC9B,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO;IACzC;IAEO,aAAa,SAAkC,EAAQ;QAC5D,IAAI,CAAC,MAAM,GAAG;YAAE,GAAG,IAAI,CAAC,MAAM;YAAE,GAAG,SAAS;QAAC;QAC7C,IAAI,CAAC,UAAU;QAEf,mCAAmC;QACnC,IAAI,CAAC,YAAY;QACjB,IAAI,IAAI,CAAC,oBAAoB,IAAI;YAC/B,IAAI,CAAC,aAAa;QACpB;QAEA,mKAAK,CAAC,OAAO,CAAC;IAChB;IAEO,YAA4B;QACjC,OAAO;YAAE,GAAG,IAAI,CAAC,MAAM;QAAC;IAC1B;IAEO,YAA4B;QACjC,OAAO;YAAE,GAAG,IAAI,CAAC,MAAM;QAAC;IAC1B;IAEO,kBAAiC;QACtC,OAAO;eAAI,IAAI,CAAC,YAAY;SAAC;IAC/B;IAEO,gBAAsB;QAC3B,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,YAAY;QACnB;QAEA,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG;QACxB,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,sBAAsB;QACvD,IAAI,CAAC,UAAU;QAEf,yEAAyE;QACzE,IAAI,CAAC,UAAU,GAAG,YAAY;YAC5B,IAAI,CAAC,eAAe;QACtB,GAAG,QAAQ,WAAW;QAEtB,mKAAK,CAAC,OAAO,CAAC;IAChB;IAEO,eAAqB;QAC1B,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,cAAc,IAAI,CAAC,UAAU;YAC7B,IAAI,CAAC,UAAU,GAAG;QACpB;QAEA,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG;QACxB,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG;QAC5B,IAAI,CAAC,UAAU;QAEf,mKAAK,CAAC,OAAO,CAAC;IAChB;IAEQ,yBAA+B;QACrC,MAAM,MAAM,IAAI;QAChB,MAAM,OAAO,IAAI,KAAK;QAEtB,6DAA6D;QAC7D,KAAK,UAAU,CAAC,KAAK,UAAU,KAAK;QAEpC,OAAO;IACT;IAEA,MAAc,kBAAiC;QAC7C,IAAI;YACF,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI;YAEhC,uBAAuB;YACvB,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE;gBACnC,MAAM,IAAI,CAAC,kBAAkB;YAC/B;YAEA,sBAAsB;YACtB,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE;gBACrG,MAAM,IAAI,CAAC,iBAAiB;YAC9B;YAEA,wBAAwB;YACxB,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,eAAe,EAAE;gBAC3G,MAAM,IAAI,CAAC,mBAAmB;YAChC;YAEA,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,sBAAsB;YACvD,IAAI,CAAC,UAAU;QAEjB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,mKAAK,CAAC,KAAK,CAAC;QACd;IACF;IAEA,MAAc,qBAAoC;QAChD,MAAM,cAA2B;YAC/B,IAAI,AAAC,OAAiB,OAAX,KAAK,GAAG;YACnB,MAAM;YACN,QAAQ,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM;YACtC,QAAQ;YACR,WAAW,IAAI;YACf,aAAa,AAAC,qBAAmD,OAA/B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM;QAClE;QAEA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QAC1B,IAAI,CAAC,gBAAgB;QAErB,8BAA8B;QAC9B,WAAW;YACT,YAAY,MAAM,GAAG;YACrB,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,YAAY,MAAM;YAChD,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,YAAY,MAAM;YAChD,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,gBAAgB;YAErB,mKAAK,CAAC,OAAO,CAAC,AAAC,oBAAsC,OAAnB,YAAY,MAAM,EAAC;QACvD,GAAG;IACL;IAEA,MAAc,oBAAmC;QAC/C,MAAM,eAAe,KAAK,GAAG,CAC3B,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,EAC9D,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,sCAAsC;;QAGzE,IAAI,gBAAgB,GAAG;QAEvB,MAAM,cAA2B;YAC/B,IAAI,AAAC,OAAiB,OAAX,KAAK,GAAG;YACnB,MAAM;YACN,QAAQ;YACR,QAAQ;YACR,WAAW,IAAI;YACf,aAAa,AAAC,yBAAwD,OAAhC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAC;QACxE;QAEA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QAC1B,IAAI,CAAC,gBAAgB;QAErB,iCAAiC;QACjC,WAAW;YACT,YAAY,MAAM,GAAG;YACrB,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI,YAAY,MAAM;YAC/C,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,YAAY,MAAM;YAEhD,mDAAmD;YACnD,MAAM,aAAa,CAAC,KAAK,MAAM,KAAK,IAAI,CAAC,IAAI;YAC7C,MAAM,SAAS,YAAY,MAAM,GAAG;YACpC,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI;YAC3B,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI;YAE9B,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,gBAAgB;YAErB,mKAAK,CAAC,OAAO,CAAC,AAAC,uBAAoD,OAA9B,YAAY,MAAM,CAAC,OAAO,CAAC,IAAG;QACrE,GAAG;IACL;IAEA,MAAc,sBAAqC;QACjD,MAAM,iBAAiB,AAAC,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,kBAAkB,GAAI;QAEjG,IAAI,kBAAkB,GAAG;QAEzB,MAAM,cAA2B;YAC/B,IAAI,AAAC,OAAiB,OAAX,KAAK,GAAG;YACnB,MAAM;YACN,QAAQ;YACR,QAAQ;YACR,WAAW,IAAI;YACf,aAAa,AAAC,sBAA0D,OAArC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW;QACzE;QAEA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QAC1B,IAAI,CAAC,gBAAgB;QAErB,iCAAiC;QACjC,WAAW;YACT,YAAY,MAAM,GAAG;YACrB,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,YAAY,MAAM;YAChD,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,YAAY,MAAM;YAChD,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,YAAY,MAAM;YAC7C,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,gBAAgB;YAErB,mKAAK,CAAC,OAAO,CAAC,AAAC,uBAAoD,OAA9B,YAAY,MAAM,CAAC,OAAO,CAAC,IAAG;QACrE,GAAG;IACL;IAEA,MAAa,cAAc,MAAc,EAAE,MAAc,EAAiB;QACxE,IAAI;YACF,MAAM,cAA2B;gBAC/B,IAAI,AAAC,WAAqB,OAAX,KAAK,GAAG;gBACvB,MAAM;gBACN;gBACA,QAAQ;gBACR,WAAW,IAAI;gBACf,aAAa,AAAC,uBAA6B,OAAP;YACtC;YAEA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,gBAAgB;YAErB,wCAAwC;YACxC,MAAM,uJAAsB,CAAC,cAAc,CAAC;YAE5C,YAAY,MAAM,GAAG;YACrB,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI;YAC9B,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI;YAC9B,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,gBAAgB;YAErB,mKAAK,CAAC,OAAO,CAAC,AAAC,eAAqB,OAAP,QAAO;QACtC,EAAE,OAAO,OAAO;YACd,mKAAK,CAAC,KAAK,CAAC;YACZ,MAAM;QACR;IACF;IAEA,MAAa,eAAe,MAAc,EAAE,WAAmB,EAAiB;QAC9E,IAAI;YACF,IAAI,SAAS,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;gBACvC,mKAAK,CAAC,KAAK,CAAC;gBACZ,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,cAA2B;gBAC/B,IAAI,AAAC,WAAqB,OAAX,KAAK,GAAG;gBACvB,MAAM;gBACN;gBACA,QAAQ;gBACR,WAAW,IAAI;gBACf,aAAa,AAAC,wBAAmC,OAAZ;YACvC;YAEA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,gBAAgB;YAErB,2CAA2C;YAC3C,MAAM,uJAAsB,CAAC,iBAAiB,CAAC;YAE/C,YAAY,MAAM,GAAG;YACrB,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI;YAC9B,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI;YAC9B,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,gBAAgB;YAErB,mKAAK,CAAC,OAAO,CAAC,AAAC,kBAAwB,OAAP,QAAO;QACzC,EAAE,OAAO,OAAO;YACd,mKAAK,CAAC,KAAK,CAAC;YACZ,MAAM;QACR;IACF;IAlWA,aAAc;QALd,+KAAQ,UAAR,KAAA;QACA,+KAAQ,UAAR,KAAA;QACA,+KAAQ,gBAAR,KAAA;QACA,+KAAQ,cAAoC;QAG1C,uDAAuD;QACvD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU;QAC7B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,gBAAgB;QAEzC,gCAAgC;QAChC,IAAI,IAAI,CAAC,oBAAoB,IAAI;YAC/B,IAAI,CAAC,aAAa;QACpB;IACF;AAyVF;AAGO,MAAM,2BAA2B,IAAI;uCAC7B","debugId":null}},
    {"offset": {"line": 1172, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/components/trading/ProfitTargetSettings.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Target, TrendingUp, TrendingDown, DollarSign, Calendar, Settings, AlertTriangle, CheckCircle, Edit3, RotateCcw, Plus, Minus, Activity, Copy, Users, Shield, Play, Pause, Bot, Percent, Clock, BarChart3, RefreshCw, Zap, Search, ArrowDownLeft } from 'lucide-react';\nimport ProfitFactorTrackingSystem from '../../src/services/profitFactorTrackingSystem';\nimport automatedWorkflowService from '../../src/services/AutomatedWorkflowService';\n\ninterface ProfitTarget {\n  id: string;\n  date: string;\n  targetAmount: number;\n  currentProfit: number;\n  isActive: boolean;\n  strategy?: string;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH';\n  stopLoss?: number;\n}\n\nenum TraderCategory {\n  FRIENDS = 'friends',\n  POLITICIANS = 'politicians',\n  HEDGE_FUNDS = 'hedge_funds',\n  CELEBRITIES = 'celebrities',\n  INFLUENCERS = 'influencers',\n  PROFESSIONALS = 'professionals'\n}\n\ninterface TraderCategoryInfo {\n  id: TraderCategory;\n  label: string;\n  icon: string;\n  description: string;\n  color: string;\n}\n\ninterface CopyTrader {\n  id: string;\n  name: string;\n  avatar: string;\n  performance: {\n    totalReturn: number;\n    winRate: number;\n    monthlyReturn: number;\n    maxDrawdown: number;\n  };\n  followers: number;\n  riskLevel: 'low' | 'medium' | 'high';\n  minCopyAmount: number;\n  status: 'active' | 'paused';\n  category: TraderCategory;\n  title?: string;\n  verified: boolean;\n  totalTrades: number;\n  avgReturn: number;\n}\n\ninterface AutoTradingConfig {\n  enabled: boolean;\n  dailyGainLimit: number;\n  riskLevel: 'conservative' | 'moderate' | 'aggressive';\n  stopOnTarget: boolean;\n  maxTradesPerDay: number;\n  allowedSymbols: string[];\n  stopLossPercentage: number;\n  takeProfitPercentage: number;\n}\n\ninterface ProfitTargetSettingsProps {\n  onTargetUpdate?: (target: ProfitTarget) => void;\n  onTargetAchieved?: (target: ProfitTarget) => void;\n}\n\n// Trader categories configuration\nconst traderCategories: TraderCategoryInfo[] = [\n  {\n    id: TraderCategory.FRIENDS,\n    label: 'Friends',\n    icon: '👥',\n    description: 'Trade with your trusted friends',\n    color: 'bg-blue-500'\n  },\n  {\n    id: TraderCategory.POLITICIANS,\n    label: 'Politicians',\n    icon: '🏛️',\n    description: 'Follow political figures trading',\n    color: 'bg-purple-500'\n  },\n  {\n    id: TraderCategory.HEDGE_FUNDS,\n    label: 'Hedge Funds',\n    icon: '🏦',\n    description: 'Professional fund managers',\n    color: 'bg-green-500'\n  },\n  {\n    id: TraderCategory.CELEBRITIES,\n    label: 'Celebrities',\n    icon: '⭐',\n    description: 'Celebrity traders and influencers',\n    color: 'bg-yellow-500'\n  },\n  {\n    id: TraderCategory.INFLUENCERS,\n    label: 'Influencers',\n    icon: '📱',\n    description: 'Social media trading influencers',\n    color: 'bg-pink-500'\n  },\n  {\n    id: TraderCategory.PROFESSIONALS,\n    label: 'Professionals',\n    icon: '💼',\n    description: 'Certified trading professionals',\n    color: 'bg-indigo-500'\n  }\n];\n\n// Mock data for available copy traders\nconst availableCopyTraders: CopyTrader[] = [\n  // Friends\n  {\n    id: '1',\n    name: 'Alex Chen',\n    avatar: 'AC',\n    performance: {\n      totalReturn: 156.8,\n      winRate: 78.5,\n      monthlyReturn: 18.2,\n      maxDrawdown: -12.3\n    },\n    followers: 1250,\n    riskLevel: 'medium',\n    minCopyAmount: 100,\n    status: 'active',\n    category: TraderCategory.FRIENDS,\n    verified: true,\n    totalTrades: 245,\n    avgReturn: 12.3\n  },\n  {\n    id: '2',\n    name: 'Sarah Williams',\n    avatar: 'SW',\n    performance: {\n      totalReturn: 89.4,\n      winRate: 82.1,\n      monthlyReturn: 12.5,\n      maxDrawdown: -8.7\n    },\n    followers: 890,\n    riskLevel: 'low',\n    minCopyAmount: 250,\n    status: 'active',\n    category: TraderCategory.FRIENDS,\n    verified: true,\n    totalTrades: 156,\n    avgReturn: 8.9\n  },\n  {\n    id: '11',\n    name: 'Michael Rodriguez',\n    avatar: 'MR',\n    performance: {\n      totalReturn: 203.5,\n      winRate: 74.2,\n      monthlyReturn: 16.8,\n      maxDrawdown: -14.1\n    },\n    followers: 2100,\n    riskLevel: 'high',\n    minCopyAmount: 500,\n    status: 'active',\n    category: TraderCategory.FRIENDS,\n    title: 'Day Trading Specialist',\n    verified: true,\n    totalTrades: 412,\n    avgReturn: 16.8\n  },\n  {\n    id: '12',\n    name: 'Emma Thompson',\n    avatar: 'ET',\n    performance: {\n      totalReturn: 127.3,\n      winRate: 79.6,\n      monthlyReturn: 10.2,\n      maxDrawdown: -7.8\n    },\n    followers: 1680,\n    riskLevel: 'low',\n    minCopyAmount: 200,\n    status: 'active',\n    category: TraderCategory.FRIENDS,\n    title: 'Conservative Growth Expert',\n    verified: true,\n    totalTrades: 298,\n    avgReturn: 10.2\n  },\n  // Politicians\n  {\n    id: '3',\n    name: 'Nancy Pelosi',\n    avatar: 'NP',\n    performance: {\n      totalReturn: 234.7,\n      winRate: 65.3,\n      monthlyReturn: 25.8,\n      maxDrawdown: -18.9\n    },\n    followers: 25000,\n    riskLevel: 'high',\n    minCopyAmount: 1000,\n    status: 'active',\n    category: TraderCategory.POLITICIANS,\n    title: 'Former Speaker of the House',\n    verified: true,\n    totalTrades: 89,\n    avgReturn: 24.7\n  },\n  {\n    id: '4',\n    name: 'Richard Burr',\n    avatar: 'RB',\n    performance: {\n      totalReturn: 119.4,\n      winRate: 71.2,\n      monthlyReturn: 15.8,\n      maxDrawdown: -11.3\n    },\n    followers: 8500,\n    riskLevel: 'medium',\n    minCopyAmount: 500,\n    status: 'active',\n    category: TraderCategory.POLITICIANS,\n    title: 'Former Senator',\n    verified: true,\n    totalTrades: 67,\n    avgReturn: 15.8\n  },\n  {\n    id: '13',\n    name: 'Alexandria Ocasio-Cortez',\n    avatar: 'AOC',\n    performance: {\n      totalReturn: 178.9,\n      winRate: 68.4,\n      monthlyReturn: 14.9,\n      maxDrawdown: -16.2\n    },\n    followers: 18500,\n    riskLevel: 'medium',\n    minCopyAmount: 750,\n    status: 'active',\n    category: TraderCategory.POLITICIANS,\n    title: 'Representative',\n    verified: true,\n    totalTrades: 124,\n    avgReturn: 14.9\n  },\n  {\n    id: '14',\n    name: 'Mitt Romney',\n    avatar: 'MR2',\n    performance: {\n      totalReturn: 145.6,\n      winRate: 72.8,\n      monthlyReturn: 12.1,\n      maxDrawdown: -9.7\n    },\n    followers: 12000,\n    riskLevel: 'low',\n    minCopyAmount: 1000,\n    status: 'active',\n    category: TraderCategory.POLITICIANS,\n    title: 'Senator',\n    verified: true,\n    totalTrades: 156,\n    avgReturn: 12.1\n  },\n  // Hedge Funds\n  {\n    id: '5',\n    name: 'Bridgewater Associates',\n    avatar: 'BA',\n    performance: {\n      totalReturn: 115.7,\n      winRate: 68.8,\n      monthlyReturn: 11.2,\n      maxDrawdown: -9.4\n    },\n    followers: 45000,\n    riskLevel: 'low',\n    minCopyAmount: 5000,\n    status: 'active',\n    category: TraderCategory.HEDGE_FUNDS,\n    title: 'World\\'s Largest Hedge Fund',\n    verified: true,\n    totalTrades: 1250,\n    avgReturn: 11.2\n  },\n  {\n    id: '6',\n    name: 'Renaissance Technologies',\n    avatar: 'RT',\n    performance: {\n      totalReturn: 328.9,\n      winRate: 73.4,\n      monthlyReturn: 22.1,\n      maxDrawdown: -15.7\n    },\n    followers: 38000,\n    riskLevel: 'high',\n    minCopyAmount: 10000,\n    status: 'active',\n    category: TraderCategory.HEDGE_FUNDS,\n    title: 'Quantitative Trading Pioneer',\n    verified: true,\n    totalTrades: 2100,\n    avgReturn: 22.1\n  },\n  {\n    id: '15',\n    name: 'Citadel Securities',\n    avatar: 'CS',\n    performance: {\n      totalReturn: 198.4,\n      winRate: 71.9,\n      monthlyReturn: 16.5,\n      maxDrawdown: -12.8\n    },\n    followers: 32000,\n    riskLevel: 'medium',\n    minCopyAmount: 7500,\n    status: 'active',\n    category: TraderCategory.HEDGE_FUNDS,\n    title: 'Market Making Giant',\n    verified: true,\n    totalTrades: 1890,\n    avgReturn: 16.5\n  },\n  {\n    id: '16',\n    name: 'Two Sigma',\n    avatar: 'TS',\n    performance: {\n      totalReturn: 267.3,\n      winRate: 69.7,\n      monthlyReturn: 19.8,\n      maxDrawdown: -14.3\n    },\n    followers: 28000,\n    riskLevel: 'high',\n    minCopyAmount: 8000,\n    status: 'active',\n    category: TraderCategory.HEDGE_FUNDS,\n    title: 'AI-Driven Trading',\n    verified: true,\n    totalTrades: 1567,\n    avgReturn: 19.8\n  },\n  // Celebrities\n  {\n    id: '7',\n    name: 'Elon Musk',\n    avatar: 'EM',\n    performance: {\n      totalReturn: 442.3,\n      winRate: 69.2,\n      monthlyReturn: 35.7,\n      maxDrawdown: -28.4\n    },\n    followers: 150000,\n    riskLevel: 'high',\n    minCopyAmount: 1000,\n    status: 'active',\n    category: TraderCategory.CELEBRITIES,\n    title: 'CEO of Tesla & SpaceX',\n    verified: true,\n    totalTrades: 78,\n    avgReturn: 35.7\n  },\n  {\n    id: '8',\n    name: 'Mark Cuban',\n    avatar: 'MC',\n    performance: {\n      totalReturn: 221.6,\n      winRate: 64.9,\n      monthlyReturn: 18.3,\n      maxDrawdown: -14.2\n    },\n    followers: 75000,\n    riskLevel: 'medium',\n    minCopyAmount: 2500,\n    status: 'active',\n    category: TraderCategory.CELEBRITIES,\n    title: 'Entrepreneur & Investor',\n    verified: true,\n    totalTrades: 134,\n    avgReturn: 18.3\n  },\n  {\n    id: '17',\n    name: 'Kevin O\\'Leary',\n    avatar: 'KO',\n    performance: {\n      totalReturn: 189.7,\n      winRate: 66.8,\n      monthlyReturn: 15.8,\n      maxDrawdown: -13.5\n    },\n    followers: 85000,\n    riskLevel: 'medium',\n    minCopyAmount: 1500,\n    status: 'active',\n    category: TraderCategory.CELEBRITIES,\n    title: 'Shark Tank Investor',\n    verified: true,\n    totalTrades: 203,\n    avgReturn: 15.8\n  },\n  {\n    id: '18',\n    name: 'Robert Kiyosaki',\n    avatar: 'RK',\n    performance: {\n      totalReturn: 156.2,\n      winRate: 63.4,\n      monthlyReturn: 13.0,\n      maxDrawdown: -11.8\n    },\n    followers: 92000,\n    riskLevel: 'low',\n    minCopyAmount: 1000,\n    status: 'active',\n    category: TraderCategory.CELEBRITIES,\n    title: 'Rich Dad Poor Dad Author',\n    verified: true,\n    totalTrades: 167,\n    avgReturn: 13.0\n  },\n  // Influencers\n  {\n    id: '9',\n    name: 'Graham Stephan',\n    avatar: 'GS',\n    performance: {\n      totalReturn: 116.8,\n      winRate: 71.6,\n      monthlyReturn: 13.4,\n      maxDrawdown: -8.9\n    },\n    followers: 95000,\n    riskLevel: 'low',\n    minCopyAmount: 100,\n    status: 'active',\n    category: TraderCategory.INFLUENCERS,\n    title: 'YouTube Finance Creator',\n    verified: true,\n    totalTrades: 289,\n    avgReturn: 13.4\n  },\n  {\n    id: '19',\n    name: 'Andrei Jikh',\n    avatar: 'AJ',\n    performance: {\n      totalReturn: 143.7,\n      winRate: 75.3,\n      monthlyReturn: 11.9,\n      maxDrawdown: -9.2\n    },\n    followers: 78000,\n    riskLevel: 'low',\n    minCopyAmount: 150,\n    status: 'active',\n    category: TraderCategory.INFLUENCERS,\n    title: 'Personal Finance YouTuber',\n    verified: true,\n    totalTrades: 234,\n    avgReturn: 11.9\n  },\n  {\n    id: '20',\n    name: 'Meet Kevin',\n    avatar: 'MK',\n    performance: {\n      totalReturn: 198.5,\n      winRate: 68.9,\n      monthlyReturn: 16.5,\n      maxDrawdown: -15.4\n    },\n    followers: 112000,\n    riskLevel: 'medium',\n    minCopyAmount: 300,\n    status: 'active',\n    category: TraderCategory.INFLUENCERS,\n    title: 'Real Estate & Stock Investor',\n    verified: true,\n    totalTrades: 345,\n    avgReturn: 16.5\n  },\n  // Professionals\n  {\n    id: '10',\n    name: 'Cathie Wood',\n    avatar: 'CW',\n    performance: {\n      totalReturn: 225.4,\n      winRate: 66.7,\n      monthlyReturn: 19.8,\n      maxDrawdown: -16.3\n    },\n    followers: 120000,\n    riskLevel: 'high',\n    minCopyAmount: 2000,\n    status: 'active',\n    category: TraderCategory.PROFESSIONALS,\n    title: 'ARK Invest CEO',\n    verified: true,\n    totalTrades: 456,\n    avgReturn: 19.8\n  },\n  {\n    id: '21',\n    name: 'Ray Dalio',\n    avatar: 'RD',\n    performance: {\n      totalReturn: 187.9,\n      winRate: 70.4,\n      monthlyReturn: 15.7,\n      maxDrawdown: -11.6\n    },\n    followers: 98000,\n    riskLevel: 'medium',\n    minCopyAmount: 3000,\n    status: 'active',\n    category: TraderCategory.PROFESSIONALS,\n    title: 'Bridgewater Founder',\n    verified: true,\n    totalTrades: 567,\n    avgReturn: 15.7\n  },\n  {\n    id: '22',\n    name: 'Warren Buffett',\n    avatar: 'WB',\n    performance: {\n      totalReturn: 134.6,\n      winRate: 81.2,\n      monthlyReturn: 11.2,\n      maxDrawdown: -6.8\n    },\n    followers: 250000,\n    riskLevel: 'low',\n    minCopyAmount: 5000,\n    status: 'active',\n    category: TraderCategory.PROFESSIONALS,\n    title: 'Berkshire Hathaway CEO',\n    verified: true,\n    totalTrades: 89,\n    avgReturn: 11.2\n  }\n];\n\nconst ProfitTargetSettings: React.FC<ProfitTargetSettingsProps> = ({\n  onTargetUpdate,\n  onTargetAchieved\n}) => {\n  const [dailyTarget, setDailyTarget] = useState<number>(1000);\n  const [currentProfit, setCurrentProfit] = useState<number>(0);\n  const [targets, setTargets] = useState<ProfitTarget[]>([]);\n  const [showSettings, setShowSettings] = useState(false);\n  const [autoStopEnabled, setAutoStopEnabled] = useState(true);\n  const [maxDailyLoss, setMaxDailyLoss] = useState<number>(500);\n  const [currentLoss, setCurrentLoss] = useState<number>(0);\n  const [notifications, setNotifications] = useState(true);\n  const [riskLevel, setRiskLevel] = useState<'LOW' | 'MEDIUM' | 'HIGH'>('MEDIUM');\n  \n  // New states for manual/automatic functionality\n  const [isManualMode, setIsManualMode] = useState<boolean>(false);\n  const [manualProfitInput, setManualProfitInput] = useState<string>('');\n  const [adjustmentAmount, setAdjustmentAmount] = useState<number>(50);\n  const [profitHistory, setProfitHistory] = useState<Array<{timestamp: Date, amount: number, type: 'manual' | 'automatic', action: string}>>([]);\n  const [autoCalculationEnabled, setAutoCalculationEnabled] = useState<boolean>(true);\n  const [lastAutoUpdate, setLastAutoUpdate] = useState<Date | null>(null);\n  const [profitTracker] = useState(() => new ProfitFactorTrackingSystem());\n  const [realTimeMetrics, setRealTimeMetrics] = useState<any>(null);\n  \n  // Copy Trading & Auto Trading States\n  const [copyTradingEnabled, setCopyTradingEnabled] = useState(false);\n  const [autoTradingEnabled, setAutoTradingEnabled] = useState(false);\n  const [dailyGainLimit, setDailyGainLimit] = useState(500);\n  const [dailyGainAchieved, setDailyGainAchieved] = useState(0);\n  const [selectedCopyTraders, setSelectedCopyTraders] = useState<string[]>([]);\n  const [autoTradingRiskLevel, setAutoTradingRiskLevel] = useState<'conservative' | 'moderate' | 'aggressive'>('moderate');\n  const [copyTradingAllocation, setCopyTradingAllocation] = useState(1000);\n  const [autoStopOnTarget, setAutoStopOnTarget] = useState(true);\n  const [selectedCategory, setSelectedCategory] = useState<TraderCategory | 'all'>('all');\n  const [filteredTraders, setFilteredTraders] = useState<CopyTrader[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Copy confirmation modal states\n  const [showCopyModal, setShowCopyModal] = useState(false);\n  const [selectedTraderToCopy, setSelectedTraderToCopy] = useState<CopyTrader | null>(null);\n  const [copyAmount, setCopyAmount] = useState<number>(0);\n  const [hoveredTrader, setHoveredTrader] = useState<string | null>(null);\n\n  // Calculate progress percentage\n  const progressPercentage = Math.min((currentProfit / dailyTarget) * 100, 100);\n  const lossPercentage = Math.min((Math.abs(currentLoss) / maxDailyLoss) * 100, 100);\n\n  // Check if target is achieved\n  const isTargetAchieved = currentProfit >= dailyTarget;\n  const isMaxLossReached = Math.abs(currentLoss) >= maxDailyLoss;\n\n  // Create new daily target\n  const createDailyTarget = () => {\n    const today = new Date().toISOString().split('T')[0];\n    const newTarget: ProfitTarget = {\n      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      date: today,\n      targetAmount: dailyTarget,\n      currentProfit: 0,\n      isActive: true,\n      riskLevel,\n      stopLoss: maxDailyLoss\n    };\n    \n    setTargets(prev => {\n      // Deactivate previous targets\n      const updated = prev.map(t => ({ ...t, isActive: false }));\n      return [...updated, newTarget];\n    });\n    \n    onTargetUpdate?.(newTarget);\n  };\n\n  // Update current profit (enhanced with tracking)\n  const updateProfit = (amount: number, type: 'manual' | 'automatic' = 'automatic', action: string = 'update') => {\n    setCurrentProfit(prev => {\n      const newProfit = prev + amount;\n      \n      // Add to history\n      setProfitHistory(prevHistory => [\n        ...prevHistory,\n        {\n          timestamp: new Date(),\n          amount,\n          type,\n          action\n        }\n      ]);\n      \n      // Update active target\n      setTargets(prevTargets => \n        prevTargets.map(target => \n          target.isActive \n            ? { ...target, currentProfit: newProfit }\n            : target\n        )\n      );\n      \n      // Check if target achieved\n      if (newProfit >= dailyTarget && !isTargetAchieved) {\n        const activeTarget = targets.find(t => t.isActive);\n        if (activeTarget) {\n          onTargetAchieved?.(activeTarget);\n        }\n      }\n      \n      return newProfit;\n    });\n  };\n\n  // Update current loss\n  const updateLoss = (amount: number) => {\n    setCurrentLoss(prev => prev + amount);\n  };\n\n  // Manual profit entry\n  const handleManualProfitEntry = () => {\n    const amount = parseFloat(manualProfitInput);\n    if (!isNaN(amount) && amount !== 0) {\n      updateProfit(amount, 'manual', 'manual_entry');\n      setManualProfitInput('');\n    }\n  };\n\n  // Quick profit adjustments\n  const adjustProfit = (amount: number) => {\n    updateProfit(amount, 'manual', amount > 0 ? 'quick_add' : 'quick_subtract');\n  };\n\n  // Set profit to specific amount\n  const setProfitAmount = (amount: number) => {\n    const difference = amount - currentProfit;\n    updateProfit(difference, 'manual', 'set_amount');\n  };\n\n  // Reset daily tracking\n  const resetDaily = () => {\n    setCurrentProfit(0);\n    setCurrentLoss(0);\n    setProfitHistory([]);\n    setDailyGainAchieved(0);\n    createDailyTarget();\n  };\n\n  // Copy Trading Functions\n  const toggleCopyTrader = (traderId: string) => {\n    setSelectedCopyTraders(prev => {\n      if (prev.includes(traderId)) {\n        return prev.filter(id => id !== traderId);\n      } else {\n        return [...prev, traderId];\n      }\n    });\n  };\n\n  const handleCopyTradingToggle = (enabled: boolean) => {\n    setCopyTradingEnabled(enabled);\n    if (!enabled) {\n      setSelectedCopyTraders([]);\n    }\n  };\n\n  // Auto Trading Functions\n  const handleAutoTradingToggle = (enabled: boolean) => {\n    setAutoTradingEnabled(enabled);\n    if (enabled && dailyGainAchieved >= dailyGainLimit && autoStopOnTarget) {\n      setAutoTradingEnabled(false);\n      console.log('Auto trading stopped: Daily gain limit reached');\n    }\n  };\n\n  // One-click copy functionality\n  const handleQuickCopy = (trader: CopyTrader, event: React.MouseEvent) => {\n    event.stopPropagation(); // Prevent card selection\n    setSelectedTraderToCopy(trader);\n    setCopyAmount(trader.minCopyAmount);\n    setShowCopyModal(true);\n  };\n\n  const confirmCopy = () => {\n    if (selectedTraderToCopy) {\n      // Add trader to selected list if not already selected\n      if (!selectedCopyTraders.includes(selectedTraderToCopy.id)) {\n        setSelectedCopyTraders(prev => [...prev, selectedTraderToCopy.id]);\n      }\n      \n      // Enable copy trading if not already enabled\n      if (!copyTradingEnabled) {\n        setCopyTradingEnabled(true);\n      }\n      \n      console.log(`Started copying ${selectedTraderToCopy.name} with $${copyAmount}`);\n      \n      // Close modal and reset\n      setShowCopyModal(false);\n      setSelectedTraderToCopy(null);\n      setCopyAmount(0);\n    }\n  };\n\n  const cancelCopy = () => {\n    setShowCopyModal(false);\n    setSelectedTraderToCopy(null);\n    setCopyAmount(0);\n  };\n\n  const updateDailyGain = (amount: number) => {\n    const newGainAchieved = dailyGainAchieved + amount;\n    setDailyGainAchieved(newGainAchieved);\n    \n    // Auto-stop if daily limit reached\n    if (autoTradingEnabled && newGainAchieved >= dailyGainLimit && autoStopOnTarget) {\n      setAutoTradingEnabled(false);\n      console.log('Auto trading stopped: Daily gain limit reached');\n    }\n  };\n\n  const getRiskLevelColor = (level: 'low' | 'medium' | 'high') => {\n    switch (level) {\n      case 'low': return 'text-green-500';\n      case 'medium': return 'text-yellow-500';\n      case 'high': return 'text-red-500';\n      default: return 'text-gray-500';\n    }\n  };\n\n  const handleCategoryChange = (category: TraderCategory | 'all') => {\n    setSelectedCategory(category);\n  };\n\n  const getCategoryIcon = (category: TraderCategory) => {\n    const categoryInfo = traderCategories.find(cat => cat.id === category);\n    return categoryInfo?.icon || '👤';\n  };\n\n  const getTrendingTraders = () => {\n    return availableCopyTraders\n      .sort((a, b) => b.performance.totalReturn - a.performance.totalReturn)\n      .slice(0, 3);\n  };\n\n  const getCategoryColor = (category: TraderCategory) => {\n    const categoryInfo = traderCategories.find(cat => cat.id === category);\n    return categoryInfo?.color || 'bg-gray-500';\n  };\n\n  // Filter traders based on selected category and search query\n  React.useEffect(() => {\n    let filtered = availableCopyTraders;\n    \n    // Filter by category\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(trader => trader.category === selectedCategory);\n    }\n    \n    // Filter by search query\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(trader => \n        trader.name.toLowerCase().includes(query) ||\n        trader.title?.toLowerCase().includes(query) ||\n        traderCategories.find(cat => cat.id === trader.category)?.label.toLowerCase().includes(query)\n      );\n    }\n    \n    setFilteredTraders(filtered);\n  }, [selectedCategory, searchQuery]);\n\n  // Get status color\n  const getStatusColor = () => {\n    if (isMaxLossReached) return 'text-red-600';\n    if (isTargetAchieved) return 'text-green-600';\n    if (currentProfit > 0) return 'text-blue-600';\n    return 'text-gray-600';\n  };\n\n  // Get progress bar color\n  const getProgressColor = () => {\n    if (progressPercentage >= 100) return 'bg-green-500';\n    if (progressPercentage >= 75) return 'bg-blue-500';\n    if (progressPercentage >= 50) return 'bg-yellow-500';\n    return 'bg-gray-400';\n  };\n\n  // Initialize with today's target\n  useEffect(() => {\n    createDailyTarget();\n  }, []);\n\n  // Auto-calculate profit from trading performance\n  const calculateAutomaticProfit = () => {\n    if (!autoCalculationEnabled || isManualMode) return;\n    \n    try {\n      // Get current user's trading metrics (using 'user1' as example)\n      const metrics = profitTracker.getProfitFactorMetrics('user1');\n      \n      if (metrics && metrics.lastUpdated > (lastAutoUpdate || new Date(0))) {\n        // Calculate daily profit based on net profit and recent performance\n        const dailyProfitEstimate = metrics.grossProfit - metrics.grossLoss;\n        const profitChange = dailyProfitEstimate - currentProfit;\n        \n        if (Math.abs(profitChange) > 0.01) { // Only update if change is significant\n          updateProfit(profitChange, 'automatic', 'performance_sync');\n          setLastAutoUpdate(new Date());\n          setRealTimeMetrics(metrics);\n        }\n      }\n    } catch (error) {\n      console.warn('Auto profit calculation failed:', error);\n    }\n  };\n\n  // Simulate real-time profit updates (for demo) - only in automatic mode\n  useEffect(() => {\n    if (!isManualMode) {\n      const interval = setInterval(() => {\n        if (autoCalculationEnabled) {\n          // Try to get real trading data first\n          calculateAutomaticProfit();\n        } else {\n          // Fallback to simulation\n          const change = (Math.random() - 0.5) * 20; // Random change between -10 and +10\n          if (change > 0) {\n            updateProfit(change, 'automatic', 'auto_update');\n          } else {\n            updateLoss(change);\n          }\n        }\n        \n        // Auto trading simulation\n        if (autoTradingEnabled && dailyGainAchieved < dailyGainLimit) {\n          const autoGain = Math.random() * 20 - 5; // Random between -5 and 15\n          if (autoGain > 0) {\n            updateDailyGain(autoGain);\n            updateProfit(autoGain, 'automatic', 'auto_trading');\n          }\n        }\n        \n        // Copy trading simulation\n        if (copyTradingEnabled && selectedCopyTraders.length > 0) {\n          const copyGain = Math.random() * 15 - 3; // Random between -3 and 12\n          if (copyGain > 0) {\n            updateProfit(copyGain, 'automatic', 'copy_trading');\n            updateDailyGain(copyGain * 0.5); // 50% contributes to daily gain\n          }\n        }\n      }, 5000); // Update every 5 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [dailyTarget, targets, isManualMode, autoCalculationEnabled, lastAutoUpdate, currentProfit, autoTradingEnabled, copyTradingEnabled, selectedCopyTraders, dailyGainAchieved, dailyGainLimit]);\n\n  return (\n    <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-lg p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <Target className=\"h-6 w-6 text-blue-600\" />\n          <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n            Daily Profit Target\n          </h2>\n        </div>\n        <button\n          onClick={() => setShowSettings(!showSettings)}\n          className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n        >\n          <Settings className=\"h-5 w-5\" />\n        </button>\n      </div>\n\n      {/* Mode Toggle and Manual Controls */}\n      <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4 mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Profit Tracking Mode\n          </h3>\n          <div className=\"flex items-center space-x-3\">\n            <span className={`text-sm ${!isManualMode ? 'text-blue-600 font-medium' : 'text-gray-500'}`}>\n              Automatic\n            </span>\n            <button\n              onClick={() => setIsManualMode(!isManualMode)}\n              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                isManualMode ? 'bg-blue-600' : 'bg-gray-300'\n              }`}\n            >\n              <span\n                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  isManualMode ? 'translate-x-6' : 'translate-x-1'\n                }`}\n              />\n            </button>\n            <span className={`text-sm ${isManualMode ? 'text-blue-600 font-medium' : 'text-gray-500'}`}>\n              Manual\n            </span>\n          </div>\n        </div>\n\n        {/* Manual Controls */}\n        {isManualMode && (\n          <div className=\"space-y-4\">\n            {/* Manual Profit Entry */}\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex-1\">\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Add/Subtract Profit Amount ($)\n                </label>\n                <div className=\"flex space-x-2\">\n                  <input\n                    type=\"number\"\n                    value={manualProfitInput}\n                    onChange={(e) => setManualProfitInput(e.target.value)}\n                    placeholder=\"Enter amount (+ or -)...\"\n                    className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n                  />\n                  <button\n                    onClick={handleManualProfitEntry}\n                    disabled={!manualProfitInput || isNaN(parseFloat(manualProfitInput))}\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center space-x-1\"\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                    <span>Apply</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Adjustment Controls */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Set Adjustment Amount\n              </label>\n              <div className=\"mb-3\">\n                <div className=\"relative\">\n                  <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400\">$</span>\n                  <input\n                    type=\"number\"\n                    value={adjustmentAmount}\n                    onChange={(e) => setAdjustmentAmount(Number(e.target.value))}\n                    placeholder=\"Enter amount\"\n                    className=\"w-full pl-8 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    min=\"0\"\n                    step=\"0.01\"\n                  />\n                </div>\n                {/* Preset Amount Buttons */}\n                <div className=\"grid grid-cols-4 gap-2 mb-3\">\n                  {[10, 25, 50, 100].map((amount) => (\n                    <button\n                      key={amount}\n                      onClick={() => setAdjustmentAmount(amount)}\n                      className=\"px-3 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n                    >\n                      ${amount}\n                    </button>\n                  ))}\n              \n              {filteredTraders.length === 0 && (\n                <div className=\"col-span-full text-center py-8\">\n                  <div className=\"text-gray-400 dark:text-gray-500 mb-2\">\n                    <Users className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                    <p className=\"text-lg font-medium\">No traders found</p>\n                    <p className=\"text-sm\">Try selecting a different category to see available traders.</p>\n                  </div>\n                </div>\n              )}\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={() => adjustProfit(-adjustmentAmount)}\n                  className=\"px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 flex items-center space-x-1 text-sm\"\n                >\n                  <Minus className=\"h-3 w-3\" />\n                  <span>-${adjustmentAmount}</span>\n                </button>\n                <button\n                  onClick={() => adjustProfit(adjustmentAmount)}\n                  className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 flex items-center space-x-1 text-sm\"\n                >\n                  <Plus className=\"h-3 w-3\" />\n                  <span>+${adjustmentAmount}</span>\n                </button>\n                <button\n                  onClick={() => setProfitAmount(0)}\n                  className=\"px-3 py-1 bg-gray-600 text-white rounded hover:bg-gray-700 flex items-center space-x-1 text-sm\"\n                >\n                  <RotateCcw className=\"h-3 w-3\" />\n                  <span>Reset to $0</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Real-time Metrics Display */}\n        {!isManualMode && autoCalculationEnabled && realTimeMetrics && (\n          <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Activity className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                Live Trading Performance\n              </span>\n            </div>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 text-xs\">\n              <div>\n                <span className=\"text-gray-600 dark:text-gray-400\">Profit Factor:</span>\n                <div className=\"font-medium text-gray-900 dark:text-white\">\n                  {realTimeMetrics.profitFactor.toFixed(2)}\n                </div>\n              </div>\n              <div>\n                <span className=\"text-gray-600 dark:text-gray-400\">Win Rate:</span>\n                <div className=\"font-medium text-gray-900 dark:text-white\">\n                  {realTimeMetrics.winRate.toFixed(1)}%\n                </div>\n              </div>\n              <div>\n                <span className=\"text-gray-600 dark:text-gray-400\">Total Trades:</span>\n                <div className=\"font-medium text-gray-900 dark:text-white\">\n                  {realTimeMetrics.totalTrades}\n                </div>\n              </div>\n              <div>\n                <span className=\"text-gray-600 dark:text-gray-400\">Last Update:</span>\n                <div className=\"font-medium text-gray-900 dark:text-white\">\n                  {lastAutoUpdate?.toLocaleTimeString() || 'Never'}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Mode Description */}\n        <div className=\"mt-3 text-xs text-gray-500 dark:text-gray-400\">\n          {isManualMode \n            ? \"Manual mode: You control profit updates manually. Automatic updates are disabled.\"\n            : autoCalculationEnabled\n              ? \"Automatic mode: Profit updates from real trading performance data when available, with simulation fallback.\"\n              : \"Automatic mode: Profit updates using simulated trading data for demonstration.\"\n          }\n        </div>\n      </div>\n\n      {/* Current Status */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n        {/* Profit Progress */}\n        <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n              Daily Target\n            </span>\n            <DollarSign className=\"h-4 w-4 text-green-600\" />\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            ${currentProfit.toFixed(2)}\n          </div>\n          <div className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">\n            Target: ${dailyTarget.toFixed(2)}\n          </div>\n          \n          {/* Progress Bar */}\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div \n              className={`h-2 rounded-full transition-all duration-300 ${getProgressColor()}`}\n              style={{ width: `${Math.min(progressPercentage, 100)}%` }}\n            ></div>\n          </div>\n          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            {progressPercentage.toFixed(1)}% achieved\n          </div>\n          \n          {/* Withdrawal Options */}\n          {currentProfit > 0 && (\n            <div className=\"mt-3 pt-3 border-t border-gray-200 dark:border-gray-700\">\n              <button \n                onClick={async () => {\n                  try {\n                    await automatedWorkflowService.manualWithdraw(currentProfit, 'bank');\n                  } catch (error) {\n                    console.error('Withdrawal failed:', error);\n                  }\n                }}\n                className=\"w-full flex items-center justify-center gap-2 px-3 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors duration-200\"\n              >\n                <ArrowDownLeft className=\"h-4 w-4\" />\n                Withdraw Profits\n              </button>\n              <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1 text-center\">\n                Available: ${currentProfit.toFixed(2)}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Loss Tracking */}\n        <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n              Daily Loss\n            </span>\n            <TrendingDown className=\"h-4 w-4 text-red-600\" />\n          </div>\n          <div className=\"text-2xl font-bold text-red-600 mb-2\">\n            ${Math.abs(currentLoss).toFixed(2)}\n          </div>\n          <div className=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">\n            Max Loss: ${maxDailyLoss.toFixed(2)}\n          </div>\n          \n          {/* Loss Progress Bar */}\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div \n              className=\"h-2 rounded-full bg-red-500 transition-all duration-300\"\n              style={{ width: `${Math.min(lossPercentage, 100)}%` }}\n            ></div>\n          </div>\n          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            {lossPercentage.toFixed(1)}% of max loss\n          </div>\n        </div>\n\n        {/* Status */}\n        <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n              Status\n            </span>\n            {isTargetAchieved ? (\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            ) : isMaxLossReached ? (\n              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n            ) : (\n              <TrendingUp className=\"h-4 w-4 text-blue-600\" />\n            )}\n          </div>\n          <div className={`text-lg font-bold ${getStatusColor()}`}>\n            {isMaxLossReached ? 'Max Loss Reached' :\n             isTargetAchieved ? 'Target Achieved!' :\n             currentProfit > 0 ? 'In Profit' :\n             currentProfit < 0 ? 'In Loss' : 'Neutral'}\n          </div>\n          <div className=\"text-sm text-gray-500 dark:text-gray-400 mt-2\">\n            Net P&L: ${(currentProfit + currentLoss).toFixed(2)}\n          </div>\n        </div>\n      </div>\n\n      {/* Settings Panel */}\n      {showSettings && (\n        <div className=\"border-t border-gray-200 dark:border-gray-700 pt-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n            Target Settings\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Target Amount */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Daily Target Amount ($)\n              </label>\n              <input\n                type=\"number\"\n                value={dailyTarget}\n                onChange={(e) => setDailyTarget(Number(e.target.value))}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n              />\n            </div>\n\n            {/* Max Daily Loss */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Max Daily Loss ($)\n              </label>\n              <input\n                type=\"number\"\n                value={maxDailyLoss}\n                onChange={(e) => setMaxDailyLoss(Number(e.target.value))}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n              />\n            </div>\n\n            {/* Risk Level */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Risk Level\n              </label>\n              <select\n                value={riskLevel}\n                onChange={(e) => setRiskLevel(e.target.value as 'LOW' | 'MEDIUM' | 'HIGH')}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n              >\n                <option value=\"LOW\">Low Risk</option>\n                <option value=\"MEDIUM\">Medium Risk</option>\n                <option value=\"HIGH\">High Risk</option>\n              </select>\n            </div>\n\n            {/* Auto Stop */}\n            <div className=\"flex items-center space-x-3\">\n              <input\n                type=\"checkbox\"\n                id=\"autoStop\"\n                checked={autoStopEnabled}\n                onChange={(e) => setAutoStopEnabled(e.target.checked)}\n                className=\"h-4 w-4 text-blue-600 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"autoStop\" className=\"text-sm text-gray-700 dark:text-gray-300\">\n                Auto-stop trading when target/loss reached\n              </label>\n            </div>\n\n            {/* Auto Calculation */}\n            <div className=\"flex items-center space-x-3\">\n              <input\n                type=\"checkbox\"\n                id=\"autoCalculation\"\n                checked={autoCalculationEnabled}\n                onChange={(e) => setAutoCalculationEnabled(e.target.checked)}\n                className=\"h-4 w-4 text-blue-600 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"autoCalculation\" className=\"text-sm text-gray-700 dark:text-gray-300\">\n                Auto-calculate from trading performance\n              </label>\n            </div>\n\n            {/* Notifications */}\n            <div className=\"flex items-center space-x-3\">\n              <input\n                type=\"checkbox\"\n                id=\"notifications\"\n                checked={notifications}\n                onChange={(e) => setNotifications(e.target.checked)}\n                className=\"h-4 w-4 text-blue-600 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"notifications\" className=\"text-sm text-gray-700 dark:text-gray-300\">\n                Enable notifications\n              </label>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3 mt-6\">\n            <button\n              onClick={resetDaily}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center space-x-2\"\n            >\n              <RotateCcw className=\"h-4 w-4\" />\n              <span>Reset Daily Target</span>\n            </button>\n            {!isManualMode && (\n              <>\n                <button\n                  onClick={() => updateProfit(100, 'automatic', 'demo_gain')}\n                  className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 flex items-center space-x-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Demo +$100</span>\n                </button>\n                <button\n                  onClick={() => updateLoss(-50)}\n                  className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 flex items-center space-x-2\"\n                >\n                  <Minus className=\"h-4 w-4\" />\n                  <span>Demo -$50</span>\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Profit History */}\n      {profitHistory.length > 0 && (\n        <div className=\"border-t border-gray-200 dark:border-gray-700 pt-6 mt-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n            Profit Update History\n          </h3>\n          <div className=\"max-h-48 overflow-y-auto space-y-2\">\n            {profitHistory.slice(-10).reverse().map((entry, index) => (\n              <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded text-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  {entry.type === 'manual' ? (\n                    <Edit3 className=\"h-3 w-3 text-blue-600\" />\n                  ) : (\n                    <TrendingUp className=\"h-3 w-3 text-green-600\" />\n                  )}\n                  <span className=\"text-gray-600 dark:text-gray-400\">\n                    {entry.timestamp.toLocaleTimeString()}\n                  </span>\n                  <span className={`px-2 py-1 rounded text-xs ${\n                    entry.type === 'manual' \n                      ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'\n                      : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n                  }`}>\n                    {entry.type}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className={`font-medium ${\n                    entry.amount > 0 ? 'text-green-600' : 'text-red-600'\n                  }`}>\n                    {entry.amount > 0 ? '+' : ''}${entry.amount.toFixed(2)}\n                  </span>\n                  <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    ({entry.action.replace('_', ' ')})\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Copy Trading Section */}\n      <div className=\"border-t border-gray-200 dark:border-gray-700 pt-6 mt-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center space-x-2\">\n            <Copy className=\"h-5 w-5 text-blue-600\" />\n            <span>Copy Trading</span>\n          </h3>\n          <div className=\"flex items-center space-x-3\">\n            <span className={`text-sm ${!copyTradingEnabled ? 'text-gray-500' : 'text-gray-400'}`}>\n              Disabled\n            </span>\n            <button\n              onClick={() => handleCopyTradingToggle(!copyTradingEnabled)}\n              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                copyTradingEnabled ? 'bg-blue-600' : 'bg-gray-300'\n              }`}\n            >\n              <span\n                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  copyTradingEnabled ? 'translate-x-6' : 'translate-x-1'\n                }`}\n              />\n            </button>\n            <span className={`text-sm ${copyTradingEnabled ? 'text-blue-600 font-medium' : 'text-gray-500'}`}>\n              Enabled\n            </span>\n          </div>\n        </div>\n\n        {copyTradingEnabled && (\n          <div className=\"space-y-4\">\n            {/* Copy Trading Allocation */}\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                  Total Allocation\n                </span>\n                <span className=\"text-lg font-bold text-blue-900 dark:text-blue-100\">\n                  ${copyTradingAllocation.toLocaleString()}\n                </span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"100\"\n                max=\"10000\"\n                step=\"100\"\n                value={copyTradingAllocation}\n                onChange={(e) => setCopyTradingAllocation(Number(e.target.value))}\n                className=\"w-full h-2 bg-blue-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-blue-600 dark:text-blue-400 mt-1\">\n                <span>$100</span>\n                <span>$10,000</span>\n              </div>\n            </div>\n\n            {/* Trending Traders Section */}\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  🔥 Trending Traders\n                </label>\n                <span className=\"text-xs text-gray-500 dark:text-gray-400\">Top Performers</span>\n              </div>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n                {getTrendingTraders().map((trader) => (\n                  <div\n                    key={trader.id}\n                    className=\"bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-700 border border-blue-200 dark:border-gray-600 rounded-lg p-3 hover:shadow-md transition-all cursor-pointer\"\n                    onClick={(e) => handleQuickCopy(trader, e)}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                          {trader.avatar}\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-semibold text-gray-900 dark:text-white truncate\">\n                            {trader.name}\n                          </div>\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">\n                            {getCategoryIcon(trader.category)} {trader.title || traderCategories.find(cat => cat.id === trader.category)?.label}\n                          </div>\n                        </div>\n                      </div>\n                      {trader.verified && (\n                        <CheckCircle className=\"h-4 w-4 text-blue-500\" />\n                      )}\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-xs text-gray-600 dark:text-gray-400\">Total Return</span>\n                        <span className=\"text-sm font-bold text-green-600 dark:text-green-400\">\n                          +{trader.performance.totalReturn.toFixed(1)}%\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-xs text-gray-600 dark:text-gray-400\">Win Rate</span>\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {trader.performance.winRate.toFixed(1)}%\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-xs text-gray-600 dark:text-gray-400\">Followers</span>\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {trader.followers.toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                    <button className=\"w-full mt-2 px-2 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium rounded transition-colors\">\n                      Quick Copy\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Category Selection Dropdown */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Trader Category\n              </label>\n              <select\n                value={selectedCategory}\n                onChange={(e) => handleCategoryChange(e.target.value as TraderCategory | 'all')}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n              >\n                <option value=\"all\">🌟 All Categories</option>\n                {traderCategories.map((category) => (\n                  <option key={category.id} value={category.id}>\n                    {category.icon} {category.label}\n                  </option>\n                ))}\n              </select>\n              {selectedCategory !== 'all' && (\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                  {traderCategories.find(cat => cat.id === selectedCategory)?.description}\n                </p>\n              )}\n            </div>\n\n            {/* Search Input */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Search Traders\n              </label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search by name, title, or category...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400\"\n                />\n              </div>\n            </div>\n\n            {/* Quick Filter Buttons */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Quick Filters\n              </label>\n              <div className=\"flex flex-wrap gap-2\">\n                <button\n                  onClick={() => handleCategoryChange('all')}\n                  className={`px-3 py-1.5 text-xs font-medium rounded-full transition-colors ${\n                    selectedCategory === 'all'\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'\n                  }`}\n                >\n                  🌟 All\n                </button>\n                <button\n                  onClick={() => handleCategoryChange(TraderCategory.CELEBRITIES)}\n                  className={`px-3 py-1.5 text-xs font-medium rounded-full transition-colors ${\n                    selectedCategory === TraderCategory.CELEBRITIES\n                      ? 'bg-yellow-500 text-white'\n                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-yellow-100 dark:hover:bg-yellow-900'\n                  }`}\n                >\n                  ⭐ Celebrities\n                </button>\n                <button\n                  onClick={() => handleCategoryChange(TraderCategory.HEDGE_FUNDS)}\n                  className={`px-3 py-1.5 text-xs font-medium rounded-full transition-colors ${\n                    selectedCategory === TraderCategory.HEDGE_FUNDS\n                      ? 'bg-green-500 text-white'\n                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-green-100 dark:hover:bg-green-900'\n                  }`}\n                >\n                  🏦 Hedge Funds\n                </button>\n                <button\n                  onClick={() => handleCategoryChange(TraderCategory.POLITICIANS)}\n                  className={`px-3 py-1.5 text-xs font-medium rounded-full transition-colors ${\n                    selectedCategory === TraderCategory.POLITICIANS\n                      ? 'bg-purple-500 text-white'\n                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-purple-100 dark:hover:bg-purple-900'\n                  }`}\n                >\n                  🏛️ Politicians\n                </button>\n                <button\n                  onClick={() => handleCategoryChange(TraderCategory.PROFESSIONALS)}\n                  className={`px-3 py-1.5 text-xs font-medium rounded-full transition-colors ${\n                    selectedCategory === TraderCategory.PROFESSIONALS\n                      ? 'bg-indigo-500 text-white'\n                      : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-indigo-100 dark:hover:bg-indigo-900'\n                  }`}\n                >\n                  💼 Professionals\n                </button>\n              </div>\n            </div>\n\n            {/* Available Copy Traders */}\n            <div className=\"mb-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Available Traders\n                </label>\n                <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {filteredTraders.length} trader{filteredTraders.length !== 1 ? 's' : ''} found\n                </span>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredTraders.map((trader) => (\n                <div\n                  key={trader.id}\n                  className={`relative border-2 rounded-lg p-4 cursor-pointer transition-all ${\n                    selectedCopyTraders.includes(trader.id)\n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\n                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                  }`}\n                  onClick={() => toggleCopyTrader(trader.id)}\n                  onMouseEnter={() => setHoveredTrader(trader.id)}\n                  onMouseLeave={() => setHoveredTrader(null)}\n                >\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <div className=\"relative\">\n                      <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                        {trader.avatar}\n                      </div>\n                      <div className={`absolute -top-1 -right-1 w-4 h-4 rounded-full flex items-center justify-center text-xs ${getCategoryColor(trader.category)}`}>\n                        {getCategoryIcon(trader.category)}\n                      </div>\n                      {trader.verified && (\n                        <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white text-xs\">✓</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                          {trader.name}\n                        </div>\n                        {trader.verified && (\n                          <span className=\"text-green-500 text-xs\">✓</span>\n                        )}\n                      </div>\n                      {trader.title && (\n                        <div className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\n                          {trader.title}\n                        </div>\n                      )}\n                      <div className=\"flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400\">\n                        <Users className=\"h-3 w-3\" />\n                        <span>{trader.followers.toLocaleString()}</span>\n                        <span className={`px-1 py-0.5 rounded text-xs ${\n                          trader.riskLevel === 'low' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :\n                          trader.riskLevel === 'medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :\n                          'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                        }`}>\n                          {trader.riskLevel}\n                        </span>\n                      </div>\n                    </div>\n                    {selectedCopyTraders.includes(trader.id) && (\n                      <CheckCircle className=\"h-5 w-5 text-blue-600\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                    <div>\n                      <span className=\"text-gray-500 dark:text-gray-400\">Total Return:</span>\n                      <div className=\"font-medium text-green-600\">+{trader.performance.totalReturn}%</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500 dark:text-gray-400\">Win Rate:</span>\n                      <div className=\"font-medium text-gray-900 dark:text-white\">{trader.performance.winRate}%</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500 dark:text-gray-400\">Monthly:</span>\n                      <div className=\"font-medium text-blue-600\">+{trader.performance.monthlyReturn}%</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500 dark:text-gray-400\">Max DD:</span>\n                      <div className=\"font-medium text-red-600\">{trader.performance.maxDrawdown}%</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-3 pt-3 border-t border-gray-200 dark:border-gray-600\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Min. Copy: ${trader.minCopyAmount}\n                      </div>\n                      <button\n                        onClick={(e) => handleQuickCopy(trader, e)}\n                        className=\"px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs rounded-md transition-colors flex items-center space-x-1\"\n                      >\n                        <Copy className=\"h-3 w-3\" />\n                        <span>Copy</span>\n                      </button>\n                    </div>\n                  </div>\n                  \n                  {/* Hover Tooltip */}\n                  {hoveredTrader === trader.id && (\n                    <div className=\"absolute top-0 left-full ml-2 w-80 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-4 z-50\">\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold\">\n                          {trader.avatar}\n                        </div>\n                        <div>\n                          <div className=\"font-semibold text-gray-900 dark:text-white\">{trader.name}</div>\n                          {trader.title && (\n                            <div className=\"text-sm text-gray-600 dark:text-gray-400\">{trader.title}</div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3 text-sm mb-3\">\n                        <div className=\"bg-gray-50 dark:bg-gray-700 p-2 rounded\">\n                          <div className=\"text-gray-500 dark:text-gray-400 text-xs\">Total Trades</div>\n                          <div className=\"font-semibold text-gray-900 dark:text-white\">{trader.totalTrades}</div>\n                        </div>\n                        <div className=\"bg-gray-50 dark:bg-gray-700 p-2 rounded\">\n                          <div className=\"text-gray-500 dark:text-gray-400 text-xs\">Avg Return</div>\n                          <div className=\"font-semibold text-green-600\">+{trader.avgReturn}%</div>\n                        </div>\n                        <div className=\"bg-gray-50 dark:bg-gray-700 p-2 rounded\">\n                          <div className=\"text-gray-500 dark:text-gray-400 text-xs\">Followers</div>\n                          <div className=\"font-semibold text-gray-900 dark:text-white\">{trader.followers.toLocaleString()}</div>\n                        </div>\n                        <div className=\"bg-gray-50 dark:bg-gray-700 p-2 rounded\">\n                          <div className=\"text-gray-500 dark:text-gray-400 text-xs\">Status</div>\n                          <div className={`font-semibold capitalize ${\n                            trader.status === 'active' ? 'text-green-600' : 'text-yellow-600'\n                          }`}>{trader.status}</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"border-t border-gray-200 dark:border-gray-600 pt-3\">\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400 mb-2\">Performance Metrics</div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-xs text-gray-600 dark:text-gray-400\">Total Return:</span>\n                            <span className=\"text-xs font-medium text-green-600\">+{trader.performance.totalReturn}%</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-xs text-gray-600 dark:text-gray-400\">Win Rate:</span>\n                            <span className=\"text-xs font-medium text-gray-900 dark:text-white\">{trader.performance.winRate}%</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-xs text-gray-600 dark:text-gray-400\">Monthly Return:</span>\n                            <span className=\"text-xs font-medium text-blue-600\">+{trader.performance.monthlyReturn}%</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-xs text-gray-600 dark:text-gray-400\">Max Drawdown:</span>\n                            <span className=\"text-xs font-medium text-red-600\">{trader.performance.maxDrawdown}%</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Auto Trading Section */}\n      <div className=\"border-t border-gray-200 dark:border-gray-700 pt-6 mt-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center space-x-2\">\n            <Bot className=\"h-5 w-5 text-purple-600\" />\n            <span>Auto Trading</span>\n          </h3>\n          <div className=\"flex items-center space-x-3\">\n            <span className={`text-sm ${!autoTradingEnabled ? 'text-gray-500' : 'text-gray-400'}`}>\n              Disabled\n            </span>\n            <button\n              onClick={() => handleAutoTradingToggle(!autoTradingEnabled)}\n              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                autoTradingEnabled ? 'bg-purple-600' : 'bg-gray-300'\n              }`}\n            >\n              <span\n                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  autoTradingEnabled ? 'translate-x-6' : 'translate-x-1'\n                }`}\n              />\n            </button>\n            <span className={`text-sm ${autoTradingEnabled ? 'text-purple-600 font-medium' : 'text-gray-500'}`}>\n              Enabled\n            </span>\n          </div>\n        </div>\n\n        {autoTradingEnabled && (\n          <div className=\"space-y-4\">\n            {/* Daily Gain Progress */}\n            <div className=\"bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-purple-800 dark:text-purple-200\">\n                  Daily Gain Progress\n                </span>\n                <span className=\"text-lg font-bold text-purple-900 dark:text-purple-100\">\n                  ${dailyGainAchieved.toFixed(2)} / ${dailyGainLimit.toFixed(2)}\n                </span>\n              </div>\n              <div className=\"w-full bg-purple-200 dark:bg-purple-800 rounded-full h-3\">\n                <div \n                  className=\"h-3 rounded-full bg-purple-600 transition-all duration-300\"\n                  style={{ width: `${Math.min((dailyGainAchieved / dailyGainLimit) * 100, 100)}%` }}\n                ></div>\n              </div>\n              <div className=\"text-xs text-purple-600 dark:text-purple-400 mt-1\">\n                {((dailyGainAchieved / dailyGainLimit) * 100).toFixed(1)}% of daily limit achieved\n              </div>\n            </div>\n\n            {/* Auto Trading Settings */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Daily Gain Limit ($)\n                </label>\n                <input\n                  type=\"number\"\n                  value={dailyGainLimit}\n                  onChange={(e) => setDailyGainLimit(Number(e.target.value))}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n                  min=\"0\"\n                  step=\"10\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Risk Level\n                </label>\n                <select\n                  value={autoTradingRiskLevel}\n                  onChange={(e) => setAutoTradingRiskLevel(e.target.value as 'conservative' | 'moderate' | 'aggressive')}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n                >\n                  <option value=\"conservative\">Conservative</option>\n                  <option value=\"moderate\">Moderate</option>\n                  <option value=\"aggressive\">Aggressive</option>\n                </select>\n              </div>\n            </div>\n\n            {/* Auto Stop Settings */}\n            <div className=\"flex items-center space-x-3\">\n              <input\n                type=\"checkbox\"\n                id=\"autoStopOnTarget\"\n                checked={autoStopOnTarget}\n                onChange={(e) => setAutoStopOnTarget(e.target.checked)}\n                className=\"h-4 w-4 text-purple-600 border-gray-300 rounded\"\n              />\n              <label htmlFor=\"autoStopOnTarget\" className=\"text-sm text-gray-700 dark:text-gray-300\">\n                Auto-stop when daily gain limit is reached\n              </label>\n            </div>\n\n            {/* Auto Trading Status */}\n            <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Auto Trading Status\n                </span>\n                <div className=\"flex items-center space-x-2\">\n                  {autoTradingEnabled ? (\n                    <>\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                      <span className=\"text-sm text-green-600 font-medium\">Active</span>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n                      <span className=\"text-sm text-gray-500\">Inactive</span>\n                    </>\n                  )}\n                </div>\n              </div>\n              {dailyGainAchieved >= dailyGainLimit && autoStopOnTarget && (\n                <div className=\"mt-2 text-xs text-orange-600 dark:text-orange-400\">\n                  ⚠️ Auto trading will stop when daily limit is reached\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Recent Targets History */}\n      <div className=\"border-t border-gray-200 dark:border-gray-700 pt-6 mt-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n          Recent Targets\n        </h3>\n        <div className=\"space-y-3\">\n          {targets.slice(-5).reverse().map((target) => (\n            <div key={target.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <Calendar className=\"h-4 w-4 text-gray-500\" />\n                <div>\n                  <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {target.date}\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    Target: ${target.targetAmount}\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className={`text-sm font-medium ${\n                  target.currentProfit >= target.targetAmount ? 'text-green-600' :\n                  target.currentProfit > 0 ? 'text-blue-600' : 'text-red-600'\n                }`}>\n                  ${target.currentProfit.toFixed(2)}\n                </div>\n                <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {target.isActive ? 'Active' : 'Completed'}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Copy Trader Confirmation Modal */}\n      {showCopyModal && selectedTraderToCopy && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Copy Trader\n              </h3>\n              <button\n                onClick={cancelCopy}\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\n              >\n                ×\n              </button>\n            </div>\n            \n            <div className=\"mb-4\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold\">\n                  {selectedTraderToCopy.avatar}\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 dark:text-white\">\n                    {selectedTraderToCopy.name}\n                  </h4>\n                  {selectedTraderToCopy.title && (\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      {selectedTraderToCopy.title}\n                    </p>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-gray-500 dark:text-gray-400\">Total Return:</span>\n                  <div className=\"font-medium text-green-600\">\n                    +{selectedTraderToCopy.performance.totalReturn}%\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-gray-500 dark:text-gray-400\">Win Rate:</span>\n                  <div className=\"font-medium text-gray-900 dark:text-white\">\n                    {selectedTraderToCopy.performance.winRate}%\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-gray-500 dark:text-gray-400\">Risk Level:</span>\n                  <div className={`font-medium capitalize ${\n                    selectedTraderToCopy.riskLevel === 'low' ? 'text-green-600' :\n                    selectedTraderToCopy.riskLevel === 'medium' ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {selectedTraderToCopy.riskLevel}\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-gray-500 dark:text-gray-400\">Min Amount:</span>\n                  <div className=\"font-medium text-gray-900 dark:text-white\">\n                    ${selectedTraderToCopy.minCopyAmount}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Copy Amount ($)\n              </label>\n              <input\n                type=\"number\"\n                value={copyAmount}\n                onChange={(e) => setCopyAmount(Number(e.target.value))}\n                min={selectedTraderToCopy.minCopyAmount}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\n                placeholder={`Min: $${selectedTraderToCopy.minCopyAmount}`}\n              />\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <button\n                onClick={cancelCopy}\n                className=\"flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={confirmCopy}\n                disabled={copyAmount < selectedTraderToCopy.minCopyAmount}\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              >\n                Confirm Copy\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfitTargetSettings;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5237, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(amount: number): string {\n  if (typeof amount !== 'number' || isNaN(amount)) return '$0.00'\n  try {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount)\n  } catch (error) {\n    return '$0.00'\n  }\n}\n\nexport function formatPercent(value: number): string {\n  if (typeof value !== 'number' || isNaN(value)) return '0.00%'\n  try {\n    return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`\n  } catch (error) {\n    return '0.00%'\n  }\n}\n\nexport function formatNumber(value: number): string {\n  if (typeof value !== 'number' || isNaN(value)) return '0'\n  try {\n    return new Intl.NumberFormat('en-US').format(value)\n  } catch (error) {\n    return '0'\n  }\n}"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;;AAEO,SAAS;IAAG,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,SAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,OAAH,QAAA,SAAA,CAAA,KAAuB;;IACxC,OAAO,IAAA,yKAAO,EAAC,IAAA,gJAAI,EAAC;AACtB;AAEO,SAAS,eAAe,MAAc;IAC3C,IAAI,OAAO,WAAW,YAAY,MAAM,SAAS,OAAO;IACxD,IAAI;QACF,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;YACpC,OAAO;YACP,UAAU;QACZ,GAAG,MAAM,CAAC;IACZ,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,SAAS,cAAc,KAAa;IACzC,IAAI,OAAO,UAAU,YAAY,MAAM,QAAQ,OAAO;IACtD,IAAI;QACF,OAAO,AAAC,GAA0B,OAAxB,SAAS,IAAI,MAAM,IAAsB,OAAjB,MAAM,OAAO,CAAC,IAAG;IACrD,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,SAAS,aAAa,KAAa;IACxC,IAAI,OAAO,UAAU,YAAY,MAAM,QAAQ,OAAO;IACtD,IAAI;QACF,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS,MAAM,CAAC;IAC/C,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 5291, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }"],"names":[],"mappings":";;;;;;;AACA;AACA;;;;AAEA,MAAM,gBAAgB,IAAA,0KAAG,EACvB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,KAA4C;QAA5C,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB,GAA5C;IACb,qBACE,6LAAC;QAAI,WAAW,IAAA,4HAAE,EAAC,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 5340, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/ui/DemoModeIndicator.tsx"],"sourcesContent":["'use client'\n\nimport React from 'react'\nimport { Badge } from '@/components/ui/badge'\nimport { AlertTriangle, Play } from 'lucide-react'\nimport { useTradingMode } from '@/contexts/TradingModeContext'\nimport { cn } from '@/lib/utils'\n\ninterface DemoModeIndicatorProps {\n  className?: string\n  variant?: 'badge' | 'banner'\n}\n\nexport function DemoModeIndicator({ className, variant = 'badge' }: DemoModeIndicatorProps) {\n  const { isPaperTrading, tradingMode } = useTradingMode()\n\n  if (!isPaperTrading) {\n    return null\n  }\n\n  if (variant === 'banner') {\n    return (\n      <div className={cn(\n        'bg-orange-100 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg p-3 mb-4',\n        className\n      )}>\n        <div className=\"flex items-center gap-2\">\n          <Play className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n          <span className=\"text-sm font-medium text-orange-800 dark:text-orange-200\">\n            Demo Mode Active\n          </span>\n          <span className=\"text-xs text-orange-600 dark:text-orange-400\">\n            • All trades are simulated • No real money involved\n          </span>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <Badge \n      variant=\"outline\" \n      className={cn(\n        'bg-orange-50 dark:bg-orange-900/20 border-orange-200 dark:border-orange-800 text-orange-700 dark:text-orange-300 font-medium',\n        className\n      )}\n    >\n      <Play className=\"h-3 w-3 mr-1\" />\n      Demo Mode\n    </Badge>\n  )\n}\n\nexport default DemoModeIndicator"],"names":[],"mappings":";;;;;;;AAGA;AACA;AACA;AACA;;;AANA;;;;;AAaO,SAAS,kBAAkB,KAAwD;QAAxD,EAAE,SAAS,EAAE,UAAU,OAAO,EAA0B,GAAxD;;IAChC,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,GAAG,IAAA,2JAAc;IAEtD,IAAI,CAAC,gBAAgB;QACnB,OAAO;IACT;IAEA,IAAI,YAAY,UAAU;QACxB,qBACE,6LAAC;YAAI,WAAW,IAAA,4HAAE,EAChB,2GACA;sBAEA,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,6MAAI;wBAAC,WAAU;;;;;;kCAChB,6LAAC;wBAAK,WAAU;kCAA2D;;;;;;kCAG3E,6LAAC;wBAAK,WAAU;kCAA+C;;;;;;;;;;;;;;;;;IAMvE;IAEA,qBACE,6LAAC,6IAAK;QACJ,SAAQ;QACR,WAAW,IAAA,4HAAE,EACX,gIACA;;0BAGF,6LAAC,6MAAI;gBAAC,WAAU;;;;;;YAAiB;;;;;;;AAIvC;GAtCgB;;QAC0B,2JAAc;;;KADxC;uCAwCD","debugId":null}},
    {"offset": {"line": 5441, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/modals/DepositWithdrawModal.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { X, CreditCard, Banknote, Smartphone, ArrowUpRight, ArrowDownLeft, DollarSign, Clock, Shield, CheckCircle } from 'lucide-react';\nimport automatedWorkflowService from '@/services/AutomatedWorkflowService';\n\ninterface DepositWithdrawModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  mode: 'deposit' | 'withdraw';\n  currentBalance?: number;\n  onSuccess?: (amount: number, method: string) => void;\n}\n\ninterface PaymentMethod {\n  id: string;\n  name: string;\n  icon: React.ReactNode;\n  description: string;\n  processingTime: string;\n  fees: string;\n  minAmount: number;\n  maxAmount: number;\n}\n\nconst DepositWithdrawModal: React.FC<DepositWithdrawModalProps> = ({\n  isOpen,\n  onClose,\n  mode,\n  currentBalance = 0,\n  onSuccess\n}) => {\n  const [selectedMethod, setSelectedMethod] = useState<string>('');\n  const [amount, setAmount] = useState<string>('');\n  const [step, setStep] = useState<'method' | 'amount' | 'confirmation' | 'processing' | 'success'>('method');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const depositMethods: PaymentMethod[] = [\n    {\n      id: 'bank-transfer',\n      name: 'Bank Transfer',\n      icon: <Banknote className=\"h-6 w-6\" />,\n      description: 'Direct transfer from your bank account',\n      processingTime: '1-3 business days',\n      fees: 'Free',\n      minAmount: 10,\n      maxAmount: 50000\n    },\n    {\n      id: 'debit-card',\n      name: 'Debit Card',\n      icon: <CreditCard className=\"h-6 w-6\" />,\n      description: 'Instant deposit with your debit card',\n      processingTime: 'Instant',\n      fees: '2.9% + $0.30',\n      minAmount: 1,\n      maxAmount: 10000\n    },\n    {\n      id: 'mobile-payment',\n      name: 'Mobile Payment',\n      icon: <Smartphone className=\"h-6 w-6\" />,\n      description: 'Apple Pay, Google Pay, Samsung Pay',\n      processingTime: 'Instant',\n      fees: '2.9% + $0.30',\n      minAmount: 1,\n      maxAmount: 5000\n    }\n  ];\n\n  const withdrawMethods: PaymentMethod[] = [\n    {\n      id: 'bank-transfer',\n      name: 'Bank Transfer',\n      icon: <Banknote className=\"h-6 w-6\" />,\n      description: 'Transfer to your linked bank account',\n      processingTime: '1-3 business days',\n      fees: 'Free',\n      minAmount: 10,\n      maxAmount: currentBalance\n    },\n    {\n      id: 'instant-withdrawal',\n      name: 'Instant Withdrawal',\n      icon: <CreditCard className=\"h-6 w-6\" />,\n      description: 'Instant transfer to your debit card',\n      processingTime: 'Instant',\n      fees: '1.5%',\n      minAmount: 1,\n      maxAmount: Math.min(currentBalance, 25000)\n    }\n  ];\n\n  const methods = mode === 'deposit' ? depositMethods : withdrawMethods;\n  const selectedMethodData = methods.find(m => m.id === selectedMethod);\n\n  const handleMethodSelect = (methodId: string) => {\n    setSelectedMethod(methodId);\n    setStep('amount');\n  };\n\n  const handleAmountSubmit = () => {\n    if (!amount || parseFloat(amount) < (selectedMethodData?.minAmount || 0)) return;\n    setStep('confirmation');\n  };\n\n  const handleConfirm = async () => {\n    setStep('processing');\n    setIsProcessing(true);\n    \n    try {\n      const amountValue = parseFloat(amount);\n      const methodName = selectedMethodData?.name || '';\n      \n      if (mode === 'deposit') {\n        await automatedWorkflowService.manualDeposit(amountValue, methodName);\n      } else {\n        await automatedWorkflowService.manualWithdraw(amountValue, methodName);\n      }\n      \n      setIsProcessing(false);\n      setStep('success');\n      onSuccess?.(amountValue, methodName);\n    } catch (error) {\n      setIsProcessing(false);\n      // Handle error - could add error step or show error message\n      console.error('Transaction failed:', error);\n    }\n  };\n\n  const resetModal = () => {\n    setSelectedMethod('');\n    setAmount('');\n    setStep('method');\n    setIsProcessing(false);\n  };\n\n  const handleClose = () => {\n    resetModal();\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-md max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center gap-3\">\n            {mode === 'deposit' ? (\n              <ArrowUpRight className=\"h-6 w-6 text-green-600\" />\n            ) : (\n              <ArrowDownLeft className=\"h-6 w-6 text-blue-600\" />\n            )}\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n              {mode === 'deposit' ? 'Deposit Funds' : 'Withdraw Funds'}\n            </h2>\n          </div>\n          <button\n            onClick={handleClose}\n            className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\n          >\n            <X className=\"h-5 w-5 text-gray-500\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {step === 'method' && (\n            <div className=\"space-y-4\">\n              <div className=\"text-center mb-6\">\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  {mode === 'deposit' \n                    ? 'Choose how you\\'d like to add funds to your account'\n                    : `Available balance: $${currentBalance.toFixed(2)}`\n                  }\n                </p>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {methods.map((method) => (\n                  <button\n                    key={method.id}\n                    onClick={() => handleMethodSelect(method.id)}\n                    className=\"w-full p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:border-blue-500 dark:hover:border-blue-400 transition-colors text-left\"\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"text-blue-600 dark:text-blue-400 mt-1\">\n                        {method.icon}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                          {method.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                          {method.description}\n                        </p>\n                        <div className=\"flex items-center gap-4 mt-2 text-xs text-gray-500 dark:text-gray-400\">\n                          <span className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            {method.processingTime}\n                          </span>\n                          <span>Fee: {method.fees}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {step === 'amount' && selectedMethodData && (\n            <div className=\"space-y-6\">\n              <button\n                onClick={() => setStep('method')}\n                className=\"text-blue-600 dark:text-blue-400 text-sm hover:underline\"\n              >\n                ← Back to payment methods\n              </button>\n              \n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                  {selectedMethodData.name}\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {selectedMethodData.description}\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Amount\n                  </label>\n                  <div className=\"relative\">\n                    <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                    <input\n                      type=\"number\"\n                      value={amount}\n                      onChange={(e) => setAmount(e.target.value)}\n                      placeholder=\"0.00\"\n                      min={selectedMethodData.minAmount}\n                      max={selectedMethodData.maxAmount}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                    />\n                  </div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                    Min: ${selectedMethodData.minAmount} • Max: ${selectedMethodData.maxAmount.toLocaleString()}\n                  </p>\n                </div>\n\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Processing time:</span>\n                    <span className=\"text-gray-900 dark:text-white\">{selectedMethodData.processingTime}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm mt-1\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Fee:</span>\n                    <span className=\"text-gray-900 dark:text-white\">{selectedMethodData.fees}</span>\n                  </div>\n                </div>\n\n                <button\n                  onClick={handleAmountSubmit}\n                  disabled={!amount || parseFloat(amount) < selectedMethodData.minAmount || parseFloat(amount) > selectedMethodData.maxAmount}\n                  className=\"w-full py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed text-white font-medium rounded-lg transition-colors\"\n                >\n                  Continue\n                </button>\n              </div>\n            </div>\n          )}\n\n          {step === 'confirmation' && selectedMethodData && (\n            <div className=\"space-y-6\">\n              <button\n                onClick={() => setStep('amount')}\n                className=\"text-blue-600 dark:text-blue-400 text-sm hover:underline\"\n              >\n                ← Back to amount\n              </button>\n              \n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                  Confirm {mode === 'deposit' ? 'Deposit' : 'Withdrawal'}\n                </h3>\n              </div>\n\n              <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6 space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Amount:</span>\n                  <span className=\"font-semibold text-gray-900 dark:text-white\">${parseFloat(amount).toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Method:</span>\n                  <span className=\"text-gray-900 dark:text-white\">{selectedMethodData.name}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Processing time:</span>\n                  <span className=\"text-gray-900 dark:text-white\">{selectedMethodData.processingTime}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Fee:</span>\n                  <span className=\"text-gray-900 dark:text-white\">{selectedMethodData.fees}</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-3 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <Shield className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                <div className=\"text-sm\">\n                  <p className=\"text-blue-800 dark:text-blue-200 font-medium\">\n                    Secure Transaction\n                  </p>\n                  <p className=\"text-blue-700 dark:text-blue-300 mt-1\">\n                    Your transaction is protected by bank-level encryption and security measures.\n                  </p>\n                </div>\n              </div>\n\n              <button\n                onClick={handleConfirm}\n                className=\"w-full py-3 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors\"\n              >\n                Confirm {mode === 'deposit' ? 'Deposit' : 'Withdrawal'}\n              </button>\n            </div>\n          )}\n\n          {step === 'processing' && (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                Processing {mode === 'deposit' ? 'Deposit' : 'Withdrawal'}\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Please wait while we process your transaction...\n              </p>\n            </div>\n          )}\n\n          {step === 'success' && (\n            <div className=\"text-center py-8\">\n              <CheckCircle className=\"h-16 w-16 text-green-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                {mode === 'deposit' ? 'Deposit' : 'Withdrawal'} Successful!\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                ${parseFloat(amount).toFixed(2)} has been {mode === 'deposit' ? 'added to' : 'withdrawn from'} your account.\n              </p>\n              <button\n                onClick={handleClose}\n                className=\"px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors\"\n              >\n                Done\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DepositWithdrawModal;"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAJA;;;;AAyBA,MAAM,uBAA4D;QAAC,EACjE,MAAM,EACN,OAAO,EACP,IAAI,EACJ,iBAAiB,CAAC,EAClB,SAAS,EACV;;IACC,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,yKAAQ,EAAS;IAC7D,MAAM,CAAC,QAAQ,UAAU,GAAG,IAAA,yKAAQ,EAAS;IAC7C,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,yKAAQ,EAAkE;IAClG,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAC;IAEjD,MAAM,iBAAkC;QACtC;YACE,IAAI;YACJ,MAAM;YACN,oBAAM,6LAAC,yNAAQ;gBAAC,WAAU;;;;;;YAC1B,aAAa;YACb,gBAAgB;YAChB,MAAM;YACN,WAAW;YACX,WAAW;QACb;QACA;YACE,IAAI;YACJ,MAAM;YACN,oBAAM,6LAAC,mOAAU;gBAAC,WAAU;;;;;;YAC5B,aAAa;YACb,gBAAgB;YAChB,MAAM;YACN,WAAW;YACX,WAAW;QACb;QACA;YACE,IAAI;YACJ,MAAM;YACN,oBAAM,6LAAC,+NAAU;gBAAC,WAAU;;;;;;YAC5B,aAAa;YACb,gBAAgB;YAChB,MAAM;YACN,WAAW;YACX,WAAW;QACb;KACD;IAED,MAAM,kBAAmC;QACvC;YACE,IAAI;YACJ,MAAM;YACN,oBAAM,6LAAC,yNAAQ;gBAAC,WAAU;;;;;;YAC1B,aAAa;YACb,gBAAgB;YAChB,MAAM;YACN,WAAW;YACX,WAAW;QACb;QACA;YACE,IAAI;YACJ,MAAM;YACN,oBAAM,6LAAC,mOAAU;gBAAC,WAAU;;;;;;YAC5B,aAAa;YACb,gBAAgB;YAChB,MAAM;YACN,WAAW;YACX,WAAW,KAAK,GAAG,CAAC,gBAAgB;QACtC;KACD;IAED,MAAM,UAAU,SAAS,YAAY,iBAAiB;IACtD,MAAM,qBAAqB,QAAQ,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;IAEtD,MAAM,qBAAqB,CAAC;QAC1B,kBAAkB;QAClB,QAAQ;IACV;IAEA,MAAM,qBAAqB;QACzB,IAAI,CAAC,UAAU,WAAW,UAAU,CAAC,CAAA,+BAAA,yCAAA,mBAAoB,SAAS,KAAI,CAAC,GAAG;QAC1E,QAAQ;IACV;IAEA,MAAM,gBAAgB;QACpB,QAAQ;QACR,gBAAgB;QAEhB,IAAI;YACF,MAAM,cAAc,WAAW;YAC/B,MAAM,aAAa,CAAA,+BAAA,yCAAA,mBAAoB,IAAI,KAAI;YAE/C,IAAI,SAAS,WAAW;gBACtB,MAAM,yJAAwB,CAAC,aAAa,CAAC,aAAa;YAC5D,OAAO;gBACL,MAAM,yJAAwB,CAAC,cAAc,CAAC,aAAa;YAC7D;YAEA,gBAAgB;YAChB,QAAQ;YACR,sBAAA,gCAAA,UAAY,aAAa;QAC3B,EAAE,OAAO,OAAO;YACd,gBAAgB;YAChB,4DAA4D;YAC5D,QAAQ,KAAK,CAAC,uBAAuB;QACvC;IACF;IAEA,MAAM,aAAa;QACjB,kBAAkB;QAClB,UAAU;QACV,QAAQ;QACR,gBAAgB;IAClB;IAEA,MAAM,cAAc;QAClB;QACA;IACF;IAEA,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BAEb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;gCACZ,SAAS,0BACR,6LAAC,6OAAY;oCAAC,WAAU;;;;;6FAExB,6LAAC,gPAAa;oCAAC,WAAU;;;;;;8CAE3B,6LAAC;oCAAG,WAAU;8CACX,SAAS,YAAY,kBAAkB;;;;;;;;;;;;sCAG5C,6LAAC;4BACC,SAAS;4BACT,WAAU;sCAEV,cAAA,6LAAC,oMAAC;gCAAC,WAAU;;;;;;;;;;;;;;;;;8BAKjB,6LAAC;oBAAI,WAAU;;wBACZ,SAAS,0BACR,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;wCAAE,WAAU;kDACV,SAAS,YACN,wDACA,AAAC,uBAAgD,OAA1B,eAAe,OAAO,CAAC;;;;;;;;;;;8CAKtD,6LAAC;oCAAI,WAAU;8CACZ,QAAQ,GAAG,CAAC,CAAC,uBACZ,6LAAC;4CAEC,SAAS,IAAM,mBAAmB,OAAO,EAAE;4CAC3C,WAAU;sDAEV,cAAA,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAI,WAAU;kEACZ,OAAO,IAAI;;;;;;kEAEd,6LAAC;wDAAI,WAAU;;0EACb,6LAAC;gEAAG,WAAU;0EACX,OAAO,IAAI;;;;;;0EAEd,6LAAC;gEAAE,WAAU;0EACV,OAAO,WAAW;;;;;;0EAErB,6LAAC;gEAAI,WAAU;;kFACb,6LAAC;wEAAK,WAAU;;0FACd,6LAAC,gNAAK;gFAAC,WAAU;;;;;;4EAChB,OAAO,cAAc;;;;;;;kFAExB,6LAAC;;4EAAK;4EAAM,OAAO,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;2CApBxB,OAAO,EAAE;;;;;;;;;;;;;;;;wBA8BvB,SAAS,YAAY,oCACpB,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCACC,SAAS,IAAM,QAAQ;oCACvB,WAAU;8CACX;;;;;;8CAID,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAG,WAAU;sDACX,mBAAmB,IAAI;;;;;;sDAE1B,6LAAC;4CAAE,WAAU;sDACV,mBAAmB,WAAW;;;;;;;;;;;;8CAInC,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;;8DACC,6LAAC;oDAAM,WAAU;8DAAkE;;;;;;8DAGnF,6LAAC;oDAAI,WAAU;;sEACb,6LAAC,mOAAU;4DAAC,WAAU;;;;;;sEACtB,6LAAC;4DACC,MAAK;4DACL,OAAO;4DACP,UAAU,CAAC,IAAM,UAAU,EAAE,MAAM,CAAC,KAAK;4DACzC,aAAY;4DACZ,KAAK,mBAAmB,SAAS;4DACjC,KAAK,mBAAmB,SAAS;4DACjC,WAAU;;;;;;;;;;;;8DAGd,6LAAC;oDAAE,WAAU;;wDAAgD;wDACpD,mBAAmB,SAAS;wDAAC;wDAAU,mBAAmB,SAAS,CAAC,cAAc;;;;;;;;;;;;;sDAI7F,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAI,WAAU;;sEACb,6LAAC;4DAAK,WAAU;sEAAmC;;;;;;sEACnD,6LAAC;4DAAK,WAAU;sEAAiC,mBAAmB,cAAc;;;;;;;;;;;;8DAEpF,6LAAC;oDAAI,WAAU;;sEACb,6LAAC;4DAAK,WAAU;sEAAmC;;;;;;sEACnD,6LAAC;4DAAK,WAAU;sEAAiC,mBAAmB,IAAI;;;;;;;;;;;;;;;;;;sDAI5E,6LAAC;4CACC,SAAS;4CACT,UAAU,CAAC,UAAU,WAAW,UAAU,mBAAmB,SAAS,IAAI,WAAW,UAAU,mBAAmB,SAAS;4CAC3H,WAAU;sDACX;;;;;;;;;;;;;;;;;;wBAON,SAAS,kBAAkB,oCAC1B,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCACC,SAAS,IAAM,QAAQ;oCACvB,WAAU;8CACX;;;;;;8CAID,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;wCAAG,WAAU;;4CAAyD;4CAC5D,SAAS,YAAY,YAAY;;;;;;;;;;;;8CAI9C,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAK,WAAU;8DAAmC;;;;;;8DACnD,6LAAC;oDAAK,WAAU;;wDAA8C;wDAAE,WAAW,QAAQ,OAAO,CAAC;;;;;;;;;;;;;sDAE7F,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAK,WAAU;8DAAmC;;;;;;8DACnD,6LAAC;oDAAK,WAAU;8DAAiC,mBAAmB,IAAI;;;;;;;;;;;;sDAE1E,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAK,WAAU;8DAAmC;;;;;;8DACnD,6LAAC;oDAAK,WAAU;8DAAiC,mBAAmB,cAAc;;;;;;;;;;;;sDAEpF,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAK,WAAU;8DAAmC;;;;;;8DACnD,6LAAC;oDAAK,WAAU;8DAAiC,mBAAmB,IAAI;;;;;;;;;;;;;;;;;;8CAI5E,6LAAC;oCAAI,WAAU;;sDACb,6LAAC,mNAAM;4CAAC,WAAU;;;;;;sDAClB,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAE,WAAU;8DAA+C;;;;;;8DAG5D,6LAAC;oDAAE,WAAU;8DAAwC;;;;;;;;;;;;;;;;;;8CAMzD,6LAAC;oCACC,SAAS;oCACT,WAAU;;wCACX;wCACU,SAAS,YAAY,YAAY;;;;;;;;;;;;;wBAK/C,SAAS,8BACR,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAG,WAAU;;wCAAyD;wCACzD,SAAS,YAAY,YAAY;;;;;;;8CAE/C,6LAAC;oCAAE,WAAU;8CAAmC;;;;;;;;;;;;wBAMnD,SAAS,2BACR,6LAAC;4BAAI,WAAU;;8CACb,6LAAC,sOAAW;oCAAC,WAAU;;;;;;8CACvB,6LAAC;oCAAG,WAAU;;wCACX,SAAS,YAAY,YAAY;wCAAa;;;;;;;8CAEjD,6LAAC;oCAAE,WAAU;;wCAAwC;wCACjD,WAAW,QAAQ,OAAO,CAAC;wCAAG;wCAAW,SAAS,YAAY,aAAa;wCAAiB;;;;;;;8CAEhG,6LAAC;oCACC,SAAS;oCACT,WAAU;8CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASf;GAlVM;KAAA;uCAoVS","debugId":null}},
    {"offset": {"line": 6270, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/Navigation.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useTheme } from '@/contexts/ThemeContext';\nimport { useTradingMode } from '@/contexts/TradingModeContext';\nimport DemoModeIndicator from '@/components/ui/DemoModeIndicator';\nimport { toast } from 'react-hot-toast';\nimport {\n  Menu,\n  X,\n  Home,\n  TrendingUp,\n  BarChart3,\n  Users,\n  Copy,\n  Bell,\n  Settings,\n  LogOut,\n  Sun,\n  Moon,\n  User,\n  ChevronDown,\n  Search,\n  Wallet,\n  Activity,\n  Shield,\n  HelpCircle,\n  Zap,\n  Radio,\n  CreditCard,\n  Crown,\n  Award,\n  Bot,\n  Link,\n  ArrowUpRight,\n  ArrowDownLeft,\n  Plus\n} from 'lucide-react';\nimport DepositWithdrawModal from '@/components/modals/DepositWithdrawModal';\n\ninterface NavigationItem {\n  name: string;\n  href: string;\n  icon: any;\n  badge?: number;\n  description?: string;\n}\n\n// All navigation items (available in user profile)\nconst allNavigationItems: NavigationItem[] = [\n  {\n    name: 'Dashboard',\n    href: '/dashboard',\n    icon: Home,\n    description: 'Overview and portfolio summary'\n  },\n  {\n    name: 'User Dashboard',\n    href: '/user-dashboard',\n    icon: User,\n    description: 'Personal account and subscription management'\n  },\n  {\n    name: 'Trading',\n    href: '/trading',\n    icon: TrendingUp,\n    description: 'Execute trades and view market data'\n  },\n  {\n    name: 'Live Trading',\n    href: '/trading/live',\n    icon: Radio,\n    description: 'Real-time trading dashboard'\n  },\n  {\n    name: 'Trading Panel',\n    href: '/trading/panel',\n    icon: TrendingUp,\n    description: 'Advanced trading interface with live market data'\n  },\n  {\n    name: 'Futures Trading',\n    href: '/trading/futures',\n    icon: TrendingUp,\n    description: 'Futures contracts trading'\n  },\n  {\n    name: 'Options Trading',\n    href: '/trading/options',\n    icon: BarChart3,\n    description: 'Options contracts trading'\n  },\n  {\n    name: 'Market Updates',\n    href: '/trading/market-updates',\n    icon: Bell,\n    description: 'Real-time market news and updates'\n  },\n  {\n    name: 'Pine Editor',\n    href: '/trading/pine-editor',\n    icon: Settings,\n    description: 'Pine Script editor for custom indicators'\n  },\n  {\n    name: 'Profit Targets',\n    href: '/trading/profit-targets',\n    icon: Award,\n    description: 'Set and manage profit targets'\n  },\n  {\n    name: 'Portfolio',\n    href: '/portfolio',\n    icon: BarChart3,\n    description: 'Manage your investments'\n  },\n  {\n    name: 'Copy Trade',\n    href: '/copy-trade',\n    icon: Copy,\n    description: 'Follow and copy successful traders'\n  },\n  {\n    name: 'Creators',\n    href: '/creators',\n    icon: Award,\n    description: 'Discover top trading creators and investors'\n  },\n  {\n    name: 'Social',\n    href: '/social',\n    icon: Users,\n    badge: 3,\n    description: 'Connect with the trading community'\n  },\n  {\n    name: 'Pricing',\n    href: '/pricing',\n    icon: Crown,\n    description: 'View subscription plans and pricing'\n  },\n  {\n    name: 'Payment',\n    href: '/payment',\n    icon: CreditCard,\n    description: 'Manage payment methods and billing'\n  },\n  {\n    name: 'Security',\n    href: '/security',\n    icon: Shield,\n    description: 'Security settings and compliance'\n  },\n  {\n    name: 'Automation',\n    href: '/automation',\n    icon: Bot,\n    description: 'Automated trading and system management'\n  },\n  {\n    name: 'Trading Bot',\n    href: '/automation/trading-bot',\n    icon: Bot,\n    description: 'Configure and manage trading bots'\n  },\n  {\n    name: 'Copy Trading Auto',\n    href: '/automation/copy-trading',\n    icon: Copy,\n    description: 'Automated copy trading settings'\n  },\n  {\n    name: 'Risk Management',\n    href: '/automation/risk-management',\n    icon: Shield,\n    description: 'Automated risk management rules'\n  },\n  {\n    name: 'Data Pipeline',\n    href: '/automation/data-pipeline',\n    icon: Activity,\n    description: 'Automated data processing and analysis'\n  },\n  {\n    name: 'Auto Notifications',\n    href: '/automation/notifications',\n    icon: Bell,\n    description: 'Automated notification settings'\n  },\n  {\n    name: 'Auto Payments',\n    href: '/automation/payments',\n    icon: CreditCard,\n    description: 'Automated payment processing'\n  },\n  {\n    name: 'Auto Reporting',\n    href: '/automation/reporting',\n    icon: BarChart3,\n    description: 'Automated report generation'\n  },\n  {\n    name: 'Auto Onboarding',\n    href: '/automation/onboarding',\n    icon: User,\n    description: 'Automated user onboarding process'\n  },\n  {\n    name: 'Brokers',\n    href: '/brokers',\n    icon: Link,\n    description: 'Connect and manage broker accounts'\n  },\n  {\n    name: 'Demo',\n    href: '/demo',\n    icon: Activity,\n    description: 'Practice trading with demo account'\n  },\n  {\n    name: 'Settings',\n    href: '/settings',\n    icon: Settings,\n    description: 'Application settings and preferences'\n  },\n  {\n    name: 'Profile',\n    href: '/profile',\n    icon: User,\n    description: 'Manage your profile and account details'\n  },\n  {\n    name: 'Help',\n    href: '/help',\n    icon: HelpCircle,\n    description: 'Get help and support'\n  }\n];\n\n// Items to hide from main navigation but keep in profile\nconst hiddenFromMainNav = ['Dashboard', 'User Dashboard', 'Trading', 'Live Trading', 'Futures Trading'];\n\n// Filtered navigation items for main navigation (excludes specified items)\nconst navigationItems = allNavigationItems.filter(item => !hiddenFromMainNav.includes(item.name));\n\nexport default function Navigation() {\n  const { user, logout } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const { isPaperTrading } = useTradingMode();\n  const router = useRouter();\n  const pathname = usePathname();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const [focusedItemIndex, setFocusedItemIndex] = useState(-1);\n  const [isDepositWithdrawModalOpen, setIsDepositWithdrawModalOpen] = useState(false);\n  const [depositWithdrawMode, setDepositWithdrawMode] = useState<'deposit' | 'withdraw'>('deposit');\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      router.push('/login');\n      toast.success('Logged out successfully');\n    } catch (error) {\n      toast.error('Failed to logout. Please try again.');\n    }\n  };\n\n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent, action: () => void) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      action();\n    }\n  };\n\n  const handleNavigationKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      setFocusedItemIndex(prev => (prev + 1) % allNavigationItems.length);\n    } else if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      setFocusedItemIndex(prev => prev <= 0 ? allNavigationItems.length - 1 : prev - 1);\n    } else if (event.key === 'Enter' && focusedItemIndex >= 0) {\n      event.preventDefault();\n      router.push(allNavigationItems[focusedItemIndex].href);\n    } else if (event.key === 'Escape') {\n      setIsProfileMenuOpen(false);\n      setIsMobileMenuOpen(false);\n    }\n  };\n\n  const isActive = (href: string) => {\n    return pathname === href;\n  };\n\n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Desktop Top Navigation Bar */}\n      <div className=\"hidden lg:block lg:fixed lg:top-0 lg:left-64 lg:right-0 lg:h-16 lg:bg-white lg:dark:bg-gray-800 lg:border-b lg:border-gray-200 lg:dark:border-gray-700 lg:shadow-sm lg:z-40\">\n        <div className=\"flex items-center justify-between h-full px-6\">\n          <div className=\"flex items-center space-x-6\">\n            <div className=\"relative\">\n              <button\n                onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}\n                className=\"flex items-center space-x-2 px-3 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n                aria-expanded={isProfileMenuOpen}\n                aria-haspopup=\"menu\"\n                aria-label=\"Quick navigation menu\"\n              >\n                <Menu className=\"h-4 w-4 text-gray-500 dark:text-gray-400\" />\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Quick Menu</span>\n                <ChevronDown className={`h-4 w-4 text-gray-400 transition-transform ${\n                  isProfileMenuOpen ? 'rotate-180' : ''\n                }`} />\n              </button>\n              \n              {/* Quick Access Dropdown */}\n              {isProfileMenuOpen && (\n                <div className=\"absolute top-full left-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 py-2 max-h-96 overflow-y-auto z-50\">\n                  <div className=\"px-2 py-2\">\n                    <p className=\"px-2 py-1 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Quick Access</p>\n                    {navigationItems.slice(0, 8).map((item) => {\n                      const active = isActive(item.href);\n                      return (\n                        <button\n                          key={item.href}\n                          onClick={() => {\n                            router.push(item.href);\n                            setIsProfileMenuOpen(false);\n                          }}\n                          className={`w-full flex items-center space-x-3 px-3 py-2 mb-1 rounded-lg transition-all duration-200 group text-sm ${\n                            active\n                              ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-sm'\n                              : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white'\n                          }`}\n                          title={item.description}\n                        >\n                          <item.icon className={`h-4 w-4 transition-colors ${\n                            active ? 'text-white' : 'text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-300'\n                          }`} aria-hidden=\"true\" />\n                          <span className=\"flex-1 text-left\">{item.name}</span>\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={toggleTheme}\n              className=\"p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n              aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}\n            >\n              {theme === 'dark' ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n            </button>\n            <button className=\"p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors relative\">\n              <Bell className=\"h-4 w-4\" />\n              <span className=\"absolute -top-1 -right-1 h-2 w-2 bg-red-500 rounded-full\"></span>\n            </button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-semibold text-xs\">\n                  {user ? `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}` || 'U' : 'U'}\n                </span>\n              </div>\n              <div className=\"text-left\">\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                  {user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User'}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Desktop Navigation */}\n      <nav className=\"hidden lg:flex lg:flex-col lg:w-64 lg:fixed lg:inset-y-0 lg:border-r lg:border-gray-200 lg:dark:border-gray-700 lg:bg-white lg:dark:bg-gray-800 lg:shadow-sm\">\n        {/* Logo */}\n        <div className=\"flex items-center justify-center h-16 px-6 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex flex-col items-center space-y-1\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\">\n                <Zap className=\"h-5 w-5 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold text-gray-900 dark:text-white\">KAIRO</span>\n            </div>\n            {isPaperTrading && <DemoModeIndicator className=\"text-xs\" />}\n          </div>\n        </div>\n\n        {/* Simplified Navigation - Only Logo Area */}\n        <div className=\"flex-1 flex items-center justify-center px-4 py-6\">\n          <div className=\"text-center text-gray-500 dark:text-gray-400\">\n            <p className=\"text-sm\">Navigation Menu</p>\n            <p className=\"text-xs mt-1\">Available in Profile</p>\n          </div>\n        </div>\n\n        {/* User Profile Section */}\n        <div className=\"border-t border-gray-200 dark:border-gray-700 p-4\">\n          <div className=\"relative\">\n            <button\n              onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}\n              className=\"w-full flex items-center space-x-3 p-3 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n              aria-expanded={isProfileMenuOpen}\n              aria-haspopup=\"menu\"\n              aria-label=\"User profile menu\"\n            >\n              <div className=\"h-10 w-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-semibold text-sm\">\n                  {user ? `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}` || 'U' : 'U'}\n                </span>\n              </div>\n              <div className=\"flex-1 text-left\">\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                  {user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User'}\n                </p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {user?.email || 'user@example.com'}\n                </p>\n              </div>\n              <ChevronDown className={`h-4 w-4 text-gray-400 transition-transform ${\n                isProfileMenuOpen ? 'rotate-180' : ''\n              }`} />\n            </button>\n\n            {/* Profile Dropdown with Navigation Menu */}\n            {isProfileMenuOpen && (\n              <div \n                className=\"absolute bottom-full left-0 right-0 mb-2 bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 py-2 max-h-96 overflow-y-auto\"\n                role=\"menu\"\n                aria-label=\"User profile and navigation menu\"\n              >\n                {/* Navigation Items */}\n                <div className=\"px-2 py-2\">\n                    <p className=\"px-2 py-1 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Navigation</p>\n                    <div onKeyDown={handleNavigationKeyDown}>\n                      {allNavigationItems.map((item, index) => {\n                      const active = isActive(item.href);\n                      const isFocused = focusedItemIndex === index;\n                      const isPortfolio = item.name === 'Portfolio';\n                      \n                      return (\n                        <div key={item.href} className=\"mb-1\">\n                          <button\n                            onClick={() => {\n                              router.push(item.href);\n                              setIsProfileMenuOpen(false);\n                            }}\n                            onKeyDown={(e) => handleKeyDown(e, () => {\n                              router.push(item.href);\n                              setIsProfileMenuOpen(false);\n                            })}\n                            className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-all duration-200 group text-sm ${\n                              active\n                                ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-sm'\n                                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white'\n                            } ${\n                              isFocused ? 'ring-2 ring-blue-500 ring-offset-2 dark:ring-offset-gray-800' : ''\n                            }`}\n                            aria-current={active ? 'page' : undefined}\n                            title={item.description}\n                          >\n                            <item.icon className={`h-4 w-4 transition-colors ${\n                              active ? 'text-white' : 'text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-300'\n                            }`} aria-hidden=\"true\" />\n                            <span className=\"flex-1 text-left\">{item.name}</span>\n                            {item.badge && (\n                              <span className={`ml-2 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold rounded-full ${\n                                active \n                                  ? 'bg-white/20 text-white' \n                                  : 'bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400'\n                              }`} aria-label={`${item.badge} notifications`}>\n                                {item.badge}\n                              </span>\n                            )}\n                          </button>\n                          \n                          {/* Quick Action Buttons for Portfolio */}\n                          {isPortfolio && (\n                            <div className=\"flex space-x-1 mt-1 px-3\">\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setDepositWithdrawMode('deposit');\n                                  setIsDepositWithdrawModalOpen(true);\n                                  setIsProfileMenuOpen(false);\n                                }}\n                                className=\"flex-1 flex items-center justify-center space-x-1 px-2 py-1 text-xs bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400 rounded-md hover:bg-green-200 dark:hover:bg-green-900/30 transition-colors\"\n                                title=\"Quick Deposit\"\n                              >\n                                <ArrowUpRight className=\"h-3 w-3\" />\n                                <span>Deposit</span>\n                              </button>\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setDepositWithdrawMode('withdraw');\n                                  setIsDepositWithdrawModalOpen(true);\n                                  setIsProfileMenuOpen(false);\n                                }}\n                                className=\"flex-1 flex items-center justify-center space-x-1 px-2 py-1 text-xs bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400 rounded-md hover:bg-blue-200 dark:hover:bg-blue-900/30 transition-colors\"\n                                title=\"Quick Withdraw\"\n                              >\n                                <ArrowDownLeft className=\"h-3 w-3\" />\n                                <span>Withdraw</span>\n                              </button>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n                \n                {/* Profile Actions */}\n                <div className=\"border-t border-gray-200 dark:border-gray-700 mt-2 pt-2\">\n                  <p className=\"px-4 py-1 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Account</p>\n                  <button\n                    onClick={() => {\n                      router.push('/profile');\n                      setIsProfileMenuOpen(false);\n                    }}\n                    className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                    role=\"menuitem\"\n                    aria-label=\"Go to profile page\"\n                  >\n                    <User className=\"h-4 w-4\" aria-hidden=\"true\" />\n                    <span>Profile</span>\n                  </button>\n                  <button\n                    onClick={() => {\n                      router.push('/settings');\n                      setIsProfileMenuOpen(false);\n                    }}\n                    className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  >\n                    <Settings className=\"h-4 w-4\" />\n                    <span>Settings</span>\n                  </button>\n                  <button\n                    onClick={toggleTheme}\n                    className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  >\n                    {theme === 'dark' ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n                    <span>{theme === 'dark' ? 'Light Mode' : 'Dark Mode'}</span>\n                  </button>\n                  <div className=\"border-t border-gray-200 dark:border-gray-700 my-2\"></div>\n                  <button\n                    onClick={handleLogout}\n                    className=\"w-full flex items-center space-x-3 px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                  >\n                    <LogOut className=\"h-4 w-4\" />\n                    <span>Sign Out</span>\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </nav>\n\n      {/* Mobile Navigation */}\n      <div className=\"lg:hidden\">\n        {/* Mobile Header */}\n        <div className=\"flex items-center justify-between h-16 px-4 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 shadow-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center\" role=\"img\" aria-label=\"KAIRO logo\">\n                <Zap className=\"h-5 w-5 text-white\" aria-hidden=\"true\" />\n              </div>\n              <span className=\"text-xl font-bold text-gray-900 dark:text-white\">KAIRO</span>\n            </div>\n            {isPaperTrading && <DemoModeIndicator className=\"text-xs\" />}\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={toggleTheme}\n              className=\"p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n              aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}\n              title={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}\n            >\n              {theme === 'dark' ? <Sun className=\"h-5 w-5\" aria-hidden=\"true\" /> : <Moon className=\"h-5 w-5\" aria-hidden=\"true\" />}\n            </button>\n            <button \n              className=\"p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors relative\"\n              aria-label=\"Notifications\"\n              title=\"View notifications\"\n            >\n              <Bell className=\"h-5 w-5\" />\n              <span className=\"absolute -top-1 -right-1 h-3 w-3 bg-red-500 rounded-full\"></span>\n            </button>\n            <button\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n              aria-label=\"Open navigation menu\"\n              title=\"Open navigation menu\"\n            >\n              <Menu className=\"h-5 w-5\" aria-hidden=\"true\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile Menu Overlay */}\n        {isMobileMenuOpen && (\n          <div className=\"fixed inset-0 z-50 lg:hidden\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"mobile-menu-title\">\n            <div className=\"fixed inset-0 bg-black bg-opacity-25\" onClick={() => setIsMobileMenuOpen(false)} aria-hidden=\"true\"></div>\n            <div className=\"fixed top-0 right-0 bottom-0 w-full max-w-sm bg-white dark:bg-gray-800 shadow-xl\">\n              {/* Mobile Menu Header */}\n              <div className=\"flex items-center justify-between h-16 px-4 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"h-10 w-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold text-sm\">\n                      {user ? `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}` || 'U' : 'U'}\n                    </span>\n                  </div>\n                  <div>\n                    <h2 id=\"mobile-menu-title\" className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'User' : 'User'}\n                    </h2>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {user?.email || 'user@example.com'}\n                    </p>\n                  </div>\n                </div>\n                <button\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  className=\"p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 rounded-lg\"\n                  aria-label=\"Close navigation menu\"\n                  title=\"Close navigation menu\"\n                >\n                  <X className=\"h-6 w-6\" aria-hidden=\"true\" />\n                </button>\n              </div>\n\n              {/* Mobile Navigation Items */}\n              <div className=\"px-4 py-6 space-y-2\" onKeyDown={handleNavigationKeyDown} role=\"navigation\" aria-label=\"Mobile navigation menu\">\n                {allNavigationItems.map((item, index) => {\n                  const Icon = item.icon;\n                  const active = isActive(item.href);\n                  const isFocused = focusedItemIndex === index;\n                  \n                  return (\n                    <button\n                      key={item.name}\n                      onClick={() => {\n                        router.push(item.href);\n                        setIsMobileMenuOpen(false);\n                      }}\n                      onKeyDown={(e) => handleKeyDown(e, () => {\n                        router.push(item.href);\n                        setIsMobileMenuOpen(false);\n                      })}\n                      className={`w-full group flex items-center px-4 py-3 text-sm font-medium rounded-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 ${\n                        active\n                          ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg'\n                          : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n                      } ${\n                        isFocused ? 'ring-2 ring-blue-500 ring-offset-2 dark:ring-offset-gray-800' : ''\n                      }`}\n                      aria-current={active ? 'page' : undefined}\n                      aria-describedby={item.description ? `${item.href}-mobile-desc` : undefined}\n                      title={item.description}\n                    >\n                      <Icon className={`mr-3 h-5 w-5 ${\n                        active ? 'text-white' : 'text-gray-400'\n                      }`} aria-hidden=\"true\" />\n                      <div className=\"flex-1 text-left\">\n                        <div className=\"font-medium\">{item.name}</div>\n                        {item.description && (\n                          <div className={`text-xs mt-1 ${\n                            active ? 'text-white/80' : 'text-gray-500 dark:text-gray-400'\n                          }`} id={`${item.href}-mobile-desc`}>\n                            {item.description}\n                          </div>\n                        )}\n                      </div>\n                      {item.badge && (\n                        <span className={`ml-2 inline-flex items-center justify-center px-2 py-1 text-xs font-bold rounded-full ${\n                          active \n                            ? 'bg-white/20 text-white' \n                            : 'bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400'\n                        }`} aria-label={`${item.badge} notifications`}>\n                          {item.badge}\n                        </span>\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n\n              {/* Mobile Menu Footer */}\n              <div className=\"border-t border-gray-200 dark:border-gray-700 px-4 py-4 space-y-2\">\n                <button\n                  onClick={() => {\n                    router.push('/profile');\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"w-full flex items-center space-x-3 px-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-xl transition-colors\"\n                >\n                  <User className=\"h-5 w-5 text-gray-400\" />\n                  <span>Profile</span>\n                </button>\n                <button\n                  onClick={() => {\n                    router.push('/settings');\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"w-full flex items-center space-x-3 px-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-xl transition-colors\"\n                >\n                  <Settings className=\"h-5 w-5 text-gray-400\" />\n                  <span>Settings</span>\n                </button>\n                <button\n                  onClick={() => {\n                    router.push('/help');\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"w-full flex items-center space-x-3 px-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-xl transition-colors\"\n                >\n                  <HelpCircle className=\"h-5 w-5 text-gray-400\" />\n                  <span>Help & Support</span>\n                </button>\n                <button\n                  onClick={handleLogout}\n                  className=\"w-full flex items-center space-x-3 px-4 py-3 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-xl transition-colors\"\n                >\n                  <LogOut className=\"h-5 w-5\" />\n                  <span>Sign Out</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Mobile Bottom Navigation */}\n      <div className=\"lg:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 shadow-lg\">\n        <div className=\"grid grid-cols-5 h-16\">\n          {/* Show only the 5 most important navigation items in bottom bar (filtered) */}\n          {navigationItems.slice(0, 5).map((item) => {\n            const Icon = item.icon;\n            const active = isActive(item.href);\n            \n            return (\n              <button\n                key={item.name}\n                onClick={() => router.push(item.href)}\n                className={`flex flex-col items-center justify-center space-y-1 transition-colors ${\n                  active\n                    ? 'text-blue-600 dark:text-blue-400'\n                    : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300'\n                }`}\n              >\n                <div className=\"relative\">\n                  <Icon className=\"h-5 w-5\" />\n                  {item.badge && (\n                    <span className=\"absolute -top-2 -right-2 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">\n                      {item.badge}\n                    </span>\n                  )}\n                </div>\n                <span className=\"text-xs font-medium truncate\">{item.name}</span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Deposit/Withdraw Modal */}\n      <DepositWithdrawModal\n        isOpen={isDepositWithdrawModalOpen}\n        onClose={() => setIsDepositWithdrawModalOpen(false)}\n        mode={depositWithdrawMode}\n      />\n    </>\n  );\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;;;AAxCA;;;;;;;;;;AAkDA,mDAAmD;AACnD,MAAM,qBAAuC;IAC3C;QACE,MAAM;QACN,MAAM;QACN,MAAM,6MAAI;QACV,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,6MAAI;QACV,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,mOAAU;QAChB,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,gNAAK;QACX,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,mOAAU;QAChB,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,mOAAU;QAChB,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,oOAAS;QACf,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,6MAAI;QACV,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,yNAAQ;QACd,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,gNAAK;QACX,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,oOAAS;QACf,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,6MAAI;QACV,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,gNAAK;QACX,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,gNAAK;QACX,OAAO;QACP,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,gNAAK;QACX,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,mOAAU;QAChB,aAAa;IACf;IACA;QACE,MAAM;QACN,MAAM;QACN,MAAM,mNAAM;QACZ,aAAa;IACf;IACA;QACE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","debugId":null}},
    {"offset": {"line": 7800, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/components/layouts/AppLayout.tsx"],"sourcesContent":["'use client';\n\nimport { ReactNode } from 'react';\nimport Navigation from '@/components/Navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useEffect } from 'react';\n\ninterface AppLayoutProps {\n  children: ReactNode;\n  requireAuth?: boolean;\n}\n\nexport default function AppLayout({ children, requireAuth = true }: AppLayoutProps) {\n  const { user, loading } = useAuth();\n  const router = useRouter();\n  const pathname = usePathname();\n\n  // Public routes that don't require authentication\n  const publicRoutes = ['/login', '/register', '/demo', '/'];\n  const isPublicRoute = publicRoutes.includes(pathname);\n\n  useEffect(() => {\n    if (!loading && requireAuth && !user && !isPublicRoute) {\n      router.push('/login');\n    }\n  }, [user, loading, requireAuth, isPublicRoute, router]);\n\n  // Show loading spinner while checking authentication\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  // For public routes or when auth is not required, show content without navigation\n  if (!requireAuth || isPublicRoute) {\n    return <>{children}</>;\n  }\n\n  // For authenticated routes, show navigation + content\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navigation />\n      \n      {/* Main content area with proper spacing for navigation */}\n      <div className=\"lg:pl-64 lg:pt-16\">\n        {/* Content wrapper with padding */}\n        <main className=\"min-h-screen\">\n          {children}\n        </main>\n      </div>\n      \n      {/* Bottom spacing for mobile navigation */}\n      <div className=\"h-16 lg:hidden\"></div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;;;AANA;;;;;AAae,SAAS,UAAU,KAAgD;QAAhD,EAAE,QAAQ,EAAE,cAAc,IAAI,EAAkB,GAAhD;;IAChC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAA,6IAAO;IACjC,MAAM,SAAS,IAAA,kJAAS;IACxB,MAAM,WAAW,IAAA,oJAAW;IAE5B,kDAAkD;IAClD,MAAM,eAAe;QAAC;QAAU;QAAa;QAAS;KAAI;IAC1D,MAAM,gBAAgB,aAAa,QAAQ,CAAC;IAE5C,IAAA,0KAAS;+BAAC;YACR,IAAI,CAAC,WAAW,eAAe,CAAC,QAAQ,CAAC,eAAe;gBACtD,OAAO,IAAI,CAAC;YACd;QACF;8BAAG;QAAC;QAAM;QAAS;QAAa;QAAe;KAAO;IAEtD,qDAAqD;IACrD,IAAI,SAAS;QACX,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;;;;;;;;;;IAGrB;IAEA,kFAAkF;IAClF,IAAI,CAAC,eAAe,eAAe;QACjC,qBAAO;sBAAG;;IACZ;IAEA,sDAAsD;IACtD,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,8IAAU;;;;;0BAGX,6LAAC;gBAAI,WAAU;0BAEb,cAAA,6LAAC;oBAAK,WAAU;8BACb;;;;;;;;;;;0BAKL,6LAAC;gBAAI,WAAU;;;;;;;;;;;;AAGrB;GA9CwB;;QACI,6IAAO;QAClB,kJAAS;QACP,oJAAW;;;KAHN","debugId":null}},
    {"offset": {"line": 7921, "column": 0}, "map": {"version":3,"sources":["file:///Users/blvckdlphn/projects/KAIRO/src/app/trading/profit-targets/page.tsx"],"sourcesContent":["'use client';\n\nimport ProfitTargetSettings from '../../../../components/trading/ProfitTargetSettings';\nimport AppLayout from '@/components/layouts/AppLayout';\nimport { Target, ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\n\nexport default function ProfitTargetsPage() {\n  return (\n    <AppLayout>\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-6\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Link\n                href=\"/trading\"\n                className=\"flex items-center space-x-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n                <span>Back to Trading</span>\n              </Link>\n              <div className=\"h-6 w-px bg-gray-300 dark:bg-gray-600\" />\n              <div className=\"flex items-center space-x-2\">\n                <Target className=\"h-6 w-6 text-green-600\" />\n                <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                  Daily Profit Targets\n                </h1>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                <span>Risk Management</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <ProfitTargetSettings />\n      </div>\n      </div>\n    </AppLayout>\n  );\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAAA;AACA;AALA;;;;;;AAOe,SAAS;IACtB,qBACE,6LAAC,wJAAS;kBACR,cAAA,6LAAC;YAAI,WAAU;;8BAEf,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;sDACb,6LAAC,0KAAI;4CACH,MAAK;4CACL,WAAU;;8DAEV,6LAAC,gOAAS;oDAAC,WAAU;;;;;;8DACrB,6LAAC;8DAAK;;;;;;;;;;;;sDAER,6LAAC;4CAAI,WAAU;;;;;;sDACf,6LAAC;4CAAI,WAAU;;8DACb,6LAAC,mNAAM;oDAAC,WAAU;;;;;;8DAClB,6LAAC;oDAAG,WAAU;8DAAsD;;;;;;;;;;;;;;;;;;8CAMxE,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC;sDAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAQhB,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC,4JAAoB;;;;;;;;;;;;;;;;;;;;;AAK7B;KAzCwB","debugId":null}}]
}